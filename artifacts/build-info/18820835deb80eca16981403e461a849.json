{
	"id": "18820835deb80eca16981403e461a849",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.5.16",
	"solcLongVersion": "0.5.16+commit.9c3226ce",
	"input": {
		"language": "Solidity",
		"sources": {
			"TokenA.sol": {
				"content": "pragma solidity 0.5.16;\n\ninterface  TokA {\n  /**\n   * @dev Returns the amount of tokens in existence.\n   */\n  function totalSupply() external view returns (uint256);\n\n  /**\n   * @dev Returns the token decimals.\n   */\n  function decimals() external view returns (uint8);\n\n  /**\n   * @dev Returns the token symbol.\n   */\n  function symbol() external view returns (string memory);\n\n  /**\n  * @dev Returns the token name.\n  */\n  function name() external view returns (string memory);\n\n  /**\n   * @dev Returns the bep token owner.\n   */\n  function getOwner() external view returns (address);\n\n  /**\n   * @dev Returns the amount of tokens owned by `account`.\n   */\n  function balanceOf(address account) external view returns (uint256);\n\n  /**\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transfer(address recipient, uint256 amount) external returns (bool);\n\n  /**\n   * @dev Returns the remaining number of tokens that `spender` will be\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\n   * zero by default.\n   *\n   * This value changes when {approve} or {transferFrom} are called.\n   */\n  function allowance(address _owner, address spender) external view returns (uint256);\n\n  /**\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\n   * that someone may use both the old and the new allowance by unfortunate\n   * transaction ordering. One possible solution to mitigate this race\n   * condition is to first reduce the spender's allowance to 0 and set the\n   * desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   *\n   * Emits an {Approval} event.\n   */\n  function approve(address spender, uint256 amount) external returns (bool);\n\n  /**\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\n   * allowance mechanism. `amount` is then deducted from the caller's\n   * allowance.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n  /**\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\n   * another (`to`).\n   *\n   * Note that `value` may be zero.\n   */\n  event Transfer(address indexed from, address indexed to, uint256 value);\n\n  /**\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n   * a call to {approve}. `value` is the new allowance.\n   */\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract Context {\n  // Empty internal constructor, to prevent people from mistakenly deploying\n  // an instance of this contract, which should be used via inheritance.\n  constructor () internal { }\n\n  function _msgSender() internal view returns (address payable) {\n    return msg.sender;\n  }\n\n  function _msgData() internal view returns (bytes memory) {\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n    return msg.data;\n  }\n}\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n  /**\n   * @dev Returns the addition of two unsigned integers, reverting on\n   * overflow.\n   *\n   * Counterpart to Solidity's `+` operator.\n   *\n   * Requirements:\n   * - Addition cannot overflow.\n   */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a, \"SafeMath: addition overflow\");\n\n    return c;\n  }\n\n  /**\n   * @dev Returns the subtraction of two unsigned integers, reverting on\n   * overflow (when the result is negative).\n   *\n   * Counterpart to Solidity's `-` operator.\n   *\n   * Requirements:\n   * - Subtraction cannot overflow.\n   */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    return sub(a, b, \"SafeMath: subtraction overflow\");\n  }\n\n  /**\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n   * overflow (when the result is negative).\n   *\n   * Counterpart to Solidity's `-` operator.\n   *\n   * Requirements:\n   * - Subtraction cannot overflow.\n   */\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n    require(b <= a, errorMessage);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n   * @dev Returns the multiplication of two unsigned integers, reverting on\n   * overflow.\n   *\n   * Counterpart to Solidity's `*` operator.\n   *\n   * Requirements:\n   * - Multiplication cannot overflow.\n   */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b, \"SafeMath: multiplication overflow\");\n\n    return c;\n  }\n\n  /**\n   * @dev Returns the integer division of two unsigned integers. Reverts on\n   * division by zero. The result is rounded towards zero.\n   *\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\n   * uses an invalid opcode to revert (consuming all remaining gas).\n   *\n   * Requirements:\n   * - The divisor cannot be zero.\n   */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    return div(a, b, \"SafeMath: division by zero\");\n  }\n\n  /**\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n   * division by zero. The result is rounded towards zero.\n   *\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\n   * uses an invalid opcode to revert (consuming all remaining gas).\n   *\n   * Requirements:\n   * - The divisor cannot be zero.\n   */\n  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n    // Solidity only automatically asserts when dividing by 0\n    require(b > 0, errorMessage);\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n   * Reverts when dividing by zero.\n   *\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\n   * invalid opcode to revert (consuming all remaining gas).\n   *\n   * Requirements:\n   * - The divisor cannot be zero.\n   */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    return mod(a, b, \"SafeMath: modulo by zero\");\n  }\n\n  /**\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n   * Reverts with custom message when dividing by zero.\n   *\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\n   * invalid opcode to revert (consuming all remaining gas).\n   *\n   * Requirements:\n   * - The divisor cannot be zero.\n   */\n  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n    require(b != 0, errorMessage);\n    return a % b;\n  }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n  address private _owner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  /**\n   * @dev Initializes the contract setting the deployer as the initial owner.\n   */\n  constructor () internal {\n    address msgSender = _msgSender();\n    _owner = msgSender;\n    emit OwnershipTransferred(address(0), msgSender);\n  }\n\n  /**\n   * @dev Returns the address of the current owner.\n   */\n  function owner() public view returns (address) {\n    return _owner;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n    _;\n  }\n\n  /**\n   * @dev Leaves the contract without owner. It will not be possible to call\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\n   *\n   * NOTE: Renouncing ownership will leave the contract without an owner,\n   * thereby removing any functionality that is only available to the owner.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipTransferred(_owner, address(0));\n    _owner = address(0);\n  }\n\n  /**\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\n   * Can only be called by the current owner.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    _transferOwnership(newOwner);\n  }\n\n  /**\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\n   */\n  function _transferOwnership(address newOwner) internal {\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}\n\ncontract TokenA is Context,  TokA, Ownable {\n  using SafeMath for uint256;\n\n  mapping (address => uint256) private _balances;\n\n  mapping (address => mapping (address => uint256)) private _allowances;\n\n  uint256 private _totalSupply;\n  uint8 private _decimals;\n  string private _symbol;\n  string private _name;\n\n   constructor() public {\n    _name = \"TokenA\";\n    _symbol = \"A\";\n    _decimals = 18;\n    _totalSupply = 1000000000000000000000000;\n    _balances[msg.sender] = _totalSupply;\n\n    emit Transfer(address(0), msg.sender, _totalSupply);\n  }\n\n  /**\n   * @dev Returns the bep token owner.\n   */\n  function getOwner() external view returns (address) {\n    return owner();\n  }\n\n  /**\n   * @dev Returns the token decimals.\n   */\n  function decimals() external view returns (uint8) {\n    return _decimals;\n  }\n\n  /**\n   * @dev Returns the token symbol.\n   */\n  function symbol() external view returns (string memory) {\n    return _symbol;\n  }\n\n  /**\n  * @dev Returns the token name.\n  */\n  function name() external view returns (string memory) {\n    return _name;\n  }\n\n  /**\n   * @dev See {NURA20-totalSupply}.\n   */\n  function totalSupply() external view returns (uint256) {\n    return _totalSupply;\n  }\n\n  /**\n   * @dev See {NURA20-balanceOf}.\n   */\n  function balanceOf(address account) external view returns (uint256) {\n    return _balances[account];\n  }\n\n  /**\n   * @dev See {NURA20-transfer}.\n   *\n   * Requirements:\n   *\n   * - `recipient` cannot be the zero address.\n   * - the caller must have a balance of at least `amount`.\n   */\n  function transfer(address recipient, uint256 amount) external returns (bool) {\n    _transfer(_msgSender(), recipient, amount);\n    return true;\n  }\n\n  /**\n   * @dev See {NURA20-allowance}.\n   */\n  function allowance(address owner, address spender) external view returns (uint256) {\n    return _allowances[owner][spender];\n  }\n\n  /**\n   * @dev See {NURA20-approve}.\n   *\n   * Requirements:\n   *\n   * - `spender` cannot be the zero address.\n   */\n  function approve(address spender, uint256 amount) external returns (bool) {\n    _approve(_msgSender(), spender, amount);\n    return true;\n  }\n\n  /**\n   * @dev See {NURA20-transferFrom}.\n   *\n   * Emits an {Approval} event indicating the updated allowance. This is not\n   * required by the EIP. See the note at the beginning of {NURA20};\n   *\n   * Requirements:\n   * - `sender` and `recipient` cannot be the zero address.\n   * - `sender` must have a balance of at least `amount`.\n   * - the caller must have allowance for `sender`'s tokens of at least\n   * `amount`.\n   */\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {\n    _transfer(sender, recipient, amount);\n    _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"NURA20: transfer amount exceeds allowance\"));\n    return true;\n  }\n\n  /**\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\n   *\n   * This is an alternative to {approve} that can be used as a mitigation for\n   * problems described in {NURA20-approve}.\n   *\n   * Emits an {Approval} event indicating the updated allowance.\n   *\n   * Requirements:\n   *\n   * - `spender` cannot be the zero address.\n   */\n  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n    return true;\n  }\n\n  /**\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\n   *\n   * This is an alternative to {approve} that can be used as a mitigation for\n   * problems described in {NURA20-approve}.\n   *\n   * Emits an {Approval} event indicating the updated allowance.\n   *\n   * Requirements:\n   *\n   * - `spender` cannot be the zero address.\n   * - `spender` must have allowance for the caller of at least\n   * `subtractedValue`.\n   */\n  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"NURA20: decreased allowance below zero\"));\n    return true;\n  }\n\n  /**\n   * @dev Creates `amount` tokens and assigns them to `msg.sender`, increasing\n   * the total supply.\n   *\n   * Requirements\n   *\n   * - `msg.sender` must be the token owner\n   */\n  function mint(uint256 amount) public onlyOwner returns (bool) {\n    _mint(_msgSender(), amount);\n    return true;\n  }\n\n  /**\n   * @dev Moves tokens `amount` from `sender` to `recipient`.\n   *\n   * This is internal function is equivalent to {transfer}, and can be used to\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\n   *\n   * Emits a {Transfer} event.\n   *\n   * Requirements:\n   *\n   * - `sender` cannot be the zero address.\n   * - `recipient` cannot be the zero address.\n   * - `sender` must have a balance of at least `amount`.\n   */\n  function _transfer(address sender, address recipient, uint256 amount) internal {\n    require(sender != address(0), \"NURA20: transfer from the zero address\");\n    require(recipient != address(0), \"NURA20: transfer to the zero address\");\n\n    _balances[sender] = _balances[sender].sub(amount, \"NURA20: transfer amount exceeds balance\");\n    _balances[recipient] = _balances[recipient].add(amount);\n    emit Transfer(sender, recipient, amount);\n  }\n\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n   * the total supply.\n   *\n   * Emits a {Transfer} event with `from` set to the zero address.\n   *\n   * Requirements\n   *\n   * - `to` cannot be the zero address.\n   */\n  function _mint(address account, uint256 amount) internal {\n    require(account != address(0), \"NURA20: mint to the zero address\");\n\n    _totalSupply = _totalSupply.add(amount);\n    _balances[account] = _balances[account].add(amount);\n    emit Transfer(address(0), account, amount);\n  }\n\n  /**\n   * @dev Destroys `amount` tokens from `account`, reducing the\n   * total supply.\n   *\n   * Emits a {Transfer} event with `to` set to the zero address.\n   *\n   * Requirements\n   *\n   * - `account` cannot be the zero address.\n   * - `account` must have at least `amount` tokens.\n   */\n  function _burn(address account, uint256 amount) internal {\n    require(account != address(0), \"NURA20: burn from the zero address\");\n\n    _balances[account] = _balances[account].sub(amount, \"NURA20: burn amount exceeds balance\");\n    _totalSupply = _totalSupply.sub(amount);\n    emit Transfer(account, address(0), amount);\n  }\n\n  /**\n   * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n   *\n   * This is internal function is equivalent to `approve`, and can be used to\n   * e.g. set automatic allowances for certain subsystems, etc.\n   *\n   * Emits an {Approval} event.\n   *\n   * Requirements:\n   *\n   * - `owner` cannot be the zero address.\n   * - `spender` cannot be the zero address.\n   */\n  function _approve(address owner, address spender, uint256 amount) internal {\n    require(owner != address(0), \"NURA20: approve from the zero address\");\n    require(spender != address(0), \"NURA20: approve to the zero address\");\n\n    _allowances[owner][spender] = amount;\n    emit Approval(owner, spender, amount);\n  }\n\n  /**\n   * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\n   * from the caller's allowance.\n   *\n   * See {_burn} and {_approve}.\n   */\n  function _burnFrom(address account, uint256 amount) internal {\n    _burn(account, amount);\n    _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"NURA20: burn amount exceeds allowance\"));\n  }\n}"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"TokenA.sol": {
				"Context": {
					"abi": [
						{
							"inputs": [],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "constructor"
						}
					],
					"devdoc": {
						"methods": {}
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"TokenA.sol\":\"Context\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"TokenA.sol\":{\"keccak256\":\"0x6a62b807d56227170dc97fbecf66276a1e31e1ad63f65b5795e0beaa6d2faa92\",\"urls\":[\"bzz-raw://9e13f876f57144099f5fe6d5c8d2cd3c11567e4f0583fb439b1ea7d628bc80db\",\"dweb:/ipfs/QmabxAXXwy4qiXfzVqfLQjmzSKASTxGxLbdocBvfxp8SVU\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"methods": {}
					}
				},
				"Ownable": {
					"abi": [
						{
							"inputs": [],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"constant": true,
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": false,
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"constant": false,
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. * By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. * This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.   * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						}
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. * By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. * This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.   * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"TokenA.sol\":\"Ownable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"TokenA.sol\":{\"keccak256\":\"0x6a62b807d56227170dc97fbecf66276a1e31e1ad63f65b5795e0beaa6d2faa92\",\"urls\":[\"bzz-raw://9e13f876f57144099f5fe6d5c8d2cd3c11567e4f0583fb439b1ea7d628bc80db\",\"dweb:/ipfs/QmabxAXXwy4qiXfzVqfLQjmzSKASTxGxLbdocBvfxp8SVU\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 302,
								"contract": "TokenA.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"methods": {}
					}
				},
				"SafeMath": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers over Solidity's arithmetic operations with added overflow checks. * Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. * Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.",
						"methods": {}
					},
					"evm": {
						"assembly": "    /* \"TokenA.sol\":4468:8762  library SafeMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n    /* \"--CODEGEN--\":132:134   */\n  0x0b\n    /* \"--CODEGEN--\":166:173   */\n  dup3\n    /* \"--CODEGEN--\":155:164   */\n  dup3\n    /* \"--CODEGEN--\":146:153   */\n  dup3\n    /* \"--CODEGEN--\":137:174   */\n  codecopy\n    /* \"--CODEGEN--\":255:262   */\n  dup1\n    /* \"--CODEGEN--\":249:263   */\n  mload\n    /* \"--CODEGEN--\":246:247   */\n  0x00\n    /* \"--CODEGEN--\":241:264   */\n  byte\n    /* \"--CODEGEN--\":235:239   */\n  0x73\n    /* \"--CODEGEN--\":232:265   */\n  eq\n    /* \"--CODEGEN--\":222:224   */\n  tag_1\n  jumpi\n    /* \"--CODEGEN--\":269:278   */\n  invalid\n    /* \"--CODEGEN--\":222:224   */\ntag_1:\n    /* \"--CODEGEN--\":293:302   */\n  address\n    /* \"--CODEGEN--\":290:291   */\n  0x00\n    /* \"--CODEGEN--\":283:303   */\n  mstore\n    /* \"--CODEGEN--\":323:327   */\n  0x73\n    /* \"--CODEGEN--\":314:321   */\n  dup2\n    /* \"--CODEGEN--\":306:328   */\n  mstore8\n    /* \"--CODEGEN--\":347:354   */\n  dup3\n    /* \"--CODEGEN--\":338:345   */\n  dup2\n    /* \"--CODEGEN--\":331:355   */\n  return\nstop\n\nsub_0: assembly {\n        /* \"TokenA.sol\":4468:8762  library SafeMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa265627a7a7231582017a7864aba75c51ccfaf0a69b56a1d352471e7359bb88306b4cf7eb11599842264736f6c63430005100032\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "60556023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a7231582017a7864aba75c51ccfaf0a69b56a1d352471e7359bb88306b4cf7eb11599842264736f6c63430005100032",
							"opcodes": "PUSH1 0x55 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 OR 0xA7 DUP7 0x4A 0xBA PUSH22 0xC51CCFAF0A69B56A1D352471E7359BB88306B4CF7EB1 ISZERO SWAP10 DUP5 0x22 PUSH5 0x736F6C6343 STOP SDIV LT STOP ORIGIN ",
							"sourceMap": "4468:4294:0:-;;132:2:-1;166:7;155:9;146:7;137:37;255:7;249:14;246:1;241:23;235:4;232:33;222:2;;269:9;222:2;293:9;290:1;283:20;323:4;314:7;306:22;347:7;338;331:24"
						},
						"deployedBytecode": {
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a7231582017a7864aba75c51ccfaf0a69b56a1d352471e7359bb88306b4cf7eb11599842264736f6c63430005100032",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 OR 0xA7 DUP7 0x4A 0xBA PUSH22 0xC51CCFAF0A69B56A1D352471E7359BB88306B4CF7EB1 ISZERO SWAP10 DUP5 0x22 PUSH5 0x736F6C6343 STOP SDIV LT STOP ORIGIN ",
							"sourceMap": "4468:4294:0:-;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "94",
								"totalCost": "17094"
							},
							"internal": {
								"add(uint256,uint256)": "infinite",
								"div(uint256,uint256)": "infinite",
								"div(uint256,uint256,string memory)": "infinite",
								"mod(uint256,uint256)": "infinite",
								"mod(uint256,uint256,string memory)": "infinite",
								"mul(uint256,uint256)": "infinite",
								"sub(uint256,uint256)": "infinite",
								"sub(uint256,uint256,string memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 4468,
									"end": 8762,
									"name": "PUSH #[$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 4468,
									"end": 8762,
									"name": "PUSH [$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 132,
									"end": 134,
									"name": "PUSH",
									"value": "B"
								},
								{
									"begin": 166,
									"end": 173,
									"name": "DUP3"
								},
								{
									"begin": 155,
									"end": 164,
									"name": "DUP3"
								},
								{
									"begin": 146,
									"end": 153,
									"name": "DUP3"
								},
								{
									"begin": 137,
									"end": 174,
									"name": "CODECOPY"
								},
								{
									"begin": 255,
									"end": 262,
									"name": "DUP1"
								},
								{
									"begin": 249,
									"end": 263,
									"name": "MLOAD"
								},
								{
									"begin": 246,
									"end": 247,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 241,
									"end": 264,
									"name": "BYTE"
								},
								{
									"begin": 235,
									"end": 239,
									"name": "PUSH",
									"value": "73"
								},
								{
									"begin": 232,
									"end": 265,
									"name": "EQ"
								},
								{
									"begin": 222,
									"end": 224,
									"name": "PUSH [tag]",
									"value": "1"
								},
								{
									"begin": 222,
									"end": 224,
									"name": "JUMPI"
								},
								{
									"begin": 269,
									"end": 278,
									"name": "INVALID"
								},
								{
									"begin": 222,
									"end": 224,
									"name": "tag",
									"value": "1"
								},
								{
									"begin": 222,
									"end": 224,
									"name": "JUMPDEST"
								},
								{
									"begin": 293,
									"end": 302,
									"name": "ADDRESS"
								},
								{
									"begin": 290,
									"end": 291,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 283,
									"end": 303,
									"name": "MSTORE"
								},
								{
									"begin": 323,
									"end": 327,
									"name": "PUSH",
									"value": "73"
								},
								{
									"begin": 314,
									"end": 321,
									"name": "DUP2"
								},
								{
									"begin": 306,
									"end": 328,
									"name": "MSTORE8"
								},
								{
									"begin": 347,
									"end": 354,
									"name": "DUP3"
								},
								{
									"begin": 338,
									"end": 345,
									"name": "DUP2"
								},
								{
									"begin": 331,
									"end": 355,
									"name": "RETURN"
								}
							],
							".data": {
								"0": {
									".auxdata": "a265627a7a7231582017a7864aba75c51ccfaf0a69b56a1d352471e7359bb88306b4cf7eb11599842264736f6c63430005100032",
									".code": [
										{
											"begin": 4468,
											"end": 8762,
											"name": "PUSHDEPLOYADDRESS"
										},
										{
											"begin": 4468,
											"end": 8762,
											"name": "ADDRESS"
										},
										{
											"begin": 4468,
											"end": 8762,
											"name": "EQ"
										},
										{
											"begin": 4468,
											"end": 8762,
											"name": "PUSH",
											"value": "80"
										},
										{
											"begin": 4468,
											"end": 8762,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 4468,
											"end": 8762,
											"name": "MSTORE"
										},
										{
											"begin": 4468,
											"end": 8762,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 4468,
											"end": 8762,
											"name": "DUP1"
										},
										{
											"begin": 4468,
											"end": 8762,
											"name": "REVERT"
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations with added overflow checks. * Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. * Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.\",\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"TokenA.sol\":\"SafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"TokenA.sol\":{\"keccak256\":\"0x6a62b807d56227170dc97fbecf66276a1e31e1ad63f65b5795e0beaa6d2faa92\",\"urls\":[\"bzz-raw://9e13f876f57144099f5fe6d5c8d2cd3c11567e4f0583fb439b1ea7d628bc80db\",\"dweb:/ipfs/QmabxAXXwy4qiXfzVqfLQjmzSKASTxGxLbdocBvfxp8SVU\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"methods": {}
					}
				},
				"TokA": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"constant": true,
							"inputs": [
								{
									"internalType": "address",
									"name": "_owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": false,
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [],
							"name": "getOwner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": false,
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"constant": false,
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default.   * This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens.   * Returns a boolean value indicating whether the operation succeeded.   * IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729   * Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"decimals()": {
								"details": "Returns the token decimals."
							},
							"getOwner()": {
								"details": "Returns the bep token owner."
							},
							"name()": {
								"details": "Returns the token name."
							},
							"symbol()": {
								"details": "Returns the token symbol."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `recipient`.   * Returns a boolean value indicating whether the operation succeeded.   * Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance.   * Returns a boolean value indicating whether the operation succeeded.   * Emits a {Transfer} event."
							}
						}
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"getOwner()": "893d20e8",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default.   * This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens.   * Returns a boolean value indicating whether the operation succeeded.   * IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729   * Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the token decimals.\"},\"getOwner()\":{\"details\":\"Returns the bep token owner.\"},\"name()\":{\"details\":\"Returns the token name.\"},\"symbol()\":{\"details\":\"Returns the token symbol.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `recipient`.   * Returns a boolean value indicating whether the operation succeeded.   * Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance.   * Returns a boolean value indicating whether the operation succeeded.   * Emits a {Transfer} event.\"}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"TokenA.sol\":\"TokA\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"TokenA.sol\":{\"keccak256\":\"0x6a62b807d56227170dc97fbecf66276a1e31e1ad63f65b5795e0beaa6d2faa92\",\"urls\":[\"bzz-raw://9e13f876f57144099f5fe6d5c8d2cd3c11567e4f0583fb439b1ea7d628bc80db\",\"dweb:/ipfs/QmabxAXXwy4qiXfzVqfLQjmzSKASTxGxLbdocBvfxp8SVU\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"methods": {}
					}
				},
				"TokenA": {
					"abi": [
						{
							"inputs": [],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"constant": true,
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": false,
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": false,
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [],
							"name": "getOwner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": false,
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"constant": false,
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": false,
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": false,
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"constant": false,
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"constant": false,
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"methods": {
							"allowance(address,address)": {
								"details": "See {NURA20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {NURA20-approve}.   * Requirements:   * - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {NURA20-balanceOf}."
							},
							"decimals()": {
								"details": "Returns the token decimals."
							},
							"decreaseAllowance(address,uint256)": {
								"details": "Atomically decreases the allowance granted to `spender` by the caller.   * This is an alternative to {approve} that can be used as a mitigation for problems described in {NURA20-approve}.   * Emits an {Approval} event indicating the updated allowance.   * Requirements:   * - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
							},
							"getOwner()": {
								"details": "Returns the bep token owner."
							},
							"increaseAllowance(address,uint256)": {
								"details": "Atomically increases the allowance granted to `spender` by the caller.   * This is an alternative to {approve} that can be used as a mitigation for problems described in {NURA20-approve}.   * Emits an {Approval} event indicating the updated allowance.   * Requirements:   * - `spender` cannot be the zero address."
							},
							"mint(uint256)": {
								"details": "Creates `amount` tokens and assigns them to `msg.sender`, increasing the total supply.   * Requirements   * - `msg.sender` must be the token owner"
							},
							"name()": {
								"details": "Returns the token name."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.   * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"symbol()": {
								"details": "Returns the token symbol."
							},
							"totalSupply()": {
								"details": "See {NURA20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {NURA20-transfer}.   * Requirements:   * - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {NURA20-transferFrom}.   * Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {NURA20};   * Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for `sender`'s tokens of at least `amount`."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						}
					},
					"evm": {
						"assembly": "    /* \"TokenA.sol\":10967:18544  contract TokenA is Context,  TokA, Ownable {... */\n  mstore(0x40, 0x80)\n    /* \"TokenA.sol\":11281:11514  constructor() public {... */\n  callvalue\n    /* \"--CODEGEN--\":8:17   */\n  dup1\n    /* \"--CODEGEN--\":5:7   */\n  iszero\n  tag_1\n  jumpi\n    /* \"--CODEGEN--\":30:31   */\n  0x00\n    /* \"--CODEGEN--\":27:28   */\n  dup1\n    /* \"--CODEGEN--\":20:32   */\n  revert\n    /* \"--CODEGEN--\":5:7   */\ntag_1:\n  pop\n    /* \"TokenA.sol\":9526:9543  address msgSender */\n  0x00\n    /* \"TokenA.sol\":9546:9558  _msgSender() */\n  tag_7\n  sub(shl(0xe0, 0x01), 0x01)\n    /* \"TokenA.sol\":9546:9556  _msgSender */\n  tag_8\n    /* \"TokenA.sol\":9546:9558  _msgSender() */\n  and\n  jump\t// in\ntag_7:\n    /* \"TokenA.sol\":9564:9570  _owner */\n  0x00\n    /* \"TokenA.sol\":9564:9582  _owner = msgSender */\n  dup1\n  sload\n  not(sub(shl(0xa0, 0x01), 0x01))\n  and\n  sub(shl(0xa0, 0x01), 0x01)\n  dup4\n  and\n  swap1\n  dup2\n  or\n  dup3\n  sstore\n    /* \"TokenA.sol\":9593:9636  OwnershipTransferred(address(0), msgSender) */\n  mload(0x40)\n    /* \"TokenA.sol\":9564:9582  _owner = msgSender */\n  swap3\n  swap4\n  pop\n  swap2\n    /* \"TokenA.sol\":9593:9636  OwnershipTransferred(address(0), msgSender) */\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  swap1\n    /* \"TokenA.sol\":9564:9570  _owner */\n  dup3\n  swap1\n    /* \"TokenA.sol\":9593:9636  OwnershipTransferred(address(0), msgSender) */\n  log3\n  pop\n    /* \"TokenA.sol\":11308:11324  _name = \"TokenA\" */\n  0x40\n  dup1\n  mload\n  dup1\n  dup3\n  add\n  swap1\n  swap2\n  mstore\n  0x06\n  dup1\n  dup3\n  mstore\n  shl(0xd0, 0x546f6b656e41)\n  0x20\n  swap1\n  swap3\n  add\n  swap2\n  dup3\n  mstore\n  tag_10\n  swap2\n  dup2\n  tag_11\n  jump\t// in\ntag_10:\n  pop\n    /* \"TokenA.sol\":11330:11343  _symbol = \"A\" */\n  0x40\n  dup1\n  mload\n  dup1\n  dup3\n  add\n  swap1\n  swap2\n  mstore\n  0x01\n  dup1\n  dup3\n  mstore\n  shl(0xf8, 0x41)\n  0x20\n  swap1\n  swap3\n  add\n  swap2\n  dup3\n  mstore\n  tag_12\n  swap2\n    /* \"TokenA.sol\":11330:11337  _symbol */\n  0x05\n  swap2\n    /* \"TokenA.sol\":11330:11343  _symbol = \"A\" */\n  tag_11\n  jump\t// in\ntag_12:\n  pop\n    /* \"TokenA.sol\":11349:11358  _decimals */\n  0x04\n    /* \"TokenA.sol\":11349:11363  _decimals = 18 */\n  dup1\n  sload\n  not(0xff)\n  and\n    /* \"TokenA.sol\":11361:11363  18 */\n  0x12\n    /* \"TokenA.sol\":11349:11363  _decimals = 18 */\n  or\n  swap1\n  sstore\n    /* \"TokenA.sol\":11384:11409  1000000000000000000000000 */\n  0xd3c21bcecceda1000000\n    /* \"TokenA.sol\":11369:11381  _totalSupply */\n  0x03\n    /* \"TokenA.sol\":11369:11409  _totalSupply = 1000000000000000000000000 */\n  dup2\n  swap1\n  sstore\n    /* \"TokenA.sol\":11425:11435  msg.sender */\n  caller\n    /* \"TokenA.sol\":11349:11358  _decimals */\n  0x00\n    /* \"TokenA.sol\":11415:11436  _balances[msg.sender] */\n  dup2\n  dup2\n  mstore\n    /* \"TokenA.sol\":11349:11363  _decimals = 18 */\n  0x01\n    /* \"TokenA.sol\":11415:11436  _balances[msg.sender] */\n  0x20\n  swap1\n  dup2\n  mstore\n  0x40\n  dup1\n  dup4\n  keccak256\n    /* \"TokenA.sol\":11415:11451  _balances[msg.sender] = _totalSupply */\n  dup6\n  swap1\n  sstore\n    /* \"TokenA.sol\":11463:11509  Transfer(address(0), msg.sender, _totalSupply) */\n  dup1\n  mload\n  swap5\n  dup6\n  mstore\n  mload\n    /* \"TokenA.sol\":11425:11435  msg.sender */\n  swap3\n  swap4\n    /* \"TokenA.sol\":11349:11358  _decimals */\n  swap2\n  swap3\n    /* \"TokenA.sol\":11463:11509  Transfer(address(0), msg.sender, _totalSupply) */\n  0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n  swap3\n  dup2\n  swap1\n  sub\n  swap1\n  swap2\n  add\n  swap1\n  log3\n    /* \"TokenA.sol\":10967:18544  contract TokenA is Context,  TokA, Ownable {... */\n  jump(tag_13)\n    /* \"TokenA.sol\":3594:3684  function _msgSender() internal view returns (address payable) {... */\ntag_8:\n    /* \"TokenA.sol\":3669:3679  msg.sender */\n  caller\n    /* \"TokenA.sol\":3594:3684  function _msgSender() internal view returns (address payable) {... */\ntag_14:\n  swap1\n  jump\t// out\n    /* \"TokenA.sol\":10967:18544  contract TokenA is Context,  TokA, Ownable {... */\ntag_11:\n  dup3\n  dup1\n  sload\n  0x01\n  dup2\n  0x01\n  and\n  iszero\n  0x0100\n  mul\n  sub\n  and\n  0x02\n  swap1\n  div\n  swap1\n  0x00\n  mstore\n  keccak256(0x00, 0x20)\n  swap1\n  0x1f\n  add\n  0x20\n  swap1\n  div\n  dup2\n  add\n  swap3\n  dup3\n  0x1f\n  lt\n  tag_16\n  jumpi\n  dup1\n  mload\n  not(0xff)\n  and\n  dup4\n  dup1\n  add\n  or\n  dup6\n  sstore\n  jump(tag_18)\ntag_16:\n  dup3\n  dup1\n  add\n  0x01\n  add\n  dup6\n  sstore\n  dup3\n  iszero\n  tag_18\n  jumpi\n  swap2\n  dup3\n  add\ntag_17:\n  dup3\n  dup2\n  gt\n  iszero\n  tag_18\n  jumpi\n  dup3\n  mload\n  dup3\n  sstore\n  swap2\n  0x20\n  add\n  swap2\n  swap1\n  0x01\n  add\n  swap1\n  jump(tag_17)\ntag_18:\n  pop\n  tag_19\n  swap3\n  swap2\n  pop\n  tag_20\n  jump\t// in\ntag_19:\n  pop\n  swap1\n  jump\t// out\ntag_20:\n  tag_14\n  swap2\n  swap1\ntag_22:\n  dup1\n  dup3\n  gt\n  iszero\n  tag_19\n  jumpi\n  0x00\n  dup2\n  sstore\n  0x01\n  add\n  jump(tag_22)\ntag_13:\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"TokenA.sol\":10967:18544  contract TokenA is Context,  TokA, Ownable {... */\n      mstore(0x40, 0x80)\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_1\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_1:\n        /* \"TokenA.sol\":10967:18544  contract TokenA is Context,  TokA, Ownable {... */\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x893d20e8\n      gt\n      tag_19\n      jumpi\n      dup1\n      0xa457c2d7\n      gt\n      tag_20\n      jumpi\n      dup1\n      0xa457c2d7\n      eq\n      tag_15\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_16\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_17\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_18\n      jumpi\n      jump(tag_2)\n    tag_20:\n      dup1\n      0x893d20e8\n      eq\n      tag_11\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_12\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_13\n      jumpi\n      dup1\n      0xa0712d68\n      eq\n      tag_14\n      jumpi\n      jump(tag_2)\n    tag_19:\n      dup1\n      0x313ce567\n      gt\n      tag_21\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x39509351\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_10\n      jumpi\n      jump(tag_2)\n    tag_21:\n      dup1\n      0x06fdde03\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_6\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"TokenA.sol\":11958:12035  function name() external view returns (string memory) {... */\n    tag_3:\n      tag_22\n      tag_23\n      jump\t// in\n    tag_22:\n      0x40\n      dup1\n      mload\n      0x20\n      dup1\n      dup3\n      mstore\n      dup4\n      mload\n      dup2\n      dup4\n      add\n      mstore\n      dup4\n      mload\n      swap2\n      swap3\n      dup4\n      swap3\n      swap1\n      dup4\n      add\n      swap2\n      dup6\n      add\n      swap1\n      dup1\n      dup4\n      dup4\n      0x00\n        /* \"--CODEGEN--\":8:108   */\n    tag_24:\n        /* \"--CODEGEN--\":33:36   */\n      dup4\n        /* \"--CODEGEN--\":30:31   */\n      dup2\n        /* \"--CODEGEN--\":27:37   */\n      lt\n        /* \"--CODEGEN--\":8:108   */\n      iszero\n      tag_26\n      jumpi\n        /* \"--CODEGEN--\":90:101   */\n      dup2\n      dup2\n      add\n        /* \"--CODEGEN--\":84:102   */\n      mload\n        /* \"--CODEGEN--\":71:82   */\n      dup4\n      dup3\n      add\n        /* \"--CODEGEN--\":64:103   */\n      mstore\n        /* \"--CODEGEN--\":52:54   */\n      0x20\n        /* \"--CODEGEN--\":45:55   */\n      add\n        /* \"--CODEGEN--\":8:108   */\n      jump(tag_24)\n    tag_26:\n        /* \"--CODEGEN--\":12:26   */\n      pop\n        /* \"TokenA.sol\":11958:12035  function name() external view returns (string memory) {... */\n      pop\n      pop\n      pop\n      swap1\n      pop\n      swap1\n      dup2\n      add\n      swap1\n      0x1f\n      and\n      dup1\n      iszero\n      tag_27\n      jumpi\n      dup1\n      dup3\n      sub\n      dup1\n      mload\n      0x01\n      dup4\n      0x20\n      sub\n      0x0100\n      exp\n      sub\n      not\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n    tag_27:\n      pop\n      swap3\n      pop\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"TokenA.sol\":12958:13099  function approve(address spender, uint256 amount) external returns (bool) {... */\n    tag_4:\n      tag_28\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x40\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_29\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_29:\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"TokenA.sol\":12958:13099  function approve(address spender, uint256 amount) external returns (bool) {... */\n      dup2\n      calldataload\n      and\n      swap1\n      0x20\n      add\n      calldataload\n      tag_30\n      jump\t// in\n    tag_28:\n      0x40\n      dup1\n      mload\n      swap2\n      iszero\n      iszero\n      dup3\n      mstore\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x20\n      add\n      swap1\n      return\n        /* \"TokenA.sol\":12087:12172  function totalSupply() external view returns (uint256) {... */\n    tag_5:\n      tag_31\n      tag_32\n      jump\t// in\n    tag_31:\n      0x40\n      dup1\n      mload\n      swap2\n      dup3\n      mstore\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x20\n      add\n      swap1\n      return\n        /* \"TokenA.sol\":13532:13821  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {... */\n    tag_6:\n      tag_28\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x60\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_34\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_34:\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"TokenA.sol\":13532:13821  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {... */\n      dup2\n      calldataload\n      dup2\n      and\n      swap2\n      0x20\n      dup2\n      add\n      calldataload\n      swap1\n      swap2\n      and\n      swap1\n      0x40\n      add\n      calldataload\n      tag_35\n      jump\t// in\n        /* \"TokenA.sol\":11700:11777  function decimals() external view returns (uint8) {... */\n    tag_7:\n      tag_36\n      tag_37\n      jump\t// in\n    tag_36:\n      0x40\n      dup1\n      mload\n      0xff\n      swap1\n      swap3\n      and\n      dup3\n      mstore\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x20\n      add\n      swap1\n      return\n        /* \"TokenA.sol\":14190:14387  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {... */\n    tag_8:\n      tag_28\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x40\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_39\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_39:\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"TokenA.sol\":14190:14387  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {... */\n      dup2\n      calldataload\n      and\n      swap1\n      0x20\n      add\n      calldataload\n      tag_40\n      jump\t// in\n        /* \"TokenA.sol\":12222:12326  function balanceOf(address account) external view returns (uint256) {... */\n    tag_9:\n      tag_31\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x20\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_42\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_42:\n      pop\n        /* \"TokenA.sol\":12222:12326  function balanceOf(address account) external view returns (uint256) {... */\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      tag_43\n      jump\t// in\n        /* \"TokenA.sol\":10292:10419  function renounceOwnership() public onlyOwner {... */\n    tag_10:\n      tag_44\n      tag_45\n      jump\t// in\n    tag_44:\n      stop\n        /* \"TokenA.sol\":11569:11646  function getOwner() external view returns (address) {... */\n    tag_11:\n      tag_46\n      tag_47\n      jump\t// in\n    tag_46:\n      0x40\n      dup1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      swap3\n      and\n      dup3\n      mstore\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x20\n      add\n      swap1\n      return\n        /* \"TokenA.sol\":9709:9780  function owner() public view returns (address) {... */\n    tag_12:\n      tag_46\n      tag_49\n      jump\t// in\n        /* \"TokenA.sol\":11829:11910  function symbol() external view returns (string memory) {... */\n    tag_13:\n      tag_22\n      tag_51\n      jump\t// in\n        /* \"TokenA.sol\":15283:15400  function mint(uint256 amount) public onlyOwner returns (bool) {... */\n    tag_14:\n      tag_28\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x20\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_57\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_57:\n      pop\n        /* \"TokenA.sol\":15283:15400  function mint(uint256 amount) public onlyOwner returns (bool) {... */\n      calldataload\n      tag_58\n      jump\t// in\n        /* \"TokenA.sol\":14844:15093  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {... */\n    tag_15:\n      tag_28\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x40\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_60\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_60:\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"TokenA.sol\":14844:15093  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {... */\n      dup2\n      calldataload\n      and\n      swap1\n      0x20\n      add\n      calldataload\n      tag_61\n      jump\t// in\n        /* \"TokenA.sol\":12511:12658  function transfer(address recipient, uint256 amount) external returns (bool) {... */\n    tag_16:\n      tag_28\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x40\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_63\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_63:\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"TokenA.sol\":12511:12658  function transfer(address recipient, uint256 amount) external returns (bool) {... */\n      dup2\n      calldataload\n      and\n      swap1\n      0x20\n      add\n      calldataload\n      tag_64\n      jump\t// in\n        /* \"TokenA.sol\":12708:12836  function allowance(address owner, address spender) external view returns (uint256) {... */\n    tag_17:\n      tag_31\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x40\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_66\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_66:\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"TokenA.sol\":12708:12836  function allowance(address owner, address spender) external view returns (uint256) {... */\n      dup2\n      calldataload\n      dup2\n      and\n      swap2\n      0x20\n      add\n      calldataload\n      and\n      tag_67\n      jump\t// in\n        /* \"TokenA.sol\":10558:10659  function transferOwnership(address newOwner) public onlyOwner {... */\n    tag_18:\n      tag_44\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x20\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_69\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_69:\n      pop\n        /* \"TokenA.sol\":10558:10659  function transferOwnership(address newOwner) public onlyOwner {... */\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      tag_70\n      jump\t// in\n        /* \"TokenA.sol\":11958:12035  function name() external view returns (string memory) {... */\n    tag_23:\n        /* \"TokenA.sol\":12025:12030  _name */\n      0x06\n        /* \"TokenA.sol\":12018:12030  return _name */\n      dup1\n      sload\n      0x40\n      dup1\n      mload\n      0x20\n      0x1f\n      0x02\n      not(0x00)\n      0x0100\n      0x01\n      dup9\n      and\n      iszero\n      mul\n      add\n      swap1\n      swap6\n      and\n      swap5\n      swap1\n      swap5\n      div\n      swap4\n      dup5\n      add\n      dup2\n      swap1\n      div\n      dup2\n      mul\n      dup3\n      add\n      dup2\n      add\n      swap1\n      swap3\n      mstore\n      dup3\n      dup2\n      mstore\n        /* \"TokenA.sol\":11997:12010  string memory */\n      0x60\n      swap4\n        /* \"TokenA.sol\":12018:12030  return _name */\n      swap1\n      swap3\n        /* \"TokenA.sol\":12025:12030  _name */\n      swap1\n      swap2\n        /* \"TokenA.sol\":12018:12030  return _name */\n      dup4\n      add\n        /* \"TokenA.sol\":12025:12030  _name */\n      dup3\n        /* \"TokenA.sol\":12018:12030  return _name */\n      dup3\n      dup1\n      iszero\n      tag_72\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_73\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_72)\n    tag_73:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_74:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_74\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_72:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"TokenA.sol\":11958:12035  function name() external view returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"TokenA.sol\":12958:13099  function approve(address spender, uint256 amount) external returns (bool) {... */\n    tag_30:\n        /* \"TokenA.sol\":13026:13030  bool */\n      0x00\n        /* \"TokenA.sol\":13038:13077  _approve(_msgSender(), spender, amount) */\n      tag_76\n        /* \"TokenA.sol\":13047:13059  _msgSender() */\n      tag_77\n        /* \"TokenA.sol\":13047:13057  _msgSender */\n      tag_78\n        /* \"TokenA.sol\":13047:13059  _msgSender() */\n      jump\t// in\n    tag_77:\n        /* \"TokenA.sol\":13061:13068  spender */\n      dup5\n        /* \"TokenA.sol\":13070:13076  amount */\n      dup5\n        /* \"TokenA.sol\":13038:13046  _approve */\n      tag_79\n        /* \"TokenA.sol\":13038:13077  _approve(_msgSender(), spender, amount) */\n      jump\t// in\n    tag_76:\n      pop\n        /* \"TokenA.sol\":13090:13094  true */\n      0x01\n        /* \"TokenA.sol\":12958:13099  function approve(address spender, uint256 amount) external returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"TokenA.sol\":12087:12172  function totalSupply() external view returns (uint256) {... */\n    tag_32:\n        /* \"TokenA.sol\":12155:12167  _totalSupply */\n      sload(0x03)\n        /* \"TokenA.sol\":12087:12172  function totalSupply() external view returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"TokenA.sol\":13532:13821  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {... */\n    tag_35:\n        /* \"TokenA.sol\":13623:13627  bool */\n      0x00\n        /* \"TokenA.sol\":13635:13671  _transfer(sender, recipient, amount) */\n      tag_82\n        /* \"TokenA.sol\":13645:13651  sender */\n      dup5\n        /* \"TokenA.sol\":13653:13662  recipient */\n      dup5\n        /* \"TokenA.sol\":13664:13670  amount */\n      dup5\n        /* \"TokenA.sol\":13635:13644  _transfer */\n      tag_83\n        /* \"TokenA.sol\":13635:13671  _transfer(sender, recipient, amount) */\n      jump\t// in\n    tag_82:\n        /* \"TokenA.sol\":13677:13799  _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"NURA20: transfer amount exceeds allowance\")) */\n      tag_84\n        /* \"TokenA.sol\":13686:13692  sender */\n      dup5\n        /* \"TokenA.sol\":13694:13706  _msgSender() */\n      tag_85\n        /* \"TokenA.sol\":13694:13704  _msgSender */\n      tag_78\n        /* \"TokenA.sol\":13694:13706  _msgSender() */\n      jump\t// in\n    tag_85:\n        /* \"TokenA.sol\":13708:13798  _allowances[sender][_msgSender()].sub(amount, \"NURA20: transfer amount exceeds allowance\") */\n      tag_86\n        /* \"TokenA.sol\":13746:13752  amount */\n      dup6\n        /* \"TokenA.sol\":13708:13798  _allowances[sender][_msgSender()].sub(amount, \"NURA20: transfer amount exceeds allowance\") */\n      mload(0x40)\n      dup1\n      0x60\n      add\n      0x40\n      mstore\n      dup1\n      0x29\n      dup2\n      mstore\n      0x20\n      add\n      data_3be1d828dc33615552f7bf1df53ab6cbeeabb688c96fc19ce919e80c0f787761\n      0x29\n      swap2\n      codecopy\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"TokenA.sol\":13708:13727  _allowances[sender] */\n      dup11\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"TokenA.sol\":13708:13719  _allowances */\n      0x02\n        /* \"TokenA.sol\":13708:13727  _allowances[sender] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n      swap1\n        /* \"TokenA.sol\":13728:13740  _msgSender() */\n      tag_87\n        /* \"TokenA.sol\":13728:13738  _msgSender */\n      tag_78\n        /* \"TokenA.sol\":13728:13740  _msgSender() */\n      jump\t// in\n    tag_87:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"TokenA.sol\":13708:13741  _allowances[sender][_msgSender()] */\n      and\n      dup2\n      mstore\n      0x20\n      dup2\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      0x40\n      add\n      0x00\n      keccak256\n      sload\n      swap2\n        /* \"TokenA.sol\":13708:13798  _allowances[sender][_msgSender()].sub(amount, \"NURA20: transfer amount exceeds allowance\") */\n      swap1\n      0xffffffff\n        /* \"TokenA.sol\":13708:13745  _allowances[sender][_msgSender()].sub */\n      tag_88\n        /* \"TokenA.sol\":13708:13798  _allowances[sender][_msgSender()].sub(amount, \"NURA20: transfer amount exceeds allowance\") */\n      and\n      jump\t// in\n    tag_86:\n        /* \"TokenA.sol\":13677:13685  _approve */\n      tag_79\n        /* \"TokenA.sol\":13677:13799  _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"NURA20: transfer amount exceeds allowance\")) */\n      jump\t// in\n    tag_84:\n      pop\n        /* \"TokenA.sol\":13812:13816  true */\n      0x01\n        /* \"TokenA.sol\":13532:13821  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"TokenA.sol\":11700:11777  function decimals() external view returns (uint8) {... */\n    tag_37:\n        /* \"TokenA.sol\":11763:11772  _decimals */\n      and(0xff, sload(0x04))\n        /* \"TokenA.sol\":11700:11777  function decimals() external view returns (uint8) {... */\n      swap1\n      jump\t// out\n        /* \"TokenA.sol\":14190:14387  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {... */\n    tag_40:\n        /* \"TokenA.sol\":14270:14274  bool */\n      0x00\n        /* \"TokenA.sol\":14282:14365  _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue)) */\n      tag_76\n        /* \"TokenA.sol\":14291:14303  _msgSender() */\n      tag_92\n        /* \"TokenA.sol\":14291:14301  _msgSender */\n      tag_78\n        /* \"TokenA.sol\":14291:14303  _msgSender() */\n      jump\t// in\n    tag_92:\n        /* \"TokenA.sol\":14305:14312  spender */\n      dup5\n        /* \"TokenA.sol\":14314:14364  _allowances[_msgSender()][spender].add(addedValue) */\n      tag_86\n        /* \"TokenA.sol\":14353:14363  addedValue */\n      dup6\n        /* \"TokenA.sol\":14314:14325  _allowances */\n      0x02\n        /* \"TokenA.sol\":14314:14339  _allowances[_msgSender()] */\n      0x00\n        /* \"TokenA.sol\":14326:14338  _msgSender() */\n      tag_94\n        /* \"TokenA.sol\":14326:14336  _msgSender */\n      tag_78\n        /* \"TokenA.sol\":14326:14338  _msgSender() */\n      jump\t// in\n    tag_94:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"TokenA.sol\":14314:14339  _allowances[_msgSender()] */\n      swap1\n      dup2\n      and\n      dup3\n      mstore\n      0x20\n      dup1\n      dup4\n      add\n      swap4\n      swap1\n      swap4\n      mstore\n      0x40\n      swap2\n      dup3\n      add\n      0x00\n      swap1\n      dup2\n      keccak256\n        /* \"TokenA.sol\":14314:14348  _allowances[_msgSender()][spender] */\n      swap2\n      dup13\n      and\n      dup2\n      mstore\n      swap3\n      mstore\n      swap1\n      keccak256\n      sload\n      swap1\n        /* \"TokenA.sol\":14314:14364  _allowances[_msgSender()][spender].add(addedValue) */\n      0xffffffff\n        /* \"TokenA.sol\":14314:14352  _allowances[_msgSender()][spender].add */\n      tag_95\n        /* \"TokenA.sol\":14314:14364  _allowances[_msgSender()][spender].add(addedValue) */\n      and\n      jump\t// in\n        /* \"TokenA.sol\":12222:12326  function balanceOf(address account) external view returns (uint256) {... */\n    tag_43:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"TokenA.sol\":12303:12321  _balances[account] */\n      and\n        /* \"TokenA.sol\":12281:12288  uint256 */\n      0x00\n        /* \"TokenA.sol\":12303:12321  _balances[account] */\n      swap1\n      dup2\n      mstore\n        /* \"TokenA.sol\":12303:12312  _balances */\n      0x01\n        /* \"TokenA.sol\":12303:12321  _balances[account] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      swap1\n        /* \"TokenA.sol\":12222:12326  function balanceOf(address account) external view returns (uint256) {... */\n      jump\t// out\n        /* \"TokenA.sol\":10292:10419  function renounceOwnership() public onlyOwner {... */\n    tag_45:\n        /* \"TokenA.sol\":9905:9917  _msgSender() */\n      tag_98\n        /* \"TokenA.sol\":9905:9915  _msgSender */\n      tag_78\n        /* \"TokenA.sol\":9905:9917  _msgSender() */\n      jump\t// in\n    tag_98:\n        /* \"TokenA.sol\":9895:9901  _owner */\n      sload(0x00)\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      dup2\n      and\n        /* \"TokenA.sol\":9895:9917  _owner == _msgSender() */\n      swap2\n      and\n      eq\n        /* \"TokenA.sol\":9887:9954  require(_owner == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_99\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      0x24\n      dup3\n      add\n      mstore\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_99:\n        /* \"TokenA.sol\":10386:10387  0 */\n      0x00\n        /* \"TokenA.sol\":10370:10376  _owner */\n      dup1\n      sload\n        /* \"TokenA.sol\":10349:10389  OwnershipTransferred(_owner, address(0)) */\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"TokenA.sol\":10370:10376  _owner */\n      swap1\n      swap2\n      and\n      swap1\n        /* \"TokenA.sol\":10349:10389  OwnershipTransferred(_owner, address(0)) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      swap1\n        /* \"TokenA.sol\":10386:10387  0 */\n      dup4\n      swap1\n        /* \"TokenA.sol\":10349:10389  OwnershipTransferred(_owner, address(0)) */\n      log3\n        /* \"TokenA.sol\":10412:10413  0 */\n      0x00\n        /* \"TokenA.sol\":10395:10414  _owner = address(0) */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      swap1\n      sstore\n        /* \"TokenA.sol\":10292:10419  function renounceOwnership() public onlyOwner {... */\n      jump\t// out\n        /* \"TokenA.sol\":11569:11646  function getOwner() external view returns (address) {... */\n    tag_47:\n        /* \"TokenA.sol\":11612:11619  address */\n      0x00\n        /* \"TokenA.sol\":11634:11641  owner() */\n      tag_102\n        /* \"TokenA.sol\":11634:11639  owner */\n      tag_49\n        /* \"TokenA.sol\":11634:11641  owner() */\n      jump\t// in\n    tag_102:\n        /* \"TokenA.sol\":11627:11641  return owner() */\n      swap1\n      pop\n        /* \"TokenA.sol\":11569:11646  function getOwner() external view returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"TokenA.sol\":9709:9780  function owner() public view returns (address) {... */\n    tag_49:\n        /* \"TokenA.sol\":9747:9754  address */\n      0x00\n        /* \"TokenA.sol\":9769:9775  _owner */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"TokenA.sol\":9709:9780  function owner() public view returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"TokenA.sol\":11829:11910  function symbol() external view returns (string memory) {... */\n    tag_51:\n        /* \"TokenA.sol\":11898:11905  _symbol */\n      0x05\n        /* \"TokenA.sol\":11891:11905  return _symbol */\n      dup1\n      sload\n      0x40\n      dup1\n      mload\n      0x20\n      0x1f\n      0x02\n      not(0x00)\n      0x0100\n      0x01\n      dup9\n      and\n      iszero\n      mul\n      add\n      swap1\n      swap6\n      and\n      swap5\n      swap1\n      swap5\n      div\n      swap4\n      dup5\n      add\n      dup2\n      swap1\n      div\n      dup2\n      mul\n      dup3\n      add\n      dup2\n      add\n      swap1\n      swap3\n      mstore\n      dup3\n      dup2\n      mstore\n        /* \"TokenA.sol\":11870:11883  string memory */\n      0x60\n      swap4\n        /* \"TokenA.sol\":11891:11905  return _symbol */\n      swap1\n      swap3\n        /* \"TokenA.sol\":11898:11905  _symbol */\n      swap1\n      swap2\n        /* \"TokenA.sol\":11891:11905  return _symbol */\n      dup4\n      add\n        /* \"TokenA.sol\":11898:11905  _symbol */\n      dup3\n        /* \"TokenA.sol\":11891:11905  return _symbol */\n      dup3\n      dup1\n      iszero\n      tag_72\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_73\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_72)\n        /* \"TokenA.sol\":15283:15400  function mint(uint256 amount) public onlyOwner returns (bool) {... */\n    tag_58:\n        /* \"TokenA.sol\":15339:15343  bool */\n      0x00\n        /* \"TokenA.sol\":9905:9917  _msgSender() */\n      tag_109\n        /* \"TokenA.sol\":9905:9915  _msgSender */\n      tag_78\n        /* \"TokenA.sol\":9905:9917  _msgSender() */\n      jump\t// in\n    tag_109:\n        /* \"TokenA.sol\":9895:9901  _owner */\n      sload(0x00)\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      dup2\n      and\n        /* \"TokenA.sol\":9895:9917  _owner == _msgSender() */\n      swap2\n      and\n      eq\n        /* \"TokenA.sol\":9887:9954  require(_owner == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_110\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      0x24\n      dup3\n      add\n      mstore\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_110:\n        /* \"TokenA.sol\":15351:15378  _mint(_msgSender(), amount) */\n      tag_112\n        /* \"TokenA.sol\":15357:15369  _msgSender() */\n      tag_113\n        /* \"TokenA.sol\":15357:15367  _msgSender */\n      tag_78\n        /* \"TokenA.sol\":15357:15369  _msgSender() */\n      jump\t// in\n    tag_113:\n        /* \"TokenA.sol\":15371:15377  amount */\n      dup4\n        /* \"TokenA.sol\":15351:15356  _mint */\n      tag_114\n        /* \"TokenA.sol\":15351:15378  _mint(_msgSender(), amount) */\n      jump\t// in\n    tag_112:\n      pop\n        /* \"TokenA.sol\":15391:15395  true */\n      0x01\n        /* \"TokenA.sol\":15283:15400  function mint(uint256 amount) public onlyOwner returns (bool) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"TokenA.sol\":14844:15093  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {... */\n    tag_61:\n        /* \"TokenA.sol\":14929:14933  bool */\n      0x00\n        /* \"TokenA.sol\":14941:15071  _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"NURA20: decreased allowance below zero\")) */\n      tag_76\n        /* \"TokenA.sol\":14950:14962  _msgSender() */\n      tag_117\n        /* \"TokenA.sol\":14950:14960  _msgSender */\n      tag_78\n        /* \"TokenA.sol\":14950:14962  _msgSender() */\n      jump\t// in\n    tag_117:\n        /* \"TokenA.sol\":14964:14971  spender */\n      dup5\n        /* \"TokenA.sol\":14973:15070  _allowances[_msgSender()][spender].sub(subtractedValue, \"NURA20: decreased allowance below zero\") */\n      tag_86\n        /* \"TokenA.sol\":15012:15027  subtractedValue */\n      dup6\n        /* \"TokenA.sol\":14973:15070  _allowances[_msgSender()][spender].sub(subtractedValue, \"NURA20: decreased allowance below zero\") */\n      mload(0x40)\n      dup1\n      0x60\n      add\n      0x40\n      mstore\n      dup1\n      0x26\n      dup2\n      mstore\n      0x20\n      add\n      data_4d7793548344bf0cd24f5e39d08bf5344a03658a15cce90706473f31cff78563\n      0x26\n      swap2\n      codecopy\n        /* \"TokenA.sol\":14973:14984  _allowances */\n      0x02\n        /* \"TokenA.sol\":14973:14998  _allowances[_msgSender()] */\n      0x00\n        /* \"TokenA.sol\":14985:14997  _msgSender() */\n      tag_119\n        /* \"TokenA.sol\":14985:14995  _msgSender */\n      tag_78\n        /* \"TokenA.sol\":14985:14997  _msgSender() */\n      jump\t// in\n    tag_119:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"TokenA.sol\":14973:14998  _allowances[_msgSender()] */\n      swap1\n      dup2\n      and\n      dup3\n      mstore\n      0x20\n      dup1\n      dup4\n      add\n      swap4\n      swap1\n      swap4\n      mstore\n      0x40\n      swap2\n      dup3\n      add\n      0x00\n      swap1\n      dup2\n      keccak256\n        /* \"TokenA.sol\":14973:15007  _allowances[_msgSender()][spender] */\n      swap2\n      dup14\n      and\n      dup2\n      mstore\n      swap3\n      mstore\n      swap1\n      keccak256\n      sload\n      swap2\n        /* \"TokenA.sol\":14973:15070  _allowances[_msgSender()][spender].sub(subtractedValue, \"NURA20: decreased allowance below zero\") */\n      swap1\n      0xffffffff\n        /* \"TokenA.sol\":14973:15011  _allowances[_msgSender()][spender].sub */\n      tag_88\n        /* \"TokenA.sol\":14973:15070  _allowances[_msgSender()][spender].sub(subtractedValue, \"NURA20: decreased allowance below zero\") */\n      and\n      jump\t// in\n        /* \"TokenA.sol\":12511:12658  function transfer(address recipient, uint256 amount) external returns (bool) {... */\n    tag_64:\n        /* \"TokenA.sol\":12582:12586  bool */\n      0x00\n        /* \"TokenA.sol\":12594:12636  _transfer(_msgSender(), recipient, amount) */\n      tag_76\n        /* \"TokenA.sol\":12604:12616  _msgSender() */\n      tag_122\n        /* \"TokenA.sol\":12604:12614  _msgSender */\n      tag_78\n        /* \"TokenA.sol\":12604:12616  _msgSender() */\n      jump\t// in\n    tag_122:\n        /* \"TokenA.sol\":12618:12627  recipient */\n      dup5\n        /* \"TokenA.sol\":12629:12635  amount */\n      dup5\n        /* \"TokenA.sol\":12594:12603  _transfer */\n      tag_83\n        /* \"TokenA.sol\":12594:12636  _transfer(_msgSender(), recipient, amount) */\n      jump\t// in\n        /* \"TokenA.sol\":12708:12836  function allowance(address owner, address spender) external view returns (uint256) {... */\n    tag_67:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"TokenA.sol\":12804:12822  _allowances[owner] */\n      swap2\n      dup3\n      and\n        /* \"TokenA.sol\":12782:12789  uint256 */\n      0x00\n        /* \"TokenA.sol\":12804:12822  _allowances[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"TokenA.sol\":12804:12815  _allowances */\n      0x02\n        /* \"TokenA.sol\":12804:12822  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"TokenA.sol\":12804:12831  _allowances[owner][spender] */\n      swap4\n      swap1\n      swap5\n      and\n      dup3\n      mstore\n      swap2\n      swap1\n      swap2\n      mstore\n      keccak256\n      sload\n      swap1\n        /* \"TokenA.sol\":12708:12836  function allowance(address owner, address spender) external view returns (uint256) {... */\n      jump\t// out\n        /* \"TokenA.sol\":10558:10659  function transferOwnership(address newOwner) public onlyOwner {... */\n    tag_70:\n        /* \"TokenA.sol\":9905:9917  _msgSender() */\n      tag_125\n        /* \"TokenA.sol\":9905:9915  _msgSender */\n      tag_78\n        /* \"TokenA.sol\":9905:9917  _msgSender() */\n      jump\t// in\n    tag_125:\n        /* \"TokenA.sol\":9895:9901  _owner */\n      sload(0x00)\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      dup2\n      and\n        /* \"TokenA.sol\":9895:9917  _owner == _msgSender() */\n      swap2\n      and\n      eq\n        /* \"TokenA.sol\":9887:9954  require(_owner == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_126\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      0x24\n      dup3\n      add\n      mstore\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_126:\n        /* \"TokenA.sol\":10626:10654  _transferOwnership(newOwner) */\n      tag_128\n        /* \"TokenA.sol\":10645:10653  newOwner */\n      dup2\n        /* \"TokenA.sol\":10626:10644  _transferOwnership */\n      tag_129\n        /* \"TokenA.sol\":10626:10654  _transferOwnership(newOwner) */\n      jump\t// in\n    tag_128:\n        /* \"TokenA.sol\":10558:10659  function transferOwnership(address newOwner) public onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"TokenA.sol\":3594:3684  function _msgSender() internal view returns (address payable) {... */\n    tag_78:\n        /* \"TokenA.sol\":3669:3679  msg.sender */\n      caller\n        /* \"TokenA.sol\":3594:3684  function _msgSender() internal view returns (address payable) {... */\n      swap1\n      jump\t// out\n        /* \"TokenA.sol\":17842:18158  function _approve(address owner, address spender, uint256 amount) internal {... */\n    tag_79:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"TokenA.sol\":17931:17950  owner != address(0) */\n      dup4\n      and\n        /* \"TokenA.sol\":17923:17992  require(owner != address(0), \"NURA20: approve from the zero address\") */\n      tag_132\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x25\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_b90e34ecb26036a9d936fbec916aea585f758de45994fffa930f636d387064e1\n      0x25\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_132:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"TokenA.sol\":18006:18027  spender != address(0) */\n      dup3\n      and\n        /* \"TokenA.sol\":17998:18067  require(spender != address(0), \"NURA20: approve to the zero address\") */\n      tag_133\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x23\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_65a116172babf268b5516e0c75685601630a3fbcaf7ea0973efb15727690727d\n      0x23\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_133:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"TokenA.sol\":18074:18092  _allowances[owner] */\n      dup1\n      dup5\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"TokenA.sol\":18074:18085  _allowances */\n      0x02\n        /* \"TokenA.sol\":18074:18092  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"TokenA.sol\":18074:18101  _allowances[owner][spender] */\n      swap5\n      dup8\n      and\n      dup1\n      dup5\n      mstore\n      swap5\n      dup3\n      mstore\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"TokenA.sol\":18074:18110  _allowances[owner][spender] = amount */\n      dup6\n      swap1\n      sstore\n        /* \"TokenA.sol\":18121:18153  Approval(owner, spender, amount) */\n      dup2\n      mload\n      dup6\n      dup2\n      mstore\n      swap2\n      mload\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n      swap3\n      dup2\n      swap1\n      sub\n      swap1\n      swap2\n      add\n      swap1\n      log3\n        /* \"TokenA.sol\":17842:18158  function _approve(address owner, address spender, uint256 amount) internal {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"TokenA.sol\":15844:16289  function _transfer(address sender, address recipient, uint256 amount) internal {... */\n    tag_83:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"TokenA.sol\":15937:15957  sender != address(0) */\n      dup4\n      and\n        /* \"TokenA.sol\":15929:16000  require(sender != address(0), \"NURA20: transfer from the zero address\") */\n      tag_135\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x26\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_0b293e5a48d84f689ced6fd174ab1385d0d8115b6322bc7a775c0b613705ddfc\n      0x26\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_135:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"TokenA.sol\":16014:16037  recipient != address(0) */\n      dup3\n      and\n        /* \"TokenA.sol\":16006:16078  require(recipient != address(0), \"NURA20: transfer to the zero address\") */\n      tag_136\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x24\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_e2a3458b140d9c3000e70c7bdb249f42dff71aa4449e6eeeb38a2de8cfbd8025\n      0x24\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_136:\n        /* \"TokenA.sol\":16105:16177  _balances[sender].sub(amount, \"NURA20: transfer amount exceeds balance\") */\n      tag_137\n        /* \"TokenA.sol\":16127:16133  amount */\n      dup2\n        /* \"TokenA.sol\":16105:16177  _balances[sender].sub(amount, \"NURA20: transfer amount exceeds balance\") */\n      mload(0x40)\n      dup1\n      0x60\n      add\n      0x40\n      mstore\n      dup1\n      0x27\n      dup2\n      mstore\n      0x20\n      add\n      data_b5dfc106c4f8e591ec6065f10313de96224599a8bf0b9b8c6de8832409a4d04a\n      0x27\n      swap2\n      codecopy\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"TokenA.sol\":16105:16122  _balances[sender] */\n      dup7\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"TokenA.sol\":16105:16114  _balances */\n      0x01\n        /* \"TokenA.sol\":16105:16122  _balances[sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      swap2\n        /* \"TokenA.sol\":16105:16177  _balances[sender].sub(amount, \"NURA20: transfer amount exceeds balance\") */\n      swap1\n      0xffffffff\n        /* \"TokenA.sol\":16105:16126  _balances[sender].sub */\n      tag_88\n        /* \"TokenA.sol\":16105:16177  _balances[sender].sub(amount, \"NURA20: transfer amount exceeds balance\") */\n      and\n      jump\t// in\n    tag_137:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"TokenA.sol\":16085:16102  _balances[sender] */\n      dup1\n      dup6\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"TokenA.sol\":16085:16094  _balances */\n      0x01\n        /* \"TokenA.sol\":16085:16102  _balances[sender] */\n      0x20\n      mstore\n      0x40\n      dup1\n      dup3\n      keccak256\n        /* \"TokenA.sol\":16085:16177  _balances[sender] = _balances[sender].sub(amount, \"NURA20: transfer amount exceeds balance\") */\n      swap4\n      swap1\n      swap4\n      sstore\n        /* \"TokenA.sol\":16206:16226  _balances[recipient] */\n      swap1\n      dup5\n      and\n      dup2\n      mstore\n      keccak256\n      sload\n        /* \"TokenA.sol\":16206:16238  _balances[recipient].add(amount) */\n      tag_138\n      swap1\n        /* \"TokenA.sol\":16231:16237  amount */\n      dup3\n        /* \"TokenA.sol\":16206:16238  _balances[recipient].add(amount) */\n      0xffffffff\n        /* \"TokenA.sol\":16206:16230  _balances[recipient].add */\n      tag_95\n        /* \"TokenA.sol\":16206:16238  _balances[recipient].add(amount) */\n      and\n      jump\t// in\n    tag_138:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"TokenA.sol\":16183:16203  _balances[recipient] */\n      dup1\n      dup5\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"TokenA.sol\":16183:16192  _balances */\n      0x01\n        /* \"TokenA.sol\":16183:16203  _balances[recipient] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"TokenA.sol\":16183:16238  _balances[recipient] = _balances[recipient].add(amount) */\n      swap5\n      swap1\n      swap5\n      sstore\n        /* \"TokenA.sol\":16249:16284  Transfer(sender, recipient, amount) */\n      dup1\n      mload\n      dup6\n      dup2\n      mstore\n      swap1\n      mload\n        /* \"TokenA.sol\":16183:16203  _balances[recipient] */\n      swap2\n      swap4\n        /* \"TokenA.sol\":16249:16284  Transfer(sender, recipient, amount) */\n      swap3\n      dup8\n      and\n      swap3\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n      swap3\n      swap2\n      dup3\n      swap1\n      sub\n      add\n      swap1\n      log3\n        /* \"TokenA.sol\":15844:16289  function _transfer(address sender, address recipient, uint256 amount) internal {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"TokenA.sol\":5491:5664  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {... */\n    tag_88:\n        /* \"TokenA.sol\":5577:5584  uint256 */\n      0x00\n        /* \"TokenA.sol\":5608:5620  errorMessage */\n      dup2\n        /* \"TokenA.sol\":5600:5606  b <= a */\n      dup5\n      dup5\n      gt\n      iszero\n        /* \"TokenA.sol\":5592:5621  require(b <= a, errorMessage) */\n      tag_140\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      dup4\n      dup2\n      dup2\n      mload\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      dup1\n      dup4\n      dup4\n        /* \"--CODEGEN--\":23:24   */\n      0x00\n        /* \"--CODEGEN--\":8:108   */\n    tag_141:\n        /* \"--CODEGEN--\":33:36   */\n      dup4\n        /* \"--CODEGEN--\":30:31   */\n      dup2\n        /* \"--CODEGEN--\":27:37   */\n      lt\n        /* \"--CODEGEN--\":8:108   */\n      iszero\n      tag_143\n      jumpi\n        /* \"--CODEGEN--\":90:101   */\n      dup2\n      dup2\n      add\n        /* \"--CODEGEN--\":84:102   */\n      mload\n        /* \"--CODEGEN--\":71:82   */\n      dup4\n      dup3\n      add\n        /* \"--CODEGEN--\":64:103   */\n      mstore\n        /* \"--CODEGEN--\":52:54   */\n      0x20\n        /* \"--CODEGEN--\":45:55   */\n      add\n        /* \"--CODEGEN--\":8:108   */\n      jump(tag_141)\n    tag_143:\n        /* \"--CODEGEN--\":12:26   */\n      pop\n        /* \"TokenA.sol\":5592:5621  require(b <= a, errorMessage) */\n      pop\n      pop\n      pop\n      swap1\n      pop\n      swap1\n      dup2\n      add\n      swap1\n      0x1f\n      and\n      dup1\n      iszero\n      tag_144\n      jumpi\n      dup1\n      dup3\n      sub\n      dup1\n      mload\n      0x01\n      dup4\n      0x20\n      sub\n      0x0100\n      exp\n      sub\n      not\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n    tag_144:\n      pop\n      swap3\n      pop\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_140:\n      pop\n      pop\n      pop\n        /* \"TokenA.sol\":5639:5644  a - b */\n      swap1\n      sub\n      swap1\n        /* \"TokenA.sol\":5491:5664  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {... */\n      jump\t// out\n        /* \"TokenA.sol\":4693:4855  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_95:\n        /* \"TokenA.sol\":4751:4758  uint256 */\n      0x00\n        /* \"TokenA.sol\":4778:4783  a + b */\n      dup3\n      dup3\n      add\n        /* \"TokenA.sol\":4797:4803  c >= a */\n      dup4\n      dup2\n      lt\n      iszero\n        /* \"TokenA.sol\":4789:4835  require(c >= a, \"SafeMath: addition overflow\") */\n      tag_146\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x1b\n      0x24\n      dup3\n      add\n      mstore\n      0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_146:\n        /* \"TokenA.sol\":4849:4850  c */\n      swap4\n        /* \"TokenA.sol\":4693:4855  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"TokenA.sol\":16539:16824  function _mint(address account, uint256 amount) internal {... */\n    tag_114:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"TokenA.sol\":16610:16631  account != address(0) */\n      dup3\n      and\n        /* \"TokenA.sol\":16602:16668  require(account != address(0), \"NURA20: mint to the zero address\") */\n      tag_148\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      0x24\n      dup3\n      add\n      mstore\n      0x4e55524132303a206d696e7420746f20746865207a65726f2061646472657373\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_148:\n        /* \"TokenA.sol\":16690:16702  _totalSupply */\n      sload(0x03)\n        /* \"TokenA.sol\":16690:16714  _totalSupply.add(amount) */\n      tag_149\n      swap1\n        /* \"TokenA.sol\":16707:16713  amount */\n      dup3\n        /* \"TokenA.sol\":16690:16714  _totalSupply.add(amount) */\n      0xffffffff\n        /* \"TokenA.sol\":16690:16706  _totalSupply.add */\n      tag_95\n        /* \"TokenA.sol\":16690:16714  _totalSupply.add(amount) */\n      and\n      jump\t// in\n    tag_149:\n        /* \"TokenA.sol\":16675:16687  _totalSupply */\n      0x03\n        /* \"TokenA.sol\":16675:16714  _totalSupply = _totalSupply.add(amount) */\n      sstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"TokenA.sol\":16741:16759  _balances[account] */\n      dup3\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"TokenA.sol\":16741:16750  _balances */\n      0x01\n        /* \"TokenA.sol\":16741:16759  _balances[account] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"TokenA.sol\":16741:16771  _balances[account].add(amount) */\n      tag_150\n      swap1\n        /* \"TokenA.sol\":16764:16770  amount */\n      dup3\n        /* \"TokenA.sol\":16741:16771  _balances[account].add(amount) */\n      0xffffffff\n        /* \"TokenA.sol\":16741:16763  _balances[account].add */\n      tag_95\n        /* \"TokenA.sol\":16741:16771  _balances[account].add(amount) */\n      and\n      jump\t// in\n    tag_150:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"TokenA.sol\":16720:16738  _balances[account] */\n      dup4\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"TokenA.sol\":16720:16729  _balances */\n      0x01\n        /* \"TokenA.sol\":16720:16738  _balances[account] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"TokenA.sol\":16720:16771  _balances[account] = _balances[account].add(amount) */\n      swap5\n      swap1\n      swap5\n      sstore\n        /* \"TokenA.sol\":16782:16819  Transfer(address(0), account, amount) */\n      dup4\n      mload\n      dup6\n      dup2\n      mstore\n      swap4\n      mload\n        /* \"TokenA.sol\":16720:16738  _balances[account] */\n      swap3\n      swap4\n      swap2\n      swap3\n        /* \"TokenA.sol\":16782:16819  Transfer(address(0), account, amount) */\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n      swap3\n      dup2\n      swap1\n      sub\n      swap1\n      swap2\n      add\n      swap1\n      log3\n        /* \"TokenA.sol\":16539:16824  function _mint(address account, uint256 amount) internal {... */\n      pop\n      pop\n      jump\t// out\n        /* \"TokenA.sol\":10752:10963  function _transferOwnership(address newOwner) internal {... */\n    tag_129:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"TokenA.sol\":10821:10843  newOwner != address(0) */\n      dup2\n      and\n        /* \"TokenA.sol\":10813:10886  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_152\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x26\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe\n      0x26\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_152:\n        /* \"TokenA.sol\":10918:10924  _owner */\n      0x00\n      dup1\n      sload\n        /* \"TokenA.sol\":10897:10935  OwnershipTransferred(_owner, newOwner) */\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n      dup1\n      dup6\n      and\n      swap4\n        /* \"TokenA.sol\":10918:10924  _owner */\n      swap3\n      and\n      swap2\n        /* \"TokenA.sol\":10897:10935  OwnershipTransferred(_owner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      swap2\n      log3\n        /* \"TokenA.sol\":10941:10947  _owner */\n      0x00\n        /* \"TokenA.sol\":10941:10958  _owner = newOwner */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      swap3\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n        /* \"TokenA.sol\":10752:10963  function _transferOwnership(address newOwner) internal {... */\n      jump\t// out\n    stop\n    data_0b293e5a48d84f689ced6fd174ab1385d0d8115b6322bc7a775c0b613705ddfc 4e55524132303a207472616e736665722066726f6d20746865207a65726f2061646472657373\n    data_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe 4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373\n    data_3be1d828dc33615552f7bf1df53ab6cbeeabb688c96fc19ce919e80c0f787761 4e55524132303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365\n    data_4d7793548344bf0cd24f5e39d08bf5344a03658a15cce90706473f31cff78563 4e55524132303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f\n    data_65a116172babf268b5516e0c75685601630a3fbcaf7ea0973efb15727690727d 4e55524132303a20617070726f766520746f20746865207a65726f2061646472657373\n    data_b5dfc106c4f8e591ec6065f10313de96224599a8bf0b9b8c6de8832409a4d04a 4e55524132303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365\n    data_b90e34ecb26036a9d936fbec916aea585f758de45994fffa930f636d387064e1 4e55524132303a20617070726f76652066726f6d20746865207a65726f2061646472657373\n    data_e2a3458b140d9c3000e70c7bdb249f42dff71aa4449e6eeeb38a2de8cfbd8025 4e55524132303a207472616e7366657220746f20746865207a65726f2061646472657373\n\n    auxdata: 0xa265627a7a72315820c5acdf335d1ab6f41a19308b9cb6aea458b3177cf6237e823bfad1eadb8bf53764736f6c63430005100032\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b5060006100246001600160e01b0361012e16565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35060408051808201909152600680825265546f6b656e4160d01b60209092019182526100999181610133565b50604080518082019091526001808252604160f81b60209092019182526100c291600591610133565b506004805460ff1916601217905569d3c21bcecceda10000006003819055336000818152600160209081526040808320859055805194855251929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a36101cb565b335b90565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061017457805160ff19168380011785556101a1565b828001600101855582156101a1579182015b828111156101a1578251825591602001919060010190610186565b506101ad9291506101b1565b5090565b61013091905b808211156101ad57600081556001016101b7565b610e5d806101da6000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063893d20e811610097578063a457c2d711610066578063a457c2d7146102dd578063a9059cbb14610309578063dd62ed3e14610335578063f2fde38b1461036357610100565b8063893d20e81461028c5780638da5cb5b146102b057806395d89b41146102b8578063a0712d68146102c057610100565b8063313ce567116100d3578063313ce56714610212578063395093511461023057806370a082311461025c578063715018a61461028257610100565b806306fdde0314610105578063095ea7b31461018257806318160ddd146101c257806323b872dd146101dc575b600080fd5b61010d610389565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561014757818101518382015260200161012f565b50505050905090810190601f1680156101745780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101ae6004803603604081101561019857600080fd5b506001600160a01b03813516906020013561041f565b604080519115158252519081900360200190f35b6101ca61043c565b60408051918252519081900360200190f35b6101ae600480360360608110156101f257600080fd5b506001600160a01b03813581169160208101359091169060400135610442565b61021a6104cf565b6040805160ff9092168252519081900360200190f35b6101ae6004803603604081101561024657600080fd5b506001600160a01b0381351690602001356104d8565b6101ca6004803603602081101561027257600080fd5b50356001600160a01b031661052c565b61028a610547565b005b6102946105fb565b604080516001600160a01b039092168252519081900360200190f35b61029461060a565b61010d610619565b6101ae600480360360208110156102d657600080fd5b503561067a565b6101ae600480360360408110156102f357600080fd5b506001600160a01b0381351690602001356106ff565b6101ae6004803603604081101561031f57600080fd5b506001600160a01b03813516906020013561076d565b6101ca6004803603604081101561034b57600080fd5b506001600160a01b0381358116916020013516610781565b61028a6004803603602081101561037957600080fd5b50356001600160a01b03166107ac565b60068054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104155780601f106103ea57610100808354040283529160200191610415565b820191906000526020600020905b8154815290600101906020018083116103f857829003601f168201915b5050505050905090565b600061043361042c610822565b8484610826565b50600192915050565b60035490565b600061044f848484610912565b6104c58461045b610822565b6104c085604051806060016040528060298152602001610d47602991396001600160a01b038a16600090815260026020526040812090610499610822565b6001600160a01b03168152602081019190915260400160002054919063ffffffff610a7016565b610826565b5060019392505050565b60045460ff1690565b60006104336104e5610822565b846104c085600260006104f6610822565b6001600160a01b03908116825260208083019390935260409182016000908120918c16815292529020549063ffffffff610b0716565b6001600160a01b031660009081526001602052604090205490565b61054f610822565b6000546001600160a01b039081169116146105b1576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b600061060561060a565b905090565b6000546001600160a01b031690565b60058054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104155780601f106103ea57610100808354040283529160200191610415565b6000610684610822565b6000546001600160a01b039081169116146106e6576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6106f76106f1610822565b83610b68565b506001919050565b600061043361070c610822565b846104c085604051806060016040528060268152602001610d706026913960026000610736610822565b6001600160a01b03908116825260208083019390935260409182016000908120918d1681529252902054919063ffffffff610a7016565b600061043361077a610822565b8484610912565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b6107b4610822565b6000546001600160a01b03908116911614610816576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b61081f81610c5a565b50565b3390565b6001600160a01b03831661086b5760405162461bcd60e51b8152600401808060200182810382526025815260200180610de06025913960400191505060405180910390fd5b6001600160a01b0382166108b05760405162461bcd60e51b8152600401808060200182810382526023815260200180610d966023913960400191505060405180910390fd5b6001600160a01b03808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166109575760405162461bcd60e51b8152600401808060200182810382526026815260200180610cfb6026913960400191505060405180910390fd5b6001600160a01b03821661099c5760405162461bcd60e51b8152600401808060200182810382526024815260200180610e056024913960400191505060405180910390fd5b6109df81604051806060016040528060278152602001610db9602791396001600160a01b038616600090815260016020526040902054919063ffffffff610a7016565b6001600160a01b038085166000908152600160205260408082209390935590841681522054610a14908263ffffffff610b0716565b6001600160a01b0380841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008184841115610aff5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610ac4578181015183820152602001610aac565b50505050905090810190601f168015610af15780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600082820183811015610b61576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6001600160a01b038216610bc3576040805162461bcd60e51b815260206004820181905260248201527f4e55524132303a206d696e7420746f20746865207a65726f2061646472657373604482015290519081900360640190fd5b600354610bd6908263ffffffff610b0716565b6003556001600160a01b038216600090815260016020526040902054610c02908263ffffffff610b0716565b6001600160a01b03831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6001600160a01b038116610c9f5760405162461bcd60e51b8152600401808060200182810382526026815260200180610d216026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b039290921691909117905556fe4e55524132303a207472616e736665722066726f6d20746865207a65726f20616464726573734f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734e55524132303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63654e55524132303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f4e55524132303a20617070726f766520746f20746865207a65726f20616464726573734e55524132303a207472616e7366657220616d6f756e7420657863656564732062616c616e63654e55524132303a20617070726f76652066726f6d20746865207a65726f20616464726573734e55524132303a207472616e7366657220746f20746865207a65726f2061646472657373a265627a7a72315820c5acdf335d1ab6f41a19308b9cb6aea458b3177cf6237e823bfad1eadb8bf53764736f6c63430005100032",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 PUSH2 0x24 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB PUSH2 0x12E AND JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP2 OR DUP3 SSTORE PUSH1 0x40 MLOAD SWAP3 SWAP4 POP SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x6 DUP1 DUP3 MSTORE PUSH6 0x546F6B656E41 PUSH1 0xD0 SHL PUSH1 0x20 SWAP1 SWAP3 ADD SWAP2 DUP3 MSTORE PUSH2 0x99 SWAP2 DUP2 PUSH2 0x133 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x1 DUP1 DUP3 MSTORE PUSH1 0x41 PUSH1 0xF8 SHL PUSH1 0x20 SWAP1 SWAP3 ADD SWAP2 DUP3 MSTORE PUSH2 0xC2 SWAP2 PUSH1 0x5 SWAP2 PUSH2 0x133 JUMP JUMPDEST POP PUSH1 0x4 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x12 OR SWAP1 SSTORE PUSH10 0xD3C21BCECCEDA1000000 PUSH1 0x3 DUP2 SWAP1 SSTORE CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 SWAP1 SSTORE DUP1 MLOAD SWAP5 DUP6 MSTORE MLOAD SWAP3 SWAP4 SWAP2 SWAP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 PUSH2 0x1CB JUMP JUMPDEST CALLER JUMPDEST SWAP1 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 0x1F LT PUSH2 0x174 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x1A1 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x1A1 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x1A1 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x186 JUMP JUMPDEST POP PUSH2 0x1AD SWAP3 SWAP2 POP PUSH2 0x1B1 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x130 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x1AD JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x1B7 JUMP JUMPDEST PUSH2 0xE5D DUP1 PUSH2 0x1DA PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x100 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x893D20E8 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xA457C2D7 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x2DD JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x309 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x335 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x363 JUMPI PUSH2 0x100 JUMP JUMPDEST DUP1 PUSH4 0x893D20E8 EQ PUSH2 0x28C JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x2B0 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x2B8 JUMPI DUP1 PUSH4 0xA0712D68 EQ PUSH2 0x2C0 JUMPI PUSH2 0x100 JUMP JUMPDEST DUP1 PUSH4 0x313CE567 GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x212 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x230 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x25C JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x282 JUMPI PUSH2 0x100 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x105 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x182 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x1C2 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1DC JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x10D PUSH2 0x389 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x147 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x12F JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x174 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1AE PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x198 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x41F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x1CA PUSH2 0x43C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x1AE PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x1F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 SWAP2 AND SWAP1 PUSH1 0x40 ADD CALLDATALOAD PUSH2 0x442 JUMP JUMPDEST PUSH2 0x21A PUSH2 0x4CF JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xFF SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x1AE PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x246 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x4D8 JUMP JUMPDEST PUSH2 0x1CA PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x272 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x52C JUMP JUMPDEST PUSH2 0x28A PUSH2 0x547 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x294 PUSH2 0x5FB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x294 PUSH2 0x60A JUMP JUMPDEST PUSH2 0x10D PUSH2 0x619 JUMP JUMPDEST PUSH2 0x1AE PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x67A JUMP JUMPDEST PUSH2 0x1AE PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x2F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x6FF JUMP JUMPDEST PUSH2 0x1AE PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x31F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x76D JUMP JUMPDEST PUSH2 0x1CA PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x34B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 ADD CALLDATALOAD AND PUSH2 0x781 JUMP JUMPDEST PUSH2 0x28A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x379 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x7AC JUMP JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F PUSH1 0x2 PUSH1 0x0 NOT PUSH2 0x100 PUSH1 0x1 DUP9 AND ISZERO MUL ADD SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE PUSH1 0x60 SWAP4 SWAP1 SWAP3 SWAP1 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x415 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3EA JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x415 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x3F8 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x433 PUSH2 0x42C PUSH2 0x822 JUMP JUMPDEST DUP5 DUP5 PUSH2 0x826 JUMP JUMPDEST POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x44F DUP5 DUP5 DUP5 PUSH2 0x912 JUMP JUMPDEST PUSH2 0x4C5 DUP5 PUSH2 0x45B PUSH2 0x822 JUMP JUMPDEST PUSH2 0x4C0 DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x29 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xD47 PUSH1 0x29 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP1 PUSH2 0x499 PUSH2 0x822 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP2 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xA70 AND JUMP JUMPDEST PUSH2 0x826 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x433 PUSH2 0x4E5 PUSH2 0x822 JUMP JUMPDEST DUP5 PUSH2 0x4C0 DUP6 PUSH1 0x2 PUSH1 0x0 PUSH2 0x4F6 PUSH2 0x822 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 SWAP2 DUP13 AND DUP2 MSTORE SWAP3 MSTORE SWAP1 KECCAK256 SLOAD SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xB07 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x54F PUSH2 0x822 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 0x5B1 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP4 SWAP1 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x605 PUSH2 0x60A JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F PUSH1 0x2 PUSH1 0x0 NOT PUSH2 0x100 PUSH1 0x1 DUP9 AND ISZERO MUL ADD SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE PUSH1 0x60 SWAP4 SWAP1 SWAP3 SWAP1 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x415 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3EA JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x415 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x684 PUSH2 0x822 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 0x6E6 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x6F7 PUSH2 0x6F1 PUSH2 0x822 JUMP JUMPDEST DUP4 PUSH2 0xB68 JUMP JUMPDEST POP PUSH1 0x1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x433 PUSH2 0x70C PUSH2 0x822 JUMP JUMPDEST DUP5 PUSH2 0x4C0 DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xD70 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x2 PUSH1 0x0 PUSH2 0x736 PUSH2 0x822 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 SWAP2 DUP14 AND DUP2 MSTORE SWAP3 MSTORE SWAP1 KECCAK256 SLOAD SWAP2 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xA70 AND JUMP JUMPDEST PUSH1 0x0 PUSH2 0x433 PUSH2 0x77A PUSH2 0x822 JUMP JUMPDEST DUP5 DUP5 PUSH2 0x912 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x7B4 PUSH2 0x822 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 0x816 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x81F DUP2 PUSH2 0xC5A JUMP JUMPDEST POP JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x86B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xDE0 PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x8B0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xD96 PUSH1 0x23 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE DUP2 MLOAD DUP6 DUP2 MSTORE SWAP2 MLOAD PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x957 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xCFB PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x99C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xE05 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x9DF DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xDB9 PUSH1 0x27 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP2 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xA70 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP5 AND DUP2 MSTORE KECCAK256 SLOAD PUSH2 0xA14 SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0xB07 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SWAP5 SWAP1 SWAP5 SSTORE DUP1 MLOAD DUP6 DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP4 SWAP3 DUP8 AND SWAP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP3 SWAP2 DUP3 SWAP1 SUB ADD SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP5 DUP5 GT ISZERO PUSH2 0xAFF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xAC4 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xAAC JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0xAF1 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0xB61 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xBC3 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E55524132303A206D696E7420746F20746865207A65726F2061646472657373 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x3 SLOAD PUSH2 0xBD6 SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0xB07 AND JUMP JUMPDEST PUSH1 0x3 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0xC02 SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0xB07 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 SWAP1 SWAP5 SSTORE DUP4 MLOAD DUP6 DUP2 MSTORE SWAP4 MLOAD SWAP3 SWAP4 SWAP2 SWAP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xC9F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xD21 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP INVALID 0x4E SSTORE MSTORE COINBASE ORIGIN ADDRESS GASPRICE KECCAK256 PUSH21 0x72616E736665722066726F6D20746865207A65726F KECCAK256 PUSH2 0x6464 PUSH19 0x6573734F776E61626C653A206E6577206F776E PUSH6 0x722069732074 PUSH9 0x65207A65726F206164 PUSH5 0x726573734E SSTORE MSTORE COINBASE ORIGIN ADDRESS GASPRICE KECCAK256 PUSH21 0x72616E7366657220616D6F756E7420657863656564 PUSH20 0x20616C6C6F77616E63654E55524132303A206465 PUSH4 0x72656173 PUSH6 0x6420616C6C6F PUSH24 0x616E63652062656C6F77207A65726F4E55524132303A2061 PUSH17 0x70726F766520746F20746865207A65726F KECCAK256 PUSH2 0x6464 PUSH19 0x6573734E55524132303A207472616E73666572 KECCAK256 PUSH2 0x6D6F PUSH22 0x6E7420657863656564732062616C616E63654E555241 ORIGIN ADDRESS GASPRICE KECCAK256 PUSH2 0x7070 PUSH19 0x6F76652066726F6D20746865207A65726F2061 PUSH5 0x6472657373 0x4E SSTORE MSTORE COINBASE ORIGIN ADDRESS GASPRICE KECCAK256 PUSH21 0x72616E7366657220746F20746865207A65726F2061 PUSH5 0x6472657373 LOG2 PUSH6 0x627A7A723158 KECCAK256 0xC5 0xAC 0xDF CALLER 0x5D BYTE 0xB6 DELEGATECALL BYTE NOT ADDRESS DUP12 SWAP13 0xB6 0xAE LOG4 PC 0xB3 OR PUSH29 0xF6237E823BFAD1EADB8BF53764736F6C63430005100032000000000000 ",
							"sourceMap": "10967:7577:0:-;;;11281:233;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;9526:17:0;9546:12;-1:-1:-1;;;;;9546:10:0;:12;:::i;:::-;9564:6;:18;;-1:-1:-1;;;;;;9564:18:0;-1:-1:-1;;;;;9564:18:0;;;;;;;9593:43;;9564:18;;-1:-1:-1;9564:18:0;9593:43;;9564:6;;9593:43;-1:-1:-1;11308:16:0;;;;;;;;;;;;;-1:-1:-1;;;11308:16:0;;;;;;;;;;;:::i;:::-;-1:-1:-1;11330:13:0;;;;;;;;;;;;;-1:-1:-1;;;11330:13:0;;;;;;;;;:7;;:13;:::i;:::-;-1:-1:-1;11349:9:0;:14;;-1:-1:-1;;11349:14:0;11361:2;11349:14;;;11384:25;11369:12;:40;;;11425:10;11349:9;11415:21;;;11349:14;11415:21;;;;;;;;:36;;;11463:46;;;;;;11425:10;;11349:9;;11463:46;;;;;;;;;;10967:7577;;3594:90;3669:10;3594:90;;:::o;10967:7577::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10967:7577:0;;;-1:-1:-1;10967:7577:0;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106101005760003560e01c8063893d20e811610097578063a457c2d711610066578063a457c2d7146102dd578063a9059cbb14610309578063dd62ed3e14610335578063f2fde38b1461036357610100565b8063893d20e81461028c5780638da5cb5b146102b057806395d89b41146102b8578063a0712d68146102c057610100565b8063313ce567116100d3578063313ce56714610212578063395093511461023057806370a082311461025c578063715018a61461028257610100565b806306fdde0314610105578063095ea7b31461018257806318160ddd146101c257806323b872dd146101dc575b600080fd5b61010d610389565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561014757818101518382015260200161012f565b50505050905090810190601f1680156101745780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101ae6004803603604081101561019857600080fd5b506001600160a01b03813516906020013561041f565b604080519115158252519081900360200190f35b6101ca61043c565b60408051918252519081900360200190f35b6101ae600480360360608110156101f257600080fd5b506001600160a01b03813581169160208101359091169060400135610442565b61021a6104cf565b6040805160ff9092168252519081900360200190f35b6101ae6004803603604081101561024657600080fd5b506001600160a01b0381351690602001356104d8565b6101ca6004803603602081101561027257600080fd5b50356001600160a01b031661052c565b61028a610547565b005b6102946105fb565b604080516001600160a01b039092168252519081900360200190f35b61029461060a565b61010d610619565b6101ae600480360360208110156102d657600080fd5b503561067a565b6101ae600480360360408110156102f357600080fd5b506001600160a01b0381351690602001356106ff565b6101ae6004803603604081101561031f57600080fd5b506001600160a01b03813516906020013561076d565b6101ca6004803603604081101561034b57600080fd5b506001600160a01b0381358116916020013516610781565b61028a6004803603602081101561037957600080fd5b50356001600160a01b03166107ac565b60068054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104155780601f106103ea57610100808354040283529160200191610415565b820191906000526020600020905b8154815290600101906020018083116103f857829003601f168201915b5050505050905090565b600061043361042c610822565b8484610826565b50600192915050565b60035490565b600061044f848484610912565b6104c58461045b610822565b6104c085604051806060016040528060298152602001610d47602991396001600160a01b038a16600090815260026020526040812090610499610822565b6001600160a01b03168152602081019190915260400160002054919063ffffffff610a7016565b610826565b5060019392505050565b60045460ff1690565b60006104336104e5610822565b846104c085600260006104f6610822565b6001600160a01b03908116825260208083019390935260409182016000908120918c16815292529020549063ffffffff610b0716565b6001600160a01b031660009081526001602052604090205490565b61054f610822565b6000546001600160a01b039081169116146105b1576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b600061060561060a565b905090565b6000546001600160a01b031690565b60058054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104155780601f106103ea57610100808354040283529160200191610415565b6000610684610822565b6000546001600160a01b039081169116146106e6576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6106f76106f1610822565b83610b68565b506001919050565b600061043361070c610822565b846104c085604051806060016040528060268152602001610d706026913960026000610736610822565b6001600160a01b03908116825260208083019390935260409182016000908120918d1681529252902054919063ffffffff610a7016565b600061043361077a610822565b8484610912565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b6107b4610822565b6000546001600160a01b03908116911614610816576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b61081f81610c5a565b50565b3390565b6001600160a01b03831661086b5760405162461bcd60e51b8152600401808060200182810382526025815260200180610de06025913960400191505060405180910390fd5b6001600160a01b0382166108b05760405162461bcd60e51b8152600401808060200182810382526023815260200180610d966023913960400191505060405180910390fd5b6001600160a01b03808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166109575760405162461bcd60e51b8152600401808060200182810382526026815260200180610cfb6026913960400191505060405180910390fd5b6001600160a01b03821661099c5760405162461bcd60e51b8152600401808060200182810382526024815260200180610e056024913960400191505060405180910390fd5b6109df81604051806060016040528060278152602001610db9602791396001600160a01b038616600090815260016020526040902054919063ffffffff610a7016565b6001600160a01b038085166000908152600160205260408082209390935590841681522054610a14908263ffffffff610b0716565b6001600160a01b0380841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008184841115610aff5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610ac4578181015183820152602001610aac565b50505050905090810190601f168015610af15780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600082820183811015610b61576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6001600160a01b038216610bc3576040805162461bcd60e51b815260206004820181905260248201527f4e55524132303a206d696e7420746f20746865207a65726f2061646472657373604482015290519081900360640190fd5b600354610bd6908263ffffffff610b0716565b6003556001600160a01b038216600090815260016020526040902054610c02908263ffffffff610b0716565b6001600160a01b03831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6001600160a01b038116610c9f5760405162461bcd60e51b8152600401808060200182810382526026815260200180610d216026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b039290921691909117905556fe4e55524132303a207472616e736665722066726f6d20746865207a65726f20616464726573734f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734e55524132303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63654e55524132303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f4e55524132303a20617070726f766520746f20746865207a65726f20616464726573734e55524132303a207472616e7366657220616d6f756e7420657863656564732062616c616e63654e55524132303a20617070726f76652066726f6d20746865207a65726f20616464726573734e55524132303a207472616e7366657220746f20746865207a65726f2061646472657373a265627a7a72315820c5acdf335d1ab6f41a19308b9cb6aea458b3177cf6237e823bfad1eadb8bf53764736f6c63430005100032",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x100 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x893D20E8 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xA457C2D7 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x2DD JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x309 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x335 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x363 JUMPI PUSH2 0x100 JUMP JUMPDEST DUP1 PUSH4 0x893D20E8 EQ PUSH2 0x28C JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x2B0 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x2B8 JUMPI DUP1 PUSH4 0xA0712D68 EQ PUSH2 0x2C0 JUMPI PUSH2 0x100 JUMP JUMPDEST DUP1 PUSH4 0x313CE567 GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x212 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x230 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x25C JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x282 JUMPI PUSH2 0x100 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x105 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x182 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x1C2 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1DC JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x10D PUSH2 0x389 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x147 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x12F JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x174 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1AE PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x198 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x41F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x1CA PUSH2 0x43C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x1AE PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x1F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 SWAP2 AND SWAP1 PUSH1 0x40 ADD CALLDATALOAD PUSH2 0x442 JUMP JUMPDEST PUSH2 0x21A PUSH2 0x4CF JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xFF SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x1AE PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x246 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x4D8 JUMP JUMPDEST PUSH2 0x1CA PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x272 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x52C JUMP JUMPDEST PUSH2 0x28A PUSH2 0x547 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x294 PUSH2 0x5FB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x294 PUSH2 0x60A JUMP JUMPDEST PUSH2 0x10D PUSH2 0x619 JUMP JUMPDEST PUSH2 0x1AE PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x67A JUMP JUMPDEST PUSH2 0x1AE PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x2F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x6FF JUMP JUMPDEST PUSH2 0x1AE PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x31F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x76D JUMP JUMPDEST PUSH2 0x1CA PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x34B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 ADD CALLDATALOAD AND PUSH2 0x781 JUMP JUMPDEST PUSH2 0x28A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x379 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x7AC JUMP JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F PUSH1 0x2 PUSH1 0x0 NOT PUSH2 0x100 PUSH1 0x1 DUP9 AND ISZERO MUL ADD SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE PUSH1 0x60 SWAP4 SWAP1 SWAP3 SWAP1 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x415 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3EA JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x415 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x3F8 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x433 PUSH2 0x42C PUSH2 0x822 JUMP JUMPDEST DUP5 DUP5 PUSH2 0x826 JUMP JUMPDEST POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x44F DUP5 DUP5 DUP5 PUSH2 0x912 JUMP JUMPDEST PUSH2 0x4C5 DUP5 PUSH2 0x45B PUSH2 0x822 JUMP JUMPDEST PUSH2 0x4C0 DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x29 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xD47 PUSH1 0x29 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP1 PUSH2 0x499 PUSH2 0x822 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP2 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xA70 AND JUMP JUMPDEST PUSH2 0x826 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x433 PUSH2 0x4E5 PUSH2 0x822 JUMP JUMPDEST DUP5 PUSH2 0x4C0 DUP6 PUSH1 0x2 PUSH1 0x0 PUSH2 0x4F6 PUSH2 0x822 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 SWAP2 DUP13 AND DUP2 MSTORE SWAP3 MSTORE SWAP1 KECCAK256 SLOAD SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xB07 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x54F PUSH2 0x822 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 0x5B1 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP4 SWAP1 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x605 PUSH2 0x60A JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F PUSH1 0x2 PUSH1 0x0 NOT PUSH2 0x100 PUSH1 0x1 DUP9 AND ISZERO MUL ADD SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE PUSH1 0x60 SWAP4 SWAP1 SWAP3 SWAP1 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x415 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3EA JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x415 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x684 PUSH2 0x822 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 0x6E6 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x6F7 PUSH2 0x6F1 PUSH2 0x822 JUMP JUMPDEST DUP4 PUSH2 0xB68 JUMP JUMPDEST POP PUSH1 0x1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x433 PUSH2 0x70C PUSH2 0x822 JUMP JUMPDEST DUP5 PUSH2 0x4C0 DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xD70 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x2 PUSH1 0x0 PUSH2 0x736 PUSH2 0x822 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 SWAP2 DUP14 AND DUP2 MSTORE SWAP3 MSTORE SWAP1 KECCAK256 SLOAD SWAP2 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xA70 AND JUMP JUMPDEST PUSH1 0x0 PUSH2 0x433 PUSH2 0x77A PUSH2 0x822 JUMP JUMPDEST DUP5 DUP5 PUSH2 0x912 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x7B4 PUSH2 0x822 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 0x816 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x81F DUP2 PUSH2 0xC5A JUMP JUMPDEST POP JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x86B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xDE0 PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x8B0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xD96 PUSH1 0x23 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE DUP2 MLOAD DUP6 DUP2 MSTORE SWAP2 MLOAD PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x957 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xCFB PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x99C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xE05 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x9DF DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xDB9 PUSH1 0x27 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP2 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xA70 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP5 AND DUP2 MSTORE KECCAK256 SLOAD PUSH2 0xA14 SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0xB07 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SWAP5 SWAP1 SWAP5 SSTORE DUP1 MLOAD DUP6 DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP4 SWAP3 DUP8 AND SWAP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP3 SWAP2 DUP3 SWAP1 SUB ADD SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP5 DUP5 GT ISZERO PUSH2 0xAFF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xAC4 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xAAC JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0xAF1 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0xB61 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xBC3 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E55524132303A206D696E7420746F20746865207A65726F2061646472657373 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x3 SLOAD PUSH2 0xBD6 SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0xB07 AND JUMP JUMPDEST PUSH1 0x3 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0xC02 SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0xB07 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 SWAP1 SWAP5 SSTORE DUP4 MLOAD DUP6 DUP2 MSTORE SWAP4 MLOAD SWAP3 SWAP4 SWAP2 SWAP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xC9F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xD21 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP INVALID 0x4E SSTORE MSTORE COINBASE ORIGIN ADDRESS GASPRICE KECCAK256 PUSH21 0x72616E736665722066726F6D20746865207A65726F KECCAK256 PUSH2 0x6464 PUSH19 0x6573734F776E61626C653A206E6577206F776E PUSH6 0x722069732074 PUSH9 0x65207A65726F206164 PUSH5 0x726573734E SSTORE MSTORE COINBASE ORIGIN ADDRESS GASPRICE KECCAK256 PUSH21 0x72616E7366657220616D6F756E7420657863656564 PUSH20 0x20616C6C6F77616E63654E55524132303A206465 PUSH4 0x72656173 PUSH6 0x6420616C6C6F PUSH24 0x616E63652062656C6F77207A65726F4E55524132303A2061 PUSH17 0x70726F766520746F20746865207A65726F KECCAK256 PUSH2 0x6464 PUSH19 0x6573734E55524132303A207472616E73666572 KECCAK256 PUSH2 0x6D6F PUSH22 0x6E7420657863656564732062616C616E63654E555241 ORIGIN ADDRESS GASPRICE KECCAK256 PUSH2 0x7070 PUSH19 0x6F76652066726F6D20746865207A65726F2061 PUSH5 0x6472657373 0x4E SSTORE MSTORE COINBASE ORIGIN ADDRESS GASPRICE KECCAK256 PUSH21 0x72616E7366657220746F20746865207A65726F2061 PUSH5 0x6472657373 LOG2 PUSH6 0x627A7A723158 KECCAK256 0xC5 0xAC 0xDF CALLER 0x5D BYTE 0xB6 DELEGATECALL BYTE NOT ADDRESS DUP12 SWAP13 0xB6 0xAE LOG4 PC 0xB3 OR PUSH29 0xF6237E823BFAD1EADB8BF53764736F6C63430005100032000000000000 ",
							"sourceMap": "10967:7577:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10967:7577:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11958:77;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;11958:77:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12958:141;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;12958:141:0;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;12087:85;;;:::i;:::-;;;;;;;;;;;;;;;;13532:289;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;13532:289:0;;;;;;;;;;;;;;;;;:::i;11700:77::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;14190:197;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;14190:197:0;;;;;;;;:::i;12222:104::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;12222:104:0;-1:-1:-1;;;;;12222:104:0;;:::i;10292:127::-;;;:::i;:::-;;11569:77;;;:::i;:::-;;;;-1:-1:-1;;;;;11569:77:0;;;;;;;;;;;;;;9709:71;;;:::i;11829:81::-;;;:::i;15283:117::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;15283:117:0;;:::i;14844:249::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;14844:249:0;;;;;;;;:::i;12511:147::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;12511:147:0;;;;;;;;:::i;12708:128::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;12708:128:0;;;;;;;;;;:::i;10558:101::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10558:101:0;-1:-1:-1;;;;;10558:101:0;;:::i;11958:77::-;12025:5;12018:12;;;;;;;;-1:-1:-1;;12018:12:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11997:13;;12018:12;;12025:5;;12018:12;;12025:5;12018:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11958:77;:::o;12958:141::-;13026:4;13038:39;13047:12;:10;:12::i;:::-;13061:7;13070:6;13038:8;:39::i;:::-;-1:-1:-1;13090:4:0;12958:141;;;;:::o;12087:85::-;12155:12;;12087:85;:::o;13532:289::-;13623:4;13635:36;13645:6;13653:9;13664:6;13635:9;:36::i;:::-;13677:122;13686:6;13694:12;:10;:12::i;:::-;13708:90;13746:6;13708:90;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;13708:19:0;;;;;;:11;:19;;;;;;13728:12;:10;:12::i;:::-;-1:-1:-1;;;;;13708:33:0;;;;;;;;;;;;-1:-1:-1;13708:33:0;;;:90;;:37;:90;:::i;:::-;13677:8;:122::i;:::-;-1:-1:-1;13812:4:0;13532:289;;;;;:::o;11700:77::-;11763:9;;;;11700:77;:::o;14190:197::-;14270:4;14282:83;14291:12;:10;:12::i;:::-;14305:7;14314:50;14353:10;14314:11;:25;14326:12;:10;:12::i;:::-;-1:-1:-1;;;;;14314:25:0;;;;;;;;;;;;;;;;;-1:-1:-1;14314:25:0;;;:34;;;;;;;;;;;:50;:38;:50;:::i;12222:104::-;-1:-1:-1;;;;;12303:18:0;12281:7;12303:18;;;:9;:18;;;;;;;12222:104::o;10292:127::-;9905:12;:10;:12::i;:::-;9895:6;;-1:-1:-1;;;;;9895:6:0;;;:22;;;9887:67;;;;;-1:-1:-1;;;9887:67:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10386:1;10370:6;;10349:40;;-1:-1:-1;;;;;10370:6:0;;;;10349:40;;10386:1;;10349:40;10412:1;10395:19;;-1:-1:-1;;;;;;10395:19:0;;;10292:127::o;11569:77::-;11612:7;11634;:5;:7::i;:::-;11627:14;;11569:77;:::o;9709:71::-;9747:7;9769:6;-1:-1:-1;;;;;9769:6:0;9709:71;:::o;11829:81::-;11898:7;11891:14;;;;;;;;-1:-1:-1;;11891:14:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11870:13;;11891:14;;11898:7;;11891:14;;11898:7;11891:14;;;;;;;;;;;;;;;;;;;;;;;;15283:117;15339:4;9905:12;:10;:12::i;:::-;9895:6;;-1:-1:-1;;;;;9895:6:0;;;:22;;;9887:67;;;;;-1:-1:-1;;;9887:67:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15351:27;15357:12;:10;:12::i;:::-;15371:6;15351:5;:27::i;:::-;-1:-1:-1;15391:4:0;15283:117;;;:::o;14844:249::-;14929:4;14941:130;14950:12;:10;:12::i;:::-;14964:7;14973:97;15012:15;14973:97;;;;;;;;;;;;;;;;;:11;:25;14985:12;:10;:12::i;:::-;-1:-1:-1;;;;;14973:25:0;;;;;;;;;;;;;;;;;-1:-1:-1;14973:25:0;;;:34;;;;;;;;;;;:97;;:38;:97;:::i;12511:147::-;12582:4;12594:42;12604:12;:10;:12::i;:::-;12618:9;12629:6;12594:9;:42::i;12708:128::-;-1:-1:-1;;;;;12804:18:0;;;12782:7;12804:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;12708:128::o;10558:101::-;9905:12;:10;:12::i;:::-;9895:6;;-1:-1:-1;;;;;9895:6:0;;;:22;;;9887:67;;;;;-1:-1:-1;;;9887:67:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10626:28;10645:8;10626:18;:28::i;:::-;10558:101;:::o;3594:90::-;3669:10;3594:90;:::o;17842:316::-;-1:-1:-1;;;;;17931:19:0;;17923:69;;;;-1:-1:-1;;;17923:69:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;18006:21:0;;17998:69;;;;-1:-1:-1;;;17998:69:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;18074:18:0;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;18121:32;;;;;;;;;;;;;;;;;17842:316;;;:::o;15844:445::-;-1:-1:-1;;;;;15937:20:0;;15929:71;;;;-1:-1:-1;;;15929:71:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;16014:23:0;;16006:72;;;;-1:-1:-1;;;16006:72:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16105;16127:6;16105:72;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;16105:17:0;;;;;;:9;:17;;;;;;;:72;;:21;:72;:::i;:::-;-1:-1:-1;;;;;16085:17:0;;;;;;;:9;:17;;;;;;:92;;;;16206:20;;;;;;;:32;;16231:6;16206:32;:24;:32;:::i;:::-;-1:-1:-1;;;;;16183:20:0;;;;;;;:9;:20;;;;;;;;;:55;;;;16249:35;;;;;;;16183:20;;16249:35;;;;;;;;;;;;;15844:445;;;:::o;5491:173::-;5577:7;5608:12;5600:6;;;;5592:29;;;;-1:-1:-1;;;5592:29:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;5592:29:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;5639:5:0;;;5491:173::o;4693:162::-;4751:7;4778:5;;;4797:6;;;;4789:46;;;;;-1:-1:-1;;;4789:46:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;4849:1;4693:162;-1:-1:-1;;;4693:162:0:o;16539:285::-;-1:-1:-1;;;;;16610:21:0;;16602:66;;;;;-1:-1:-1;;;16602:66:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16690:12;;:24;;16707:6;16690:24;:16;:24;:::i;:::-;16675:12;:39;-1:-1:-1;;;;;16741:18:0;;;;;;:9;:18;;;;;;:30;;16764:6;16741:30;:22;:30;:::i;:::-;-1:-1:-1;;;;;16720:18:0;;;;;;:9;:18;;;;;;;;:51;;;;16782:37;;;;;;;16720:18;;;;16782:37;;;;;;;;;;16539:285;;:::o;10752:211::-;-1:-1:-1;;;;;10821:22:0;;10813:73;;;;-1:-1:-1;;;10813:73:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10918:6;;;10897:38;;-1:-1:-1;;;;;10897:38:0;;;;10918:6;;;10897:38;;;10941:6;:17;;-1:-1:-1;;;;;;10941:17:0;-1:-1:-1;;;;;10941:17:0;;;;;;;;;;10752:211::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "735400",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"allowance(address,address)": "1316",
								"approve(address,uint256)": "infinite",
								"balanceOf(address)": "1209",
								"decimals()": "1036",
								"decreaseAllowance(address,uint256)": "infinite",
								"getOwner()": "1095",
								"increaseAllowance(address,uint256)": "infinite",
								"mint(uint256)": "infinite",
								"name()": "infinite",
								"owner()": "1082",
								"renounceOwnership()": "24293",
								"symbol()": "infinite",
								"totalSupply()": "1066",
								"transfer(address,uint256)": "infinite",
								"transferFrom(address,address,uint256)": "infinite",
								"transferOwnership(address)": "infinite"
							},
							"internal": {
								"_approve(address,address,uint256)": "infinite",
								"_burn(address,uint256)": "infinite",
								"_burnFrom(address,uint256)": "infinite",
								"_mint(address,uint256)": "infinite",
								"_transfer(address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 10967,
									"end": 18544,
									"name": "PUSH",
									"value": "80"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "PUSH",
									"value": "40"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "MSTORE"
								},
								{
									"begin": 11281,
									"end": 11514,
									"name": "CALLVALUE"
								},
								{
									"begin": 8,
									"end": 17,
									"name": "DUP1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "ISZERO"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "PUSH [tag]",
									"value": "1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "JUMPI"
								},
								{
									"begin": 30,
									"end": 31,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 27,
									"end": 28,
									"name": "DUP1"
								},
								{
									"begin": 20,
									"end": 32,
									"name": "REVERT"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "tag",
									"value": "1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "JUMPDEST"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP"
								},
								{
									"begin": 9526,
									"end": 9543,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 9546,
									"end": 9558,
									"name": "PUSH [tag]",
									"value": "7"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB"
								},
								{
									"begin": 9546,
									"end": 9556,
									"name": "PUSH [tag]",
									"value": "8"
								},
								{
									"begin": 9546,
									"end": 9558,
									"name": "AND"
								},
								{
									"begin": 9546,
									"end": 9558,
									"name": "JUMP",
									"value": "[in]"
								},
								{
									"begin": 9546,
									"end": 9558,
									"name": "tag",
									"value": "7"
								},
								{
									"begin": 9546,
									"end": 9558,
									"name": "JUMPDEST"
								},
								{
									"begin": 9564,
									"end": 9570,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 9564,
									"end": 9582,
									"name": "DUP1"
								},
								{
									"begin": 9564,
									"end": 9582,
									"name": "SLOAD"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT"
								},
								{
									"begin": 9564,
									"end": 9582,
									"name": "AND"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB"
								},
								{
									"begin": 9564,
									"end": 9582,
									"name": "DUP4"
								},
								{
									"begin": 9564,
									"end": 9582,
									"name": "AND"
								},
								{
									"begin": 9564,
									"end": 9582,
									"name": "SWAP1"
								},
								{
									"begin": 9564,
									"end": 9582,
									"name": "DUP2"
								},
								{
									"begin": 9564,
									"end": 9582,
									"name": "OR"
								},
								{
									"begin": 9564,
									"end": 9582,
									"name": "DUP3"
								},
								{
									"begin": 9564,
									"end": 9582,
									"name": "SSTORE"
								},
								{
									"begin": 9593,
									"end": 9636,
									"name": "PUSH",
									"value": "40"
								},
								{
									"begin": 9593,
									"end": 9636,
									"name": "MLOAD"
								},
								{
									"begin": 9564,
									"end": 9582,
									"name": "SWAP3"
								},
								{
									"begin": 9564,
									"end": 9582,
									"name": "SWAP4"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP"
								},
								{
									"begin": 9564,
									"end": 9582,
									"name": "SWAP2"
								},
								{
									"begin": 9593,
									"end": 9636,
									"name": "PUSH",
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": 9593,
									"end": 9636,
									"name": "SWAP1"
								},
								{
									"begin": 9564,
									"end": 9570,
									"name": "DUP3"
								},
								{
									"begin": 9564,
									"end": 9570,
									"name": "SWAP1"
								},
								{
									"begin": 9593,
									"end": 9636,
									"name": "LOG3"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP"
								},
								{
									"begin": 11308,
									"end": 11324,
									"name": "PUSH",
									"value": "40"
								},
								{
									"begin": 11308,
									"end": 11324,
									"name": "DUP1"
								},
								{
									"begin": 11308,
									"end": 11324,
									"name": "MLOAD"
								},
								{
									"begin": 11308,
									"end": 11324,
									"name": "DUP1"
								},
								{
									"begin": 11308,
									"end": 11324,
									"name": "DUP3"
								},
								{
									"begin": 11308,
									"end": 11324,
									"name": "ADD"
								},
								{
									"begin": 11308,
									"end": 11324,
									"name": "SWAP1"
								},
								{
									"begin": 11308,
									"end": 11324,
									"name": "SWAP2"
								},
								{
									"begin": 11308,
									"end": 11324,
									"name": "MSTORE"
								},
								{
									"begin": 11308,
									"end": 11324,
									"name": "PUSH",
									"value": "6"
								},
								{
									"begin": 11308,
									"end": 11324,
									"name": "DUP1"
								},
								{
									"begin": 11308,
									"end": 11324,
									"name": "DUP3"
								},
								{
									"begin": 11308,
									"end": 11324,
									"name": "MSTORE"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"value": "546F6B656E41"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"value": "D0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL"
								},
								{
									"begin": 11308,
									"end": 11324,
									"name": "PUSH",
									"value": "20"
								},
								{
									"begin": 11308,
									"end": 11324,
									"name": "SWAP1"
								},
								{
									"begin": 11308,
									"end": 11324,
									"name": "SWAP3"
								},
								{
									"begin": 11308,
									"end": 11324,
									"name": "ADD"
								},
								{
									"begin": 11308,
									"end": 11324,
									"name": "SWAP2"
								},
								{
									"begin": 11308,
									"end": 11324,
									"name": "DUP3"
								},
								{
									"begin": 11308,
									"end": 11324,
									"name": "MSTORE"
								},
								{
									"begin": 11308,
									"end": 11324,
									"name": "PUSH [tag]",
									"value": "10"
								},
								{
									"begin": 11308,
									"end": 11324,
									"name": "SWAP2"
								},
								{
									"begin": 11308,
									"end": 11324,
									"name": "DUP2"
								},
								{
									"begin": 11308,
									"end": 11324,
									"name": "PUSH [tag]",
									"value": "11"
								},
								{
									"begin": 11308,
									"end": 11324,
									"name": "JUMP",
									"value": "[in]"
								},
								{
									"begin": 11308,
									"end": 11324,
									"name": "tag",
									"value": "10"
								},
								{
									"begin": 11308,
									"end": 11324,
									"name": "JUMPDEST"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP"
								},
								{
									"begin": 11330,
									"end": 11343,
									"name": "PUSH",
									"value": "40"
								},
								{
									"begin": 11330,
									"end": 11343,
									"name": "DUP1"
								},
								{
									"begin": 11330,
									"end": 11343,
									"name": "MLOAD"
								},
								{
									"begin": 11330,
									"end": 11343,
									"name": "DUP1"
								},
								{
									"begin": 11330,
									"end": 11343,
									"name": "DUP3"
								},
								{
									"begin": 11330,
									"end": 11343,
									"name": "ADD"
								},
								{
									"begin": 11330,
									"end": 11343,
									"name": "SWAP1"
								},
								{
									"begin": 11330,
									"end": 11343,
									"name": "SWAP2"
								},
								{
									"begin": 11330,
									"end": 11343,
									"name": "MSTORE"
								},
								{
									"begin": 11330,
									"end": 11343,
									"name": "PUSH",
									"value": "1"
								},
								{
									"begin": 11330,
									"end": 11343,
									"name": "DUP1"
								},
								{
									"begin": 11330,
									"end": 11343,
									"name": "DUP3"
								},
								{
									"begin": 11330,
									"end": 11343,
									"name": "MSTORE"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"value": "41"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"value": "F8"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL"
								},
								{
									"begin": 11330,
									"end": 11343,
									"name": "PUSH",
									"value": "20"
								},
								{
									"begin": 11330,
									"end": 11343,
									"name": "SWAP1"
								},
								{
									"begin": 11330,
									"end": 11343,
									"name": "SWAP3"
								},
								{
									"begin": 11330,
									"end": 11343,
									"name": "ADD"
								},
								{
									"begin": 11330,
									"end": 11343,
									"name": "SWAP2"
								},
								{
									"begin": 11330,
									"end": 11343,
									"name": "DUP3"
								},
								{
									"begin": 11330,
									"end": 11343,
									"name": "MSTORE"
								},
								{
									"begin": 11330,
									"end": 11343,
									"name": "PUSH [tag]",
									"value": "12"
								},
								{
									"begin": 11330,
									"end": 11343,
									"name": "SWAP2"
								},
								{
									"begin": 11330,
									"end": 11337,
									"name": "PUSH",
									"value": "5"
								},
								{
									"begin": 11330,
									"end": 11337,
									"name": "SWAP2"
								},
								{
									"begin": 11330,
									"end": 11343,
									"name": "PUSH [tag]",
									"value": "11"
								},
								{
									"begin": 11330,
									"end": 11343,
									"name": "JUMP",
									"value": "[in]"
								},
								{
									"begin": 11330,
									"end": 11343,
									"name": "tag",
									"value": "12"
								},
								{
									"begin": 11330,
									"end": 11343,
									"name": "JUMPDEST"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP"
								},
								{
									"begin": 11349,
									"end": 11358,
									"name": "PUSH",
									"value": "4"
								},
								{
									"begin": 11349,
									"end": 11363,
									"name": "DUP1"
								},
								{
									"begin": 11349,
									"end": 11363,
									"name": "SLOAD"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"value": "FF"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT"
								},
								{
									"begin": 11349,
									"end": 11363,
									"name": "AND"
								},
								{
									"begin": 11361,
									"end": 11363,
									"name": "PUSH",
									"value": "12"
								},
								{
									"begin": 11349,
									"end": 11363,
									"name": "OR"
								},
								{
									"begin": 11349,
									"end": 11363,
									"name": "SWAP1"
								},
								{
									"begin": 11349,
									"end": 11363,
									"name": "SSTORE"
								},
								{
									"begin": 11384,
									"end": 11409,
									"name": "PUSH",
									"value": "D3C21BCECCEDA1000000"
								},
								{
									"begin": 11369,
									"end": 11381,
									"name": "PUSH",
									"value": "3"
								},
								{
									"begin": 11369,
									"end": 11409,
									"name": "DUP2"
								},
								{
									"begin": 11369,
									"end": 11409,
									"name": "SWAP1"
								},
								{
									"begin": 11369,
									"end": 11409,
									"name": "SSTORE"
								},
								{
									"begin": 11425,
									"end": 11435,
									"name": "CALLER"
								},
								{
									"begin": 11349,
									"end": 11358,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 11415,
									"end": 11436,
									"name": "DUP2"
								},
								{
									"begin": 11415,
									"end": 11436,
									"name": "DUP2"
								},
								{
									"begin": 11415,
									"end": 11436,
									"name": "MSTORE"
								},
								{
									"begin": 11349,
									"end": 11363,
									"name": "PUSH",
									"value": "1"
								},
								{
									"begin": 11415,
									"end": 11436,
									"name": "PUSH",
									"value": "20"
								},
								{
									"begin": 11415,
									"end": 11436,
									"name": "SWAP1"
								},
								{
									"begin": 11415,
									"end": 11436,
									"name": "DUP2"
								},
								{
									"begin": 11415,
									"end": 11436,
									"name": "MSTORE"
								},
								{
									"begin": 11415,
									"end": 11436,
									"name": "PUSH",
									"value": "40"
								},
								{
									"begin": 11415,
									"end": 11436,
									"name": "DUP1"
								},
								{
									"begin": 11415,
									"end": 11436,
									"name": "DUP4"
								},
								{
									"begin": 11415,
									"end": 11436,
									"name": "KECCAK256"
								},
								{
									"begin": 11415,
									"end": 11451,
									"name": "DUP6"
								},
								{
									"begin": 11415,
									"end": 11451,
									"name": "SWAP1"
								},
								{
									"begin": 11415,
									"end": 11451,
									"name": "SSTORE"
								},
								{
									"begin": 11463,
									"end": 11509,
									"name": "DUP1"
								},
								{
									"begin": 11463,
									"end": 11509,
									"name": "MLOAD"
								},
								{
									"begin": 11463,
									"end": 11509,
									"name": "SWAP5"
								},
								{
									"begin": 11463,
									"end": 11509,
									"name": "DUP6"
								},
								{
									"begin": 11463,
									"end": 11509,
									"name": "MSTORE"
								},
								{
									"begin": 11463,
									"end": 11509,
									"name": "MLOAD"
								},
								{
									"begin": 11425,
									"end": 11435,
									"name": "SWAP3"
								},
								{
									"begin": 11425,
									"end": 11435,
									"name": "SWAP4"
								},
								{
									"begin": 11349,
									"end": 11358,
									"name": "SWAP2"
								},
								{
									"begin": 11349,
									"end": 11358,
									"name": "SWAP3"
								},
								{
									"begin": 11463,
									"end": 11509,
									"name": "PUSH",
									"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
								},
								{
									"begin": 11463,
									"end": 11509,
									"name": "SWAP3"
								},
								{
									"begin": 11463,
									"end": 11509,
									"name": "DUP2"
								},
								{
									"begin": 11463,
									"end": 11509,
									"name": "SWAP1"
								},
								{
									"begin": 11463,
									"end": 11509,
									"name": "SUB"
								},
								{
									"begin": 11463,
									"end": 11509,
									"name": "SWAP1"
								},
								{
									"begin": 11463,
									"end": 11509,
									"name": "SWAP2"
								},
								{
									"begin": 11463,
									"end": 11509,
									"name": "ADD"
								},
								{
									"begin": 11463,
									"end": 11509,
									"name": "SWAP1"
								},
								{
									"begin": 11463,
									"end": 11509,
									"name": "LOG3"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "PUSH [tag]",
									"value": "13"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "JUMP"
								},
								{
									"begin": 3594,
									"end": 3684,
									"name": "tag",
									"value": "8"
								},
								{
									"begin": 3594,
									"end": 3684,
									"name": "JUMPDEST"
								},
								{
									"begin": 3669,
									"end": 3679,
									"name": "CALLER"
								},
								{
									"begin": 3594,
									"end": 3684,
									"name": "tag",
									"value": "14"
								},
								{
									"begin": 3594,
									"end": 3684,
									"name": "JUMPDEST"
								},
								{
									"begin": 3594,
									"end": 3684,
									"name": "SWAP1"
								},
								{
									"begin": 3594,
									"end": 3684,
									"name": "JUMP",
									"value": "[out]"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "tag",
									"value": "11"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "JUMPDEST"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "DUP3"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "DUP1"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "SLOAD"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "PUSH",
									"value": "1"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "DUP2"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "PUSH",
									"value": "1"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "AND"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "ISZERO"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "PUSH",
									"value": "100"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "MUL"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "SUB"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "AND"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "PUSH",
									"value": "2"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "SWAP1"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "DIV"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "SWAP1"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "MSTORE"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "PUSH",
									"value": "20"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "KECCAK256"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "SWAP1"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "PUSH",
									"value": "1F"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "ADD"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "PUSH",
									"value": "20"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "SWAP1"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "DIV"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "DUP2"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "ADD"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "SWAP3"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "DUP3"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "PUSH",
									"value": "1F"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "LT"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "PUSH [tag]",
									"value": "16"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "JUMPI"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "DUP1"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "MLOAD"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "PUSH",
									"value": "FF"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "NOT"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "AND"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "DUP4"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "DUP1"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "ADD"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "OR"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "DUP6"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "SSTORE"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "PUSH [tag]",
									"value": "18"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "JUMP"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "tag",
									"value": "16"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "JUMPDEST"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "DUP3"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "DUP1"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "ADD"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "PUSH",
									"value": "1"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "ADD"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "DUP6"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "SSTORE"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "DUP3"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "ISZERO"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "PUSH [tag]",
									"value": "18"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "JUMPI"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "SWAP2"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "DUP3"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "ADD"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "tag",
									"value": "17"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "JUMPDEST"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "DUP3"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "DUP2"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "GT"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "ISZERO"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "PUSH [tag]",
									"value": "18"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "JUMPI"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "DUP3"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "MLOAD"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "DUP3"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "SSTORE"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "SWAP2"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "PUSH",
									"value": "20"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "ADD"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "SWAP2"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "SWAP1"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "PUSH",
									"value": "1"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "ADD"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "SWAP1"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "PUSH [tag]",
									"value": "17"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "JUMP"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "tag",
									"value": "18"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "JUMPDEST"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "PUSH [tag]",
									"value": "19"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "SWAP3"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "SWAP2"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "PUSH [tag]",
									"value": "20"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "JUMP",
									"value": "[in]"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "tag",
									"value": "19"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "JUMPDEST"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "POP"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "SWAP1"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "JUMP",
									"value": "[out]"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "tag",
									"value": "20"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "JUMPDEST"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "PUSH [tag]",
									"value": "14"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "SWAP2"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "SWAP1"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "tag",
									"value": "22"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "JUMPDEST"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "DUP1"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "DUP3"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "GT"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "ISZERO"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "PUSH [tag]",
									"value": "19"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "JUMPI"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "DUP2"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "SSTORE"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "PUSH",
									"value": "1"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "ADD"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "PUSH [tag]",
									"value": "22"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "JUMP"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "tag",
									"value": "13"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "JUMPDEST"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "PUSH #[$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "DUP1"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "PUSH [$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "CODECOPY"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 10967,
									"end": 18544,
									"name": "RETURN"
								}
							],
							".data": {
								"0": {
									".auxdata": "a265627a7a72315820c5acdf335d1ab6f41a19308b9cb6aea458b3177cf6237e823bfad1eadb8bf53764736f6c63430005100032",
									".code": [
										{
											"begin": 10967,
											"end": 18544,
											"name": "PUSH",
											"value": "80"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "MSTORE"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "CALLVALUE"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "POP"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "LT"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "PUSH [tag]",
											"value": "2"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "JUMPI"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "PUSH",
											"value": "E0"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "SHR"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "DUP1"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "PUSH",
											"value": "893D20E8"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "GT"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "PUSH [tag]",
											"value": "19"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "JUMPI"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "DUP1"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "PUSH",
											"value": "A457C2D7"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "GT"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "PUSH [tag]",
											"value": "20"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "JUMPI"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "DUP1"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "PUSH",
											"value": "A457C2D7"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "EQ"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "PUSH [tag]",
											"value": "15"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "JUMPI"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "DUP1"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "PUSH",
											"value": "A9059CBB"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "EQ"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "PUSH [tag]",
											"value": "16"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "JUMPI"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "DUP1"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "PUSH",
											"value": "DD62ED3E"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "EQ"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "PUSH [tag]",
											"value": "17"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "JUMPI"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "DUP1"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "PUSH",
											"value": "F2FDE38B"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "EQ"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "PUSH [tag]",
											"value": "18"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "JUMPI"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "PUSH [tag]",
											"value": "2"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "JUMP"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "tag",
											"value": "20"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "JUMPDEST"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "DUP1"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "PUSH",
											"value": "893D20E8"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "EQ"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "PUSH [tag]",
											"value": "11"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "JUMPI"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "DUP1"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "PUSH",
											"value": "8DA5CB5B"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "EQ"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "PUSH [tag]",
											"value": "12"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "JUMPI"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "DUP1"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "PUSH",
											"value": "95D89B41"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "EQ"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "PUSH [tag]",
											"value": "13"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "JUMPI"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "DUP1"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "PUSH",
											"value": "A0712D68"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "EQ"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "PUSH [tag]",
											"value": "14"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "JUMPI"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "PUSH [tag]",
											"value": "2"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "JUMP"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "tag",
											"value": "19"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "JUMPDEST"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "DUP1"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "PUSH",
											"value": "313CE567"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "GT"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "PUSH [tag]",
											"value": "21"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "JUMPI"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "DUP1"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "PUSH",
											"value": "313CE567"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "EQ"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "PUSH [tag]",
											"value": "7"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "JUMPI"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "DUP1"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "PUSH",
											"value": "39509351"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "EQ"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "PUSH [tag]",
											"value": "8"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "JUMPI"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "DUP1"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "PUSH",
											"value": "70A08231"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "EQ"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "PUSH [tag]",
											"value": "9"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "JUMPI"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "DUP1"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "PUSH",
											"value": "715018A6"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "EQ"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "PUSH [tag]",
											"value": "10"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "JUMPI"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "PUSH [tag]",
											"value": "2"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "JUMP"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "tag",
											"value": "21"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "JUMPDEST"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "DUP1"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "PUSH",
											"value": "6FDDE03"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "EQ"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "PUSH [tag]",
											"value": "3"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "JUMPI"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "DUP1"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "PUSH",
											"value": "95EA7B3"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "EQ"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "PUSH [tag]",
											"value": "4"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "JUMPI"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "DUP1"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "PUSH",
											"value": "18160DDD"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "EQ"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "PUSH [tag]",
											"value": "5"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "JUMPI"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "DUP1"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "PUSH",
											"value": "23B872DD"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "EQ"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "PUSH [tag]",
											"value": "6"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "JUMPI"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "tag",
											"value": "2"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "JUMPDEST"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "DUP1"
										},
										{
											"begin": 10967,
											"end": 18544,
											"name": "REVERT"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "tag",
											"value": "3"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "JUMPDEST"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "PUSH [tag]",
											"value": "22"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "PUSH [tag]",
											"value": "23"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "tag",
											"value": "22"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "JUMPDEST"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "DUP1"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "MLOAD"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "DUP1"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "DUP3"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "MSTORE"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "DUP4"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "MLOAD"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "DUP2"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "DUP4"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "ADD"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "MSTORE"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "DUP4"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "MLOAD"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "SWAP2"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "SWAP3"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "DUP4"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "SWAP3"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "SWAP1"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "DUP4"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "ADD"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "SWAP2"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "DUP6"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "ADD"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "SWAP1"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "DUP1"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "DUP4"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "DUP4"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "tag",
											"value": "24"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "JUMPDEST"
										},
										{
											"begin": 33,
											"end": 36,
											"name": "DUP4"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "DUP2"
										},
										{
											"begin": 27,
											"end": 37,
											"name": "LT"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "ISZERO"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "PUSH [tag]",
											"value": "26"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "JUMPI"
										},
										{
											"begin": 90,
											"end": 101,
											"name": "DUP2"
										},
										{
											"begin": 90,
											"end": 101,
											"name": "DUP2"
										},
										{
											"begin": 90,
											"end": 101,
											"name": "ADD"
										},
										{
											"begin": 84,
											"end": 102,
											"name": "MLOAD"
										},
										{
											"begin": 71,
											"end": 82,
											"name": "DUP4"
										},
										{
											"begin": 71,
											"end": 82,
											"name": "DUP3"
										},
										{
											"begin": 71,
											"end": 82,
											"name": "ADD"
										},
										{
											"begin": 64,
											"end": 103,
											"name": "MSTORE"
										},
										{
											"begin": 52,
											"end": 54,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 45,
											"end": 55,
											"name": "ADD"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "PUSH [tag]",
											"value": "24"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "JUMP"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "tag",
											"value": "26"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "JUMPDEST"
										},
										{
											"begin": 12,
											"end": 26,
											"name": "POP"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "POP"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "POP"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "POP"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "SWAP1"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "POP"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "SWAP1"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "DUP2"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "ADD"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "SWAP1"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "PUSH",
											"value": "1F"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "AND"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "DUP1"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "ISZERO"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "PUSH [tag]",
											"value": "27"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "JUMPI"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "DUP1"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "DUP3"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "SUB"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "DUP1"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "MLOAD"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "DUP4"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "SUB"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "EXP"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "SUB"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "NOT"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "AND"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "DUP2"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "MSTORE"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "ADD"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "SWAP2"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "POP"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "tag",
											"value": "27"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "JUMPDEST"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "POP"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "SWAP3"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "POP"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "POP"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "POP"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "MLOAD"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "DUP1"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "SWAP2"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "SUB"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "SWAP1"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "RETURN"
										},
										{
											"begin": 12958,
											"end": 13099,
											"name": "tag",
											"value": "4"
										},
										{
											"begin": 12958,
											"end": 13099,
											"name": "JUMPDEST"
										},
										{
											"begin": 12958,
											"end": 13099,
											"name": "PUSH [tag]",
											"value": "28"
										},
										{
											"begin": 12958,
											"end": 13099,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 12958,
											"end": 13099,
											"name": "DUP1"
										},
										{
											"begin": 12958,
											"end": 13099,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 12958,
											"end": 13099,
											"name": "SUB"
										},
										{
											"begin": 13,
											"end": 15,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 8,
											"end": 11,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 16,
											"name": "LT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "29"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 29,
											"end": 30,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 26,
											"end": 27,
											"name": "DUP1"
										},
										{
											"begin": 19,
											"end": 31,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "29"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 12958,
											"end": 13099,
											"name": "DUP2"
										},
										{
											"begin": 12958,
											"end": 13099,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 12958,
											"end": 13099,
											"name": "AND"
										},
										{
											"begin": 12958,
											"end": 13099,
											"name": "SWAP1"
										},
										{
											"begin": 12958,
											"end": 13099,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 12958,
											"end": 13099,
											"name": "ADD"
										},
										{
											"begin": 12958,
											"end": 13099,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 12958,
											"end": 13099,
											"name": "PUSH [tag]",
											"value": "30"
										},
										{
											"begin": 12958,
											"end": 13099,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 12958,
											"end": 13099,
											"name": "tag",
											"value": "28"
										},
										{
											"begin": 12958,
											"end": 13099,
											"name": "JUMPDEST"
										},
										{
											"begin": 12958,
											"end": 13099,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 12958,
											"end": 13099,
											"name": "DUP1"
										},
										{
											"begin": 12958,
											"end": 13099,
											"name": "MLOAD"
										},
										{
											"begin": 12958,
											"end": 13099,
											"name": "SWAP2"
										},
										{
											"begin": 12958,
											"end": 13099,
											"name": "ISZERO"
										},
										{
											"begin": 12958,
											"end": 13099,
											"name": "ISZERO"
										},
										{
											"begin": 12958,
											"end": 13099,
											"name": "DUP3"
										},
										{
											"begin": 12958,
											"end": 13099,
											"name": "MSTORE"
										},
										{
											"begin": 12958,
											"end": 13099,
											"name": "MLOAD"
										},
										{
											"begin": 12958,
											"end": 13099,
											"name": "SWAP1"
										},
										{
											"begin": 12958,
											"end": 13099,
											"name": "DUP2"
										},
										{
											"begin": 12958,
											"end": 13099,
											"name": "SWAP1"
										},
										{
											"begin": 12958,
											"end": 13099,
											"name": "SUB"
										},
										{
											"begin": 12958,
											"end": 13099,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 12958,
											"end": 13099,
											"name": "ADD"
										},
										{
											"begin": 12958,
											"end": 13099,
											"name": "SWAP1"
										},
										{
											"begin": 12958,
											"end": 13099,
											"name": "RETURN"
										},
										{
											"begin": 12087,
											"end": 12172,
											"name": "tag",
											"value": "5"
										},
										{
											"begin": 12087,
											"end": 12172,
											"name": "JUMPDEST"
										},
										{
											"begin": 12087,
											"end": 12172,
											"name": "PUSH [tag]",
											"value": "31"
										},
										{
											"begin": 12087,
											"end": 12172,
											"name": "PUSH [tag]",
											"value": "32"
										},
										{
											"begin": 12087,
											"end": 12172,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 12087,
											"end": 12172,
											"name": "tag",
											"value": "31"
										},
										{
											"begin": 12087,
											"end": 12172,
											"name": "JUMPDEST"
										},
										{
											"begin": 12087,
											"end": 12172,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 12087,
											"end": 12172,
											"name": "DUP1"
										},
										{
											"begin": 12087,
											"end": 12172,
											"name": "MLOAD"
										},
										{
											"begin": 12087,
											"end": 12172,
											"name": "SWAP2"
										},
										{
											"begin": 12087,
											"end": 12172,
											"name": "DUP3"
										},
										{
											"begin": 12087,
											"end": 12172,
											"name": "MSTORE"
										},
										{
											"begin": 12087,
											"end": 12172,
											"name": "MLOAD"
										},
										{
											"begin": 12087,
											"end": 12172,
											"name": "SWAP1"
										},
										{
											"begin": 12087,
											"end": 12172,
											"name": "DUP2"
										},
										{
											"begin": 12087,
											"end": 12172,
											"name": "SWAP1"
										},
										{
											"begin": 12087,
											"end": 12172,
											"name": "SUB"
										},
										{
											"begin": 12087,
											"end": 12172,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 12087,
											"end": 12172,
											"name": "ADD"
										},
										{
											"begin": 12087,
											"end": 12172,
											"name": "SWAP1"
										},
										{
											"begin": 12087,
											"end": 12172,
											"name": "RETURN"
										},
										{
											"begin": 13532,
											"end": 13821,
											"name": "tag",
											"value": "6"
										},
										{
											"begin": 13532,
											"end": 13821,
											"name": "JUMPDEST"
										},
										{
											"begin": 13532,
											"end": 13821,
											"name": "PUSH [tag]",
											"value": "28"
										},
										{
											"begin": 13532,
											"end": 13821,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 13532,
											"end": 13821,
											"name": "DUP1"
										},
										{
											"begin": 13532,
											"end": 13821,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 13532,
											"end": 13821,
											"name": "SUB"
										},
										{
											"begin": 13,
											"end": 15,
											"name": "PUSH",
											"value": "60"
										},
										{
											"begin": 8,
											"end": 11,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 16,
											"name": "LT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "34"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 29,
											"end": 30,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 26,
											"end": 27,
											"name": "DUP1"
										},
										{
											"begin": 19,
											"end": 31,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "34"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 13532,
											"end": 13821,
											"name": "DUP2"
										},
										{
											"begin": 13532,
											"end": 13821,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 13532,
											"end": 13821,
											"name": "DUP2"
										},
										{
											"begin": 13532,
											"end": 13821,
											"name": "AND"
										},
										{
											"begin": 13532,
											"end": 13821,
											"name": "SWAP2"
										},
										{
											"begin": 13532,
											"end": 13821,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 13532,
											"end": 13821,
											"name": "DUP2"
										},
										{
											"begin": 13532,
											"end": 13821,
											"name": "ADD"
										},
										{
											"begin": 13532,
											"end": 13821,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 13532,
											"end": 13821,
											"name": "SWAP1"
										},
										{
											"begin": 13532,
											"end": 13821,
											"name": "SWAP2"
										},
										{
											"begin": 13532,
											"end": 13821,
											"name": "AND"
										},
										{
											"begin": 13532,
											"end": 13821,
											"name": "SWAP1"
										},
										{
											"begin": 13532,
											"end": 13821,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 13532,
											"end": 13821,
											"name": "ADD"
										},
										{
											"begin": 13532,
											"end": 13821,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 13532,
											"end": 13821,
											"name": "PUSH [tag]",
											"value": "35"
										},
										{
											"begin": 13532,
											"end": 13821,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 11700,
											"end": 11777,
											"name": "tag",
											"value": "7"
										},
										{
											"begin": 11700,
											"end": 11777,
											"name": "JUMPDEST"
										},
										{
											"begin": 11700,
											"end": 11777,
											"name": "PUSH [tag]",
											"value": "36"
										},
										{
											"begin": 11700,
											"end": 11777,
											"name": "PUSH [tag]",
											"value": "37"
										},
										{
											"begin": 11700,
											"end": 11777,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 11700,
											"end": 11777,
											"name": "tag",
											"value": "36"
										},
										{
											"begin": 11700,
											"end": 11777,
											"name": "JUMPDEST"
										},
										{
											"begin": 11700,
											"end": 11777,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 11700,
											"end": 11777,
											"name": "DUP1"
										},
										{
											"begin": 11700,
											"end": 11777,
											"name": "MLOAD"
										},
										{
											"begin": 11700,
											"end": 11777,
											"name": "PUSH",
											"value": "FF"
										},
										{
											"begin": 11700,
											"end": 11777,
											"name": "SWAP1"
										},
										{
											"begin": 11700,
											"end": 11777,
											"name": "SWAP3"
										},
										{
											"begin": 11700,
											"end": 11777,
											"name": "AND"
										},
										{
											"begin": 11700,
											"end": 11777,
											"name": "DUP3"
										},
										{
											"begin": 11700,
											"end": 11777,
											"name": "MSTORE"
										},
										{
											"begin": 11700,
											"end": 11777,
											"name": "MLOAD"
										},
										{
											"begin": 11700,
											"end": 11777,
											"name": "SWAP1"
										},
										{
											"begin": 11700,
											"end": 11777,
											"name": "DUP2"
										},
										{
											"begin": 11700,
											"end": 11777,
											"name": "SWAP1"
										},
										{
											"begin": 11700,
											"end": 11777,
											"name": "SUB"
										},
										{
											"begin": 11700,
											"end": 11777,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 11700,
											"end": 11777,
											"name": "ADD"
										},
										{
											"begin": 11700,
											"end": 11777,
											"name": "SWAP1"
										},
										{
											"begin": 11700,
											"end": 11777,
											"name": "RETURN"
										},
										{
											"begin": 14190,
											"end": 14387,
											"name": "tag",
											"value": "8"
										},
										{
											"begin": 14190,
											"end": 14387,
											"name": "JUMPDEST"
										},
										{
											"begin": 14190,
											"end": 14387,
											"name": "PUSH [tag]",
											"value": "28"
										},
										{
											"begin": 14190,
											"end": 14387,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 14190,
											"end": 14387,
											"name": "DUP1"
										},
										{
											"begin": 14190,
											"end": 14387,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 14190,
											"end": 14387,
											"name": "SUB"
										},
										{
											"begin": 13,
											"end": 15,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 8,
											"end": 11,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 16,
											"name": "LT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "39"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 29,
											"end": 30,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 26,
											"end": 27,
											"name": "DUP1"
										},
										{
											"begin": 19,
											"end": 31,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "39"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 14190,
											"end": 14387,
											"name": "DUP2"
										},
										{
											"begin": 14190,
											"end": 14387,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 14190,
											"end": 14387,
											"name": "AND"
										},
										{
											"begin": 14190,
											"end": 14387,
											"name": "SWAP1"
										},
										{
											"begin": 14190,
											"end": 14387,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 14190,
											"end": 14387,
											"name": "ADD"
										},
										{
											"begin": 14190,
											"end": 14387,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 14190,
											"end": 14387,
											"name": "PUSH [tag]",
											"value": "40"
										},
										{
											"begin": 14190,
											"end": 14387,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 12222,
											"end": 12326,
											"name": "tag",
											"value": "9"
										},
										{
											"begin": 12222,
											"end": 12326,
											"name": "JUMPDEST"
										},
										{
											"begin": 12222,
											"end": 12326,
											"name": "PUSH [tag]",
											"value": "31"
										},
										{
											"begin": 12222,
											"end": 12326,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 12222,
											"end": 12326,
											"name": "DUP1"
										},
										{
											"begin": 12222,
											"end": 12326,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 12222,
											"end": 12326,
											"name": "SUB"
										},
										{
											"begin": 13,
											"end": 15,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 8,
											"end": 11,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 16,
											"name": "LT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "42"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 29,
											"end": 30,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 26,
											"end": 27,
											"name": "DUP1"
										},
										{
											"begin": 19,
											"end": 31,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "42"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": 12222,
											"end": 12326,
											"name": "CALLDATALOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 12222,
											"end": 12326,
											"name": "AND"
										},
										{
											"begin": 12222,
											"end": 12326,
											"name": "PUSH [tag]",
											"value": "43"
										},
										{
											"begin": 12222,
											"end": 12326,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 10292,
											"end": 10419,
											"name": "tag",
											"value": "10"
										},
										{
											"begin": 10292,
											"end": 10419,
											"name": "JUMPDEST"
										},
										{
											"begin": 10292,
											"end": 10419,
											"name": "PUSH [tag]",
											"value": "44"
										},
										{
											"begin": 10292,
											"end": 10419,
											"name": "PUSH [tag]",
											"value": "45"
										},
										{
											"begin": 10292,
											"end": 10419,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 10292,
											"end": 10419,
											"name": "tag",
											"value": "44"
										},
										{
											"begin": 10292,
											"end": 10419,
											"name": "JUMPDEST"
										},
										{
											"begin": 10292,
											"end": 10419,
											"name": "STOP"
										},
										{
											"begin": 11569,
											"end": 11646,
											"name": "tag",
											"value": "11"
										},
										{
											"begin": 11569,
											"end": 11646,
											"name": "JUMPDEST"
										},
										{
											"begin": 11569,
											"end": 11646,
											"name": "PUSH [tag]",
											"value": "46"
										},
										{
											"begin": 11569,
											"end": 11646,
											"name": "PUSH [tag]",
											"value": "47"
										},
										{
											"begin": 11569,
											"end": 11646,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 11569,
											"end": 11646,
											"name": "tag",
											"value": "46"
										},
										{
											"begin": 11569,
											"end": 11646,
											"name": "JUMPDEST"
										},
										{
											"begin": 11569,
											"end": 11646,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 11569,
											"end": 11646,
											"name": "DUP1"
										},
										{
											"begin": 11569,
											"end": 11646,
											"name": "MLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 11569,
											"end": 11646,
											"name": "SWAP1"
										},
										{
											"begin": 11569,
											"end": 11646,
											"name": "SWAP3"
										},
										{
											"begin": 11569,
											"end": 11646,
											"name": "AND"
										},
										{
											"begin": 11569,
											"end": 11646,
											"name": "DUP3"
										},
										{
											"begin": 11569,
											"end": 11646,
											"name": "MSTORE"
										},
										{
											"begin": 11569,
											"end": 11646,
											"name": "MLOAD"
										},
										{
											"begin": 11569,
											"end": 11646,
											"name": "SWAP1"
										},
										{
											"begin": 11569,
											"end": 11646,
											"name": "DUP2"
										},
										{
											"begin": 11569,
											"end": 11646,
											"name": "SWAP1"
										},
										{
											"begin": 11569,
											"end": 11646,
											"name": "SUB"
										},
										{
											"begin": 11569,
											"end": 11646,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 11569,
											"end": 11646,
											"name": "ADD"
										},
										{
											"begin": 11569,
											"end": 11646,
											"name": "SWAP1"
										},
										{
											"begin": 11569,
											"end": 11646,
											"name": "RETURN"
										},
										{
											"begin": 9709,
											"end": 9780,
											"name": "tag",
											"value": "12"
										},
										{
											"begin": 9709,
											"end": 9780,
											"name": "JUMPDEST"
										},
										{
											"begin": 9709,
											"end": 9780,
											"name": "PUSH [tag]",
											"value": "46"
										},
										{
											"begin": 9709,
											"end": 9780,
											"name": "PUSH [tag]",
											"value": "49"
										},
										{
											"begin": 9709,
											"end": 9780,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 11829,
											"end": 11910,
											"name": "tag",
											"value": "13"
										},
										{
											"begin": 11829,
											"end": 11910,
											"name": "JUMPDEST"
										},
										{
											"begin": 11829,
											"end": 11910,
											"name": "PUSH [tag]",
											"value": "22"
										},
										{
											"begin": 11829,
											"end": 11910,
											"name": "PUSH [tag]",
											"value": "51"
										},
										{
											"begin": 11829,
											"end": 11910,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 15283,
											"end": 15400,
											"name": "tag",
											"value": "14"
										},
										{
											"begin": 15283,
											"end": 15400,
											"name": "JUMPDEST"
										},
										{
											"begin": 15283,
											"end": 15400,
											"name": "PUSH [tag]",
											"value": "28"
										},
										{
											"begin": 15283,
											"end": 15400,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 15283,
											"end": 15400,
											"name": "DUP1"
										},
										{
											"begin": 15283,
											"end": 15400,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 15283,
											"end": 15400,
											"name": "SUB"
										},
										{
											"begin": 13,
											"end": 15,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 8,
											"end": 11,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 16,
											"name": "LT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "57"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 29,
											"end": 30,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 26,
											"end": 27,
											"name": "DUP1"
										},
										{
											"begin": 19,
											"end": 31,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "57"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": 15283,
											"end": 15400,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 15283,
											"end": 15400,
											"name": "PUSH [tag]",
											"value": "58"
										},
										{
											"begin": 15283,
											"end": 15400,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 14844,
											"end": 15093,
											"name": "tag",
											"value": "15"
										},
										{
											"begin": 14844,
											"end": 15093,
											"name": "JUMPDEST"
										},
										{
											"begin": 14844,
											"end": 15093,
											"name": "PUSH [tag]",
											"value": "28"
										},
										{
											"begin": 14844,
											"end": 15093,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 14844,
											"end": 15093,
											"name": "DUP1"
										},
										{
											"begin": 14844,
											"end": 15093,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 14844,
											"end": 15093,
											"name": "SUB"
										},
										{
											"begin": 13,
											"end": 15,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 8,
											"end": 11,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 16,
											"name": "LT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "60"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 29,
											"end": 30,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 26,
											"end": 27,
											"name": "DUP1"
										},
										{
											"begin": 19,
											"end": 31,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "60"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 14844,
											"end": 15093,
											"name": "DUP2"
										},
										{
											"begin": 14844,
											"end": 15093,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 14844,
											"end": 15093,
											"name": "AND"
										},
										{
											"begin": 14844,
											"end": 15093,
											"name": "SWAP1"
										},
										{
											"begin": 14844,
											"end": 15093,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 14844,
											"end": 15093,
											"name": "ADD"
										},
										{
											"begin": 14844,
											"end": 15093,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 14844,
											"end": 15093,
											"name": "PUSH [tag]",
											"value": "61"
										},
										{
											"begin": 14844,
											"end": 15093,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 12511,
											"end": 12658,
											"name": "tag",
											"value": "16"
										},
										{
											"begin": 12511,
											"end": 12658,
											"name": "JUMPDEST"
										},
										{
											"begin": 12511,
											"end": 12658,
											"name": "PUSH [tag]",
											"value": "28"
										},
										{
											"begin": 12511,
											"end": 12658,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 12511,
											"end": 12658,
											"name": "DUP1"
										},
										{
											"begin": 12511,
											"end": 12658,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 12511,
											"end": 12658,
											"name": "SUB"
										},
										{
											"begin": 13,
											"end": 15,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 8,
											"end": 11,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 16,
											"name": "LT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "63"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 29,
											"end": 30,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 26,
											"end": 27,
											"name": "DUP1"
										},
										{
											"begin": 19,
											"end": 31,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "63"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 12511,
											"end": 12658,
											"name": "DUP2"
										},
										{
											"begin": 12511,
											"end": 12658,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 12511,
											"end": 12658,
											"name": "AND"
										},
										{
											"begin": 12511,
											"end": 12658,
											"name": "SWAP1"
										},
										{
											"begin": 12511,
											"end": 12658,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 12511,
											"end": 12658,
											"name": "ADD"
										},
										{
											"begin": 12511,
											"end": 12658,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 12511,
											"end": 12658,
											"name": "PUSH [tag]",
											"value": "64"
										},
										{
											"begin": 12511,
											"end": 12658,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 12708,
											"end": 12836,
											"name": "tag",
											"value": "17"
										},
										{
											"begin": 12708,
											"end": 12836,
											"name": "JUMPDEST"
										},
										{
											"begin": 12708,
											"end": 12836,
											"name": "PUSH [tag]",
											"value": "31"
										},
										{
											"begin": 12708,
											"end": 12836,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 12708,
											"end": 12836,
											"name": "DUP1"
										},
										{
											"begin": 12708,
											"end": 12836,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 12708,
											"end": 12836,
											"name": "SUB"
										},
										{
											"begin": 13,
											"end": 15,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 8,
											"end": 11,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 16,
											"name": "LT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "66"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 29,
											"end": 30,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 26,
											"end": 27,
											"name": "DUP1"
										},
										{
											"begin": 19,
											"end": 31,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "66"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 12708,
											"end": 12836,
											"name": "DUP2"
										},
										{
											"begin": 12708,
											"end": 12836,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 12708,
											"end": 12836,
											"name": "DUP2"
										},
										{
											"begin": 12708,
											"end": 12836,
											"name": "AND"
										},
										{
											"begin": 12708,
											"end": 12836,
											"name": "SWAP2"
										},
										{
											"begin": 12708,
											"end": 12836,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 12708,
											"end": 12836,
											"name": "ADD"
										},
										{
											"begin": 12708,
											"end": 12836,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 12708,
											"end": 12836,
											"name": "AND"
										},
										{
											"begin": 12708,
											"end": 12836,
											"name": "PUSH [tag]",
											"value": "67"
										},
										{
											"begin": 12708,
											"end": 12836,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 10558,
											"end": 10659,
											"name": "tag",
											"value": "18"
										},
										{
											"begin": 10558,
											"end": 10659,
											"name": "JUMPDEST"
										},
										{
											"begin": 10558,
											"end": 10659,
											"name": "PUSH [tag]",
											"value": "44"
										},
										{
											"begin": 10558,
											"end": 10659,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 10558,
											"end": 10659,
											"name": "DUP1"
										},
										{
											"begin": 10558,
											"end": 10659,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 10558,
											"end": 10659,
											"name": "SUB"
										},
										{
											"begin": 13,
											"end": 15,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 8,
											"end": 11,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 16,
											"name": "LT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "69"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 29,
											"end": 30,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 26,
											"end": 27,
											"name": "DUP1"
										},
										{
											"begin": 19,
											"end": 31,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "69"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": 10558,
											"end": 10659,
											"name": "CALLDATALOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 10558,
											"end": 10659,
											"name": "AND"
										},
										{
											"begin": 10558,
											"end": 10659,
											"name": "PUSH [tag]",
											"value": "70"
										},
										{
											"begin": 10558,
											"end": 10659,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "tag",
											"value": "23"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "JUMPDEST"
										},
										{
											"begin": 12025,
											"end": 12030,
											"name": "PUSH",
											"value": "6"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "DUP1"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "SLOAD"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "DUP1"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "MLOAD"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "PUSH",
											"value": "1F"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "DUP9"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "AND"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "ISZERO"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "MUL"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "ADD"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "SWAP1"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "SWAP6"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "AND"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "SWAP5"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "SWAP1"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "SWAP5"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "DIV"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "SWAP4"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "DUP5"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "ADD"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "DUP2"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "SWAP1"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "DIV"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "DUP2"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "MUL"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "DUP3"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "ADD"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "DUP2"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "ADD"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "SWAP1"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "SWAP3"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "MSTORE"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "DUP3"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "DUP2"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "MSTORE"
										},
										{
											"begin": 11997,
											"end": 12010,
											"name": "PUSH",
											"value": "60"
										},
										{
											"begin": 11997,
											"end": 12010,
											"name": "SWAP4"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "SWAP1"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "SWAP3"
										},
										{
											"begin": 12025,
											"end": 12030,
											"name": "SWAP1"
										},
										{
											"begin": 12025,
											"end": 12030,
											"name": "SWAP2"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "DUP4"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "ADD"
										},
										{
											"begin": 12025,
											"end": 12030,
											"name": "DUP3"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "DUP3"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "DUP1"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "ISZERO"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "PUSH [tag]",
											"value": "72"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "JUMPI"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "DUP1"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "PUSH",
											"value": "1F"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "LT"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "PUSH [tag]",
											"value": "73"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "JUMPI"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "DUP1"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "DUP4"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "SLOAD"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "DIV"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "MUL"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "DUP4"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "MSTORE"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "SWAP2"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "ADD"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "SWAP2"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "PUSH [tag]",
											"value": "72"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "JUMP"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "tag",
											"value": "73"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "JUMPDEST"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "DUP3"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "ADD"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "SWAP2"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "SWAP1"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "MSTORE"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "KECCAK256"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "SWAP1"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "tag",
											"value": "74"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "JUMPDEST"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "DUP2"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "SLOAD"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "DUP2"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "MSTORE"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "SWAP1"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "ADD"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "SWAP1"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "ADD"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "DUP1"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "DUP4"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "GT"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "PUSH [tag]",
											"value": "74"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "JUMPI"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "DUP3"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "SWAP1"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "SUB"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "PUSH",
											"value": "1F"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "AND"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "DUP3"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "ADD"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "SWAP2"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "tag",
											"value": "72"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "JUMPDEST"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "POP"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "POP"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "POP"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "POP"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "POP"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "SWAP1"
										},
										{
											"begin": 12018,
											"end": 12030,
											"name": "POP"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "SWAP1"
										},
										{
											"begin": 11958,
											"end": 12035,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 12958,
											"end": 13099,
											"name": "tag",
											"value": "30"
										},
										{
											"begin": 12958,
											"end": 13099,
											"name": "JUMPDEST"
										},
										{
											"begin": 13026,
											"end": 13030,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 13038,
											"end": 13077,
											"name": "PUSH [tag]",
											"value": "76"
										},
										{
											"begin": 13047,
											"end": 13059,
											"name": "PUSH [tag]",
											"value": "77"
										},
										{
											"begin": 13047,
											"end": 13057,
											"name": "PUSH [tag]",
											"value": "78"
										},
										{
											"begin": 13047,
											"end": 13059,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 13047,
											"end": 13059,
											"name": "tag",
											"value": "77"
										},
										{
											"begin": 13047,
											"end": 13059,
											"name": "JUMPDEST"
										},
										{
											"begin": 13061,
											"end": 13068,
											"name": "DUP5"
										},
										{
											"begin": 13070,
											"end": 13076,
											"name": "DUP5"
										},
										{
											"begin": 13038,
											"end": 13046,
											"name": "PUSH [tag]",
											"value": "79"
										},
										{
											"begin": 13038,
											"end": 13077,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 13038,
											"end": 13077,
											"name": "tag",
											"value": "76"
										},
										{
											"begin": 13038,
											"end": 13077,
											"name": "JUMPDEST"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": 13090,
											"end": 13094,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 12958,
											"end": 13099,
											"name": "SWAP3"
										},
										{
											"begin": 12958,
											"end": 13099,
											"name": "SWAP2"
										},
										{
											"begin": 12958,
											"end": 13099,
											"name": "POP"
										},
										{
											"begin": 12958,
											"end": 13099,
											"name": "POP"
										},
										{
											"begin": 12958,
											"end": 13099,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 12087,
											"end": 12172,
											"name": "tag",
											"value": "32"
										},
										{
											"begin": 12087,
											"end": 12172,
											"name": "JUMPDEST"
										},
										{
											"begin": 12155,
											"end": 12167,
											"name": "PUSH",
											"value": "3"
										},
										{
											"begin": 12155,
											"end": 12167,
											"name": "SLOAD"
										},
										{
											"begin": 12087,
											"end": 12172,
											"name": "SWAP1"
										},
										{
											"begin": 12087,
											"end": 12172,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 13532,
											"end": 13821,
											"name": "tag",
											"value": "35"
										},
										{
											"begin": 13532,
											"end": 13821,
											"name": "JUMPDEST"
										},
										{
											"begin": 13623,
											"end": 13627,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 13635,
											"end": 13671,
											"name": "PUSH [tag]",
											"value": "82"
										},
										{
											"begin": 13645,
											"end": 13651,
											"name": "DUP5"
										},
										{
											"begin": 13653,
											"end": 13662,
											"name": "DUP5"
										},
										{
											"begin": 13664,
											"end": 13670,
											"name": "DUP5"
										},
										{
											"begin": 13635,
											"end": 13644,
											"name": "PUSH [tag]",
											"value": "83"
										},
										{
											"begin": 13635,
											"end": 13671,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 13635,
											"end": 13671,
											"name": "tag",
											"value": "82"
										},
										{
											"begin": 13635,
											"end": 13671,
											"name": "JUMPDEST"
										},
										{
											"begin": 13677,
											"end": 13799,
											"name": "PUSH [tag]",
											"value": "84"
										},
										{
											"begin": 13686,
											"end": 13692,
											"name": "DUP5"
										},
										{
											"begin": 13694,
											"end": 13706,
											"name": "PUSH [tag]",
											"value": "85"
										},
										{
											"begin": 13694,
											"end": 13704,
											"name": "PUSH [tag]",
											"value": "78"
										},
										{
											"begin": 13694,
											"end": 13706,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 13694,
											"end": 13706,
											"name": "tag",
											"value": "85"
										},
										{
											"begin": 13694,
											"end": 13706,
											"name": "JUMPDEST"
										},
										{
											"begin": 13708,
											"end": 13798,
											"name": "PUSH [tag]",
											"value": "86"
										},
										{
											"begin": 13746,
											"end": 13752,
											"name": "DUP6"
										},
										{
											"begin": 13708,
											"end": 13798,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 13708,
											"end": 13798,
											"name": "MLOAD"
										},
										{
											"begin": 13708,
											"end": 13798,
											"name": "DUP1"
										},
										{
											"begin": 13708,
											"end": 13798,
											"name": "PUSH",
											"value": "60"
										},
										{
											"begin": 13708,
											"end": 13798,
											"name": "ADD"
										},
										{
											"begin": 13708,
											"end": 13798,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 13708,
											"end": 13798,
											"name": "MSTORE"
										},
										{
											"begin": 13708,
											"end": 13798,
											"name": "DUP1"
										},
										{
											"begin": 13708,
											"end": 13798,
											"name": "PUSH",
											"value": "29"
										},
										{
											"begin": 13708,
											"end": 13798,
											"name": "DUP2"
										},
										{
											"begin": 13708,
											"end": 13798,
											"name": "MSTORE"
										},
										{
											"begin": 13708,
											"end": 13798,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 13708,
											"end": 13798,
											"name": "ADD"
										},
										{
											"begin": 13708,
											"end": 13798,
											"name": "PUSH data",
											"value": "3BE1D828DC33615552F7BF1DF53AB6CBEEABB688C96FC19CE919E80C0F787761"
										},
										{
											"begin": 13708,
											"end": 13798,
											"name": "PUSH",
											"value": "29"
										},
										{
											"begin": 13708,
											"end": 13798,
											"name": "SWAP2"
										},
										{
											"begin": 13708,
											"end": 13798,
											"name": "CODECOPY"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 13708,
											"end": 13727,
											"name": "DUP11"
										},
										{
											"begin": 13708,
											"end": 13727,
											"name": "AND"
										},
										{
											"begin": 13708,
											"end": 13727,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 13708,
											"end": 13727,
											"name": "SWAP1"
										},
										{
											"begin": 13708,
											"end": 13727,
											"name": "DUP2"
										},
										{
											"begin": 13708,
											"end": 13727,
											"name": "MSTORE"
										},
										{
											"begin": 13708,
											"end": 13719,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": 13708,
											"end": 13727,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 13708,
											"end": 13727,
											"name": "MSTORE"
										},
										{
											"begin": 13708,
											"end": 13727,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 13708,
											"end": 13727,
											"name": "DUP2"
										},
										{
											"begin": 13708,
											"end": 13727,
											"name": "KECCAK256"
										},
										{
											"begin": 13708,
											"end": 13727,
											"name": "SWAP1"
										},
										{
											"begin": 13728,
											"end": 13740,
											"name": "PUSH [tag]",
											"value": "87"
										},
										{
											"begin": 13728,
											"end": 13738,
											"name": "PUSH [tag]",
											"value": "78"
										},
										{
											"begin": 13728,
											"end": 13740,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 13728,
											"end": 13740,
											"name": "tag",
											"value": "87"
										},
										{
											"begin": 13728,
											"end": 13740,
											"name": "JUMPDEST"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 13708,
											"end": 13741,
											"name": "AND"
										},
										{
											"begin": 13708,
											"end": 13741,
											"name": "DUP2"
										},
										{
											"begin": 13708,
											"end": 13741,
											"name": "MSTORE"
										},
										{
											"begin": 13708,
											"end": 13741,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 13708,
											"end": 13741,
											"name": "DUP2"
										},
										{
											"begin": 13708,
											"end": 13741,
											"name": "ADD"
										},
										{
											"begin": 13708,
											"end": 13741,
											"name": "SWAP2"
										},
										{
											"begin": 13708,
											"end": 13741,
											"name": "SWAP1"
										},
										{
											"begin": 13708,
											"end": 13741,
											"name": "SWAP2"
										},
										{
											"begin": 13708,
											"end": 13741,
											"name": "MSTORE"
										},
										{
											"begin": 13708,
											"end": 13741,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 13708,
											"end": 13741,
											"name": "ADD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 13708,
											"end": 13741,
											"name": "KECCAK256"
										},
										{
											"begin": 13708,
											"end": 13741,
											"name": "SLOAD"
										},
										{
											"begin": 13708,
											"end": 13741,
											"name": "SWAP2"
										},
										{
											"begin": 13708,
											"end": 13798,
											"name": "SWAP1"
										},
										{
											"begin": 13708,
											"end": 13798,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 13708,
											"end": 13745,
											"name": "PUSH [tag]",
											"value": "88"
										},
										{
											"begin": 13708,
											"end": 13798,
											"name": "AND"
										},
										{
											"begin": 13708,
											"end": 13798,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 13708,
											"end": 13798,
											"name": "tag",
											"value": "86"
										},
										{
											"begin": 13708,
											"end": 13798,
											"name": "JUMPDEST"
										},
										{
											"begin": 13677,
											"end": 13685,
											"name": "PUSH [tag]",
											"value": "79"
										},
										{
											"begin": 13677,
											"end": 13799,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 13677,
											"end": 13799,
											"name": "tag",
											"value": "84"
										},
										{
											"begin": 13677,
											"end": 13799,
											"name": "JUMPDEST"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": 13812,
											"end": 13816,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 13532,
											"end": 13821,
											"name": "SWAP4"
										},
										{
											"begin": 13532,
											"end": 13821,
											"name": "SWAP3"
										},
										{
											"begin": 13532,
											"end": 13821,
											"name": "POP"
										},
										{
											"begin": 13532,
											"end": 13821,
											"name": "POP"
										},
										{
											"begin": 13532,
											"end": 13821,
											"name": "POP"
										},
										{
											"begin": 13532,
											"end": 13821,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 11700,
											"end": 11777,
											"name": "tag",
											"value": "37"
										},
										{
											"begin": 11700,
											"end": 11777,
											"name": "JUMPDEST"
										},
										{
											"begin": 11763,
											"end": 11772,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 11763,
											"end": 11772,
											"name": "SLOAD"
										},
										{
											"begin": 11763,
											"end": 11772,
											"name": "PUSH",
											"value": "FF"
										},
										{
											"begin": 11763,
											"end": 11772,
											"name": "AND"
										},
										{
											"begin": 11700,
											"end": 11777,
											"name": "SWAP1"
										},
										{
											"begin": 11700,
											"end": 11777,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 14190,
											"end": 14387,
											"name": "tag",
											"value": "40"
										},
										{
											"begin": 14190,
											"end": 14387,
											"name": "JUMPDEST"
										},
										{
											"begin": 14270,
											"end": 14274,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 14282,
											"end": 14365,
											"name": "PUSH [tag]",
											"value": "76"
										},
										{
											"begin": 14291,
											"end": 14303,
											"name": "PUSH [tag]",
											"value": "92"
										},
										{
											"begin": 14291,
											"end": 14301,
											"name": "PUSH [tag]",
											"value": "78"
										},
										{
											"begin": 14291,
											"end": 14303,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 14291,
											"end": 14303,
											"name": "tag",
											"value": "92"
										},
										{
											"begin": 14291,
											"end": 14303,
											"name": "JUMPDEST"
										},
										{
											"begin": 14305,
											"end": 14312,
											"name": "DUP5"
										},
										{
											"begin": 14314,
											"end": 14364,
											"name": "PUSH [tag]",
											"value": "86"
										},
										{
											"begin": 14353,
											"end": 14363,
											"name": "DUP6"
										},
										{
											"begin": 14314,
											"end": 14325,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": 14314,
											"end": 14339,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 14326,
											"end": 14338,
											"name": "PUSH [tag]",
											"value": "94"
										},
										{
											"begin": 14326,
											"end": 14336,
											"name": "PUSH [tag]",
											"value": "78"
										},
										{
											"begin": 14326,
											"end": 14338,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 14326,
											"end": 14338,
											"name": "tag",
											"value": "94"
										},
										{
											"begin": 14326,
											"end": 14338,
											"name": "JUMPDEST"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 14314,
											"end": 14339,
											"name": "SWAP1"
										},
										{
											"begin": 14314,
											"end": 14339,
											"name": "DUP2"
										},
										{
											"begin": 14314,
											"end": 14339,
											"name": "AND"
										},
										{
											"begin": 14314,
											"end": 14339,
											"name": "DUP3"
										},
										{
											"begin": 14314,
											"end": 14339,
											"name": "MSTORE"
										},
										{
											"begin": 14314,
											"end": 14339,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 14314,
											"end": 14339,
											"name": "DUP1"
										},
										{
											"begin": 14314,
											"end": 14339,
											"name": "DUP4"
										},
										{
											"begin": 14314,
											"end": 14339,
											"name": "ADD"
										},
										{
											"begin": 14314,
											"end": 14339,
											"name": "SWAP4"
										},
										{
											"begin": 14314,
											"end": 14339,
											"name": "SWAP1"
										},
										{
											"begin": 14314,
											"end": 14339,
											"name": "SWAP4"
										},
										{
											"begin": 14314,
											"end": 14339,
											"name": "MSTORE"
										},
										{
											"begin": 14314,
											"end": 14339,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 14314,
											"end": 14339,
											"name": "SWAP2"
										},
										{
											"begin": 14314,
											"end": 14339,
											"name": "DUP3"
										},
										{
											"begin": 14314,
											"end": 14339,
											"name": "ADD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 14314,
											"end": 14339,
											"name": "SWAP1"
										},
										{
											"begin": 14314,
											"end": 14339,
											"name": "DUP2"
										},
										{
											"begin": 14314,
											"end": 14339,
											"name": "KECCAK256"
										},
										{
											"begin": 14314,
											"end": 14348,
											"name": "SWAP2"
										},
										{
											"begin": 14314,
											"end": 14348,
											"name": "DUP13"
										},
										{
											"begin": 14314,
											"end": 14348,
											"name": "AND"
										},
										{
											"begin": 14314,
											"end": 14348,
											"name": "DUP2"
										},
										{
											"begin": 14314,
											"end": 14348,
											"name": "MSTORE"
										},
										{
											"begin": 14314,
											"end": 14348,
											"name": "SWAP3"
										},
										{
											"begin": 14314,
											"end": 14348,
											"name": "MSTORE"
										},
										{
											"begin": 14314,
											"end": 14348,
											"name": "SWAP1"
										},
										{
											"begin": 14314,
											"end": 14348,
											"name": "KECCAK256"
										},
										{
											"begin": 14314,
											"end": 14348,
											"name": "SLOAD"
										},
										{
											"begin": 14314,
											"end": 14348,
											"name": "SWAP1"
										},
										{
											"begin": 14314,
											"end": 14364,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 14314,
											"end": 14352,
											"name": "PUSH [tag]",
											"value": "95"
										},
										{
											"begin": 14314,
											"end": 14364,
											"name": "AND"
										},
										{
											"begin": 14314,
											"end": 14364,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 12222,
											"end": 12326,
											"name": "tag",
											"value": "43"
										},
										{
											"begin": 12222,
											"end": 12326,
											"name": "JUMPDEST"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 12303,
											"end": 12321,
											"name": "AND"
										},
										{
											"begin": 12281,
											"end": 12288,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 12303,
											"end": 12321,
											"name": "SWAP1"
										},
										{
											"begin": 12303,
											"end": 12321,
											"name": "DUP2"
										},
										{
											"begin": 12303,
											"end": 12321,
											"name": "MSTORE"
										},
										{
											"begin": 12303,
											"end": 12312,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 12303,
											"end": 12321,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 12303,
											"end": 12321,
											"name": "MSTORE"
										},
										{
											"begin": 12303,
											"end": 12321,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 12303,
											"end": 12321,
											"name": "SWAP1"
										},
										{
											"begin": 12303,
											"end": 12321,
											"name": "KECCAK256"
										},
										{
											"begin": 12303,
											"end": 12321,
											"name": "SLOAD"
										},
										{
											"begin": 12303,
											"end": 12321,
											"name": "SWAP1"
										},
										{
											"begin": 12222,
											"end": 12326,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 10292,
											"end": 10419,
											"name": "tag",
											"value": "45"
										},
										{
											"begin": 10292,
											"end": 10419,
											"name": "JUMPDEST"
										},
										{
											"begin": 9905,
											"end": 9917,
											"name": "PUSH [tag]",
											"value": "98"
										},
										{
											"begin": 9905,
											"end": 9915,
											"name": "PUSH [tag]",
											"value": "78"
										},
										{
											"begin": 9905,
											"end": 9917,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 9905,
											"end": 9917,
											"name": "tag",
											"value": "98"
										},
										{
											"begin": 9905,
											"end": 9917,
											"name": "JUMPDEST"
										},
										{
											"begin": 9895,
											"end": 9901,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 9895,
											"end": 9901,
											"name": "SLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 9895,
											"end": 9901,
											"name": "SWAP1"
										},
										{
											"begin": 9895,
											"end": 9901,
											"name": "DUP2"
										},
										{
											"begin": 9895,
											"end": 9901,
											"name": "AND"
										},
										{
											"begin": 9895,
											"end": 9917,
											"name": "SWAP2"
										},
										{
											"begin": 9895,
											"end": 9917,
											"name": "AND"
										},
										{
											"begin": 9895,
											"end": 9917,
											"name": "EQ"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "PUSH [tag]",
											"value": "99"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "JUMPI"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "DUP1"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "MLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "DUP2"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "MSTORE"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "DUP3"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "ADD"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "DUP2"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "SWAP1"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "MSTORE"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "PUSH",
											"value": "24"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "DUP3"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "ADD"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "MSTORE"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "PUSH",
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "PUSH",
											"value": "44"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "DUP3"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "ADD"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "MSTORE"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "SWAP1"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "MLOAD"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "SWAP1"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "DUP2"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "SWAP1"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "SUB"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "PUSH",
											"value": "64"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "ADD"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "SWAP1"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "REVERT"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "tag",
											"value": "99"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "JUMPDEST"
										},
										{
											"begin": 10386,
											"end": 10387,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 10370,
											"end": 10376,
											"name": "DUP1"
										},
										{
											"begin": 10370,
											"end": 10376,
											"name": "SLOAD"
										},
										{
											"begin": 10349,
											"end": 10389,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 10349,
											"end": 10389,
											"name": "MLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 10370,
											"end": 10376,
											"name": "SWAP1"
										},
										{
											"begin": 10370,
											"end": 10376,
											"name": "SWAP2"
										},
										{
											"begin": 10370,
											"end": 10376,
											"name": "AND"
										},
										{
											"begin": 10370,
											"end": 10376,
											"name": "SWAP1"
										},
										{
											"begin": 10349,
											"end": 10389,
											"name": "PUSH",
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 10349,
											"end": 10389,
											"name": "SWAP1"
										},
										{
											"begin": 10386,
											"end": 10387,
											"name": "DUP4"
										},
										{
											"begin": 10386,
											"end": 10387,
											"name": "SWAP1"
										},
										{
											"begin": 10349,
											"end": 10389,
											"name": "LOG3"
										},
										{
											"begin": 10412,
											"end": 10413,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 10395,
											"end": 10414,
											"name": "DUP1"
										},
										{
											"begin": 10395,
											"end": 10414,
											"name": "SLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT"
										},
										{
											"begin": 10395,
											"end": 10414,
											"name": "AND"
										},
										{
											"begin": 10395,
											"end": 10414,
											"name": "SWAP1"
										},
										{
											"begin": 10395,
											"end": 10414,
											"name": "SSTORE"
										},
										{
											"begin": 10292,
											"end": 10419,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 11569,
											"end": 11646,
											"name": "tag",
											"value": "47"
										},
										{
											"begin": 11569,
											"end": 11646,
											"name": "JUMPDEST"
										},
										{
											"begin": 11612,
											"end": 11619,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 11634,
											"end": 11641,
											"name": "PUSH [tag]",
											"value": "102"
										},
										{
											"begin": 11634,
											"end": 11639,
											"name": "PUSH [tag]",
											"value": "49"
										},
										{
											"begin": 11634,
											"end": 11641,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 11634,
											"end": 11641,
											"name": "tag",
											"value": "102"
										},
										{
											"begin": 11634,
											"end": 11641,
											"name": "JUMPDEST"
										},
										{
											"begin": 11627,
											"end": 11641,
											"name": "SWAP1"
										},
										{
											"begin": 11627,
											"end": 11641,
											"name": "POP"
										},
										{
											"begin": 11569,
											"end": 11646,
											"name": "SWAP1"
										},
										{
											"begin": 11569,
											"end": 11646,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 9709,
											"end": 9780,
											"name": "tag",
											"value": "49"
										},
										{
											"begin": 9709,
											"end": 9780,
											"name": "JUMPDEST"
										},
										{
											"begin": 9747,
											"end": 9754,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 9769,
											"end": 9775,
											"name": "SLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 9769,
											"end": 9775,
											"name": "AND"
										},
										{
											"begin": 9709,
											"end": 9780,
											"name": "SWAP1"
										},
										{
											"begin": 9709,
											"end": 9780,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 11829,
											"end": 11910,
											"name": "tag",
											"value": "51"
										},
										{
											"begin": 11829,
											"end": 11910,
											"name": "JUMPDEST"
										},
										{
											"begin": 11898,
											"end": 11905,
											"name": "PUSH",
											"value": "5"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "DUP1"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "SLOAD"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "DUP1"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "MLOAD"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "PUSH",
											"value": "1F"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "DUP9"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "AND"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "ISZERO"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "MUL"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "ADD"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "SWAP1"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "SWAP6"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "AND"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "SWAP5"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "SWAP1"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "SWAP5"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "DIV"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "SWAP4"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "DUP5"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "ADD"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "DUP2"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "SWAP1"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "DIV"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "DUP2"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "MUL"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "DUP3"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "ADD"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "DUP2"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "ADD"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "SWAP1"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "SWAP3"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "MSTORE"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "DUP3"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "DUP2"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "MSTORE"
										},
										{
											"begin": 11870,
											"end": 11883,
											"name": "PUSH",
											"value": "60"
										},
										{
											"begin": 11870,
											"end": 11883,
											"name": "SWAP4"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "SWAP1"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "SWAP3"
										},
										{
											"begin": 11898,
											"end": 11905,
											"name": "SWAP1"
										},
										{
											"begin": 11898,
											"end": 11905,
											"name": "SWAP2"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "DUP4"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "ADD"
										},
										{
											"begin": 11898,
											"end": 11905,
											"name": "DUP3"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "DUP3"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "DUP1"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "ISZERO"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "PUSH [tag]",
											"value": "72"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "JUMPI"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "DUP1"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "PUSH",
											"value": "1F"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "LT"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "PUSH [tag]",
											"value": "73"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "JUMPI"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "DUP1"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "DUP4"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "SLOAD"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "DIV"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "MUL"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "DUP4"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "MSTORE"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "SWAP2"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "ADD"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "SWAP2"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "PUSH [tag]",
											"value": "72"
										},
										{
											"begin": 11891,
											"end": 11905,
											"name": "JUMP"
										},
										{
											"begin": 15283,
											"end": 15400,
											"name": "tag",
											"value": "58"
										},
										{
											"begin": 15283,
											"end": 15400,
											"name": "JUMPDEST"
										},
										{
											"begin": 15339,
											"end": 15343,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 9905,
											"end": 9917,
											"name": "PUSH [tag]",
											"value": "109"
										},
										{
											"begin": 9905,
											"end": 9915,
											"name": "PUSH [tag]",
											"value": "78"
										},
										{
											"begin": 9905,
											"end": 9917,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 9905,
											"end": 9917,
											"name": "tag",
											"value": "109"
										},
										{
											"begin": 9905,
											"end": 9917,
											"name": "JUMPDEST"
										},
										{
											"begin": 9895,
											"end": 9901,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 9895,
											"end": 9901,
											"name": "SLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 9895,
											"end": 9901,
											"name": "SWAP1"
										},
										{
											"begin": 9895,
											"end": 9901,
											"name": "DUP2"
										},
										{
											"begin": 9895,
											"end": 9901,
											"name": "AND"
										},
										{
											"begin": 9895,
											"end": 9917,
											"name": "SWAP2"
										},
										{
											"begin": 9895,
											"end": 9917,
											"name": "AND"
										},
										{
											"begin": 9895,
											"end": 9917,
											"name": "EQ"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "PUSH [tag]",
											"value": "110"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "JUMPI"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "DUP1"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "MLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "DUP2"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "MSTORE"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "DUP3"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "ADD"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "DUP2"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "SWAP1"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "MSTORE"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "PUSH",
											"value": "24"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "DUP3"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "ADD"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "MSTORE"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "PUSH",
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "PUSH",
											"value": "44"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "DUP3"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "ADD"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "MSTORE"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "SWAP1"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "MLOAD"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "SWAP1"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "DUP2"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "SWAP1"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "SUB"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "PUSH",
											"value": "64"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "ADD"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "SWAP1"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "REVERT"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "tag",
											"value": "110"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "JUMPDEST"
										},
										{
											"begin": 15351,
											"end": 15378,
											"name": "PUSH [tag]",
											"value": "112"
										},
										{
											"begin": 15357,
											"end": 15369,
											"name": "PUSH [tag]",
											"value": "113"
										},
										{
											"begin": 15357,
											"end": 15367,
											"name": "PUSH [tag]",
											"value": "78"
										},
										{
											"begin": 15357,
											"end": 15369,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 15357,
											"end": 15369,
											"name": "tag",
											"value": "113"
										},
										{
											"begin": 15357,
											"end": 15369,
											"name": "JUMPDEST"
										},
										{
											"begin": 15371,
											"end": 15377,
											"name": "DUP4"
										},
										{
											"begin": 15351,
											"end": 15356,
											"name": "PUSH [tag]",
											"value": "114"
										},
										{
											"begin": 15351,
											"end": 15378,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 15351,
											"end": 15378,
											"name": "tag",
											"value": "112"
										},
										{
											"begin": 15351,
											"end": 15378,
											"name": "JUMPDEST"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": 15391,
											"end": 15395,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 15283,
											"end": 15400,
											"name": "SWAP2"
										},
										{
											"begin": 15283,
											"end": 15400,
											"name": "SWAP1"
										},
										{
											"begin": 15283,
											"end": 15400,
											"name": "POP"
										},
										{
											"begin": 15283,
											"end": 15400,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 14844,
											"end": 15093,
											"name": "tag",
											"value": "61"
										},
										{
											"begin": 14844,
											"end": 15093,
											"name": "JUMPDEST"
										},
										{
											"begin": 14929,
											"end": 14933,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 14941,
											"end": 15071,
											"name": "PUSH [tag]",
											"value": "76"
										},
										{
											"begin": 14950,
											"end": 14962,
											"name": "PUSH [tag]",
											"value": "117"
										},
										{
											"begin": 14950,
											"end": 14960,
											"name": "PUSH [tag]",
											"value": "78"
										},
										{
											"begin": 14950,
											"end": 14962,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 14950,
											"end": 14962,
											"name": "tag",
											"value": "117"
										},
										{
											"begin": 14950,
											"end": 14962,
											"name": "JUMPDEST"
										},
										{
											"begin": 14964,
											"end": 14971,
											"name": "DUP5"
										},
										{
											"begin": 14973,
											"end": 15070,
											"name": "PUSH [tag]",
											"value": "86"
										},
										{
											"begin": 15012,
											"end": 15027,
											"name": "DUP6"
										},
										{
											"begin": 14973,
											"end": 15070,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 14973,
											"end": 15070,
											"name": "MLOAD"
										},
										{
											"begin": 14973,
											"end": 15070,
											"name": "DUP1"
										},
										{
											"begin": 14973,
											"end": 15070,
											"name": "PUSH",
											"value": "60"
										},
										{
											"begin": 14973,
											"end": 15070,
											"name": "ADD"
										},
										{
											"begin": 14973,
											"end": 15070,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 14973,
											"end": 15070,
											"name": "MSTORE"
										},
										{
											"begin": 14973,
											"end": 15070,
											"name": "DUP1"
										},
										{
											"begin": 14973,
											"end": 15070,
											"name": "PUSH",
											"value": "26"
										},
										{
											"begin": 14973,
											"end": 15070,
											"name": "DUP2"
										},
										{
											"begin": 14973,
											"end": 15070,
											"name": "MSTORE"
										},
										{
											"begin": 14973,
											"end": 15070,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 14973,
											"end": 15070,
											"name": "ADD"
										},
										{
											"begin": 14973,
											"end": 15070,
											"name": "PUSH data",
											"value": "4D7793548344BF0CD24F5E39D08BF5344A03658A15CCE90706473F31CFF78563"
										},
										{
											"begin": 14973,
											"end": 15070,
											"name": "PUSH",
											"value": "26"
										},
										{
											"begin": 14973,
											"end": 15070,
											"name": "SWAP2"
										},
										{
											"begin": 14973,
											"end": 15070,
											"name": "CODECOPY"
										},
										{
											"begin": 14973,
											"end": 14984,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": 14973,
											"end": 14998,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 14985,
											"end": 14997,
											"name": "PUSH [tag]",
											"value": "119"
										},
										{
											"begin": 14985,
											"end": 14995,
											"name": "PUSH [tag]",
											"value": "78"
										},
										{
											"begin": 14985,
											"end": 14997,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 14985,
											"end": 14997,
											"name": "tag",
											"value": "119"
										},
										{
											"begin": 14985,
											"end": 14997,
											"name": "JUMPDEST"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 14973,
											"end": 14998,
											"name": "SWAP1"
										},
										{
											"begin": 14973,
											"end": 14998,
											"name": "DUP2"
										},
										{
											"begin": 14973,
											"end": 14998,
											"name": "AND"
										},
										{
											"begin": 14973,
											"end": 14998,
											"name": "DUP3"
										},
										{
											"begin": 14973,
											"end": 14998,
											"name": "MSTORE"
										},
										{
											"begin": 14973,
											"end": 14998,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 14973,
											"end": 14998,
											"name": "DUP1"
										},
										{
											"begin": 14973,
											"end": 14998,
											"name": "DUP4"
										},
										{
											"begin": 14973,
											"end": 14998,
											"name": "ADD"
										},
										{
											"begin": 14973,
											"end": 14998,
											"name": "SWAP4"
										},
										{
											"begin": 14973,
											"end": 14998,
											"name": "SWAP1"
										},
										{
											"begin": 14973,
											"end": 14998,
											"name": "SWAP4"
										},
										{
											"begin": 14973,
											"end": 14998,
											"name": "MSTORE"
										},
										{
											"begin": 14973,
											"end": 14998,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 14973,
											"end": 14998,
											"name": "SWAP2"
										},
										{
											"begin": 14973,
											"end": 14998,
											"name": "DUP3"
										},
										{
											"begin": 14973,
											"end": 14998,
											"name": "ADD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 14973,
											"end": 14998,
											"name": "SWAP1"
										},
										{
											"begin": 14973,
											"end": 14998,
											"name": "DUP2"
										},
										{
											"begin": 14973,
											"end": 14998,
											"name": "KECCAK256"
										},
										{
											"begin": 14973,
											"end": 15007,
											"name": "SWAP2"
										},
										{
											"begin": 14973,
											"end": 15007,
											"name": "DUP14"
										},
										{
											"begin": 14973,
											"end": 15007,
											"name": "AND"
										},
										{
											"begin": 14973,
											"end": 15007,
											"name": "DUP2"
										},
										{
											"begin": 14973,
											"end": 15007,
											"name": "MSTORE"
										},
										{
											"begin": 14973,
											"end": 15007,
											"name": "SWAP3"
										},
										{
											"begin": 14973,
											"end": 15007,
											"name": "MSTORE"
										},
										{
											"begin": 14973,
											"end": 15007,
											"name": "SWAP1"
										},
										{
											"begin": 14973,
											"end": 15007,
											"name": "KECCAK256"
										},
										{
											"begin": 14973,
											"end": 15007,
											"name": "SLOAD"
										},
										{
											"begin": 14973,
											"end": 15007,
											"name": "SWAP2"
										},
										{
											"begin": 14973,
											"end": 15070,
											"name": "SWAP1"
										},
										{
											"begin": 14973,
											"end": 15070,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 14973,
											"end": 15011,
											"name": "PUSH [tag]",
											"value": "88"
										},
										{
											"begin": 14973,
											"end": 15070,
											"name": "AND"
										},
										{
											"begin": 14973,
											"end": 15070,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 12511,
											"end": 12658,
											"name": "tag",
											"value": "64"
										},
										{
											"begin": 12511,
											"end": 12658,
											"name": "JUMPDEST"
										},
										{
											"begin": 12582,
											"end": 12586,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 12594,
											"end": 12636,
											"name": "PUSH [tag]",
											"value": "76"
										},
										{
											"begin": 12604,
											"end": 12616,
											"name": "PUSH [tag]",
											"value": "122"
										},
										{
											"begin": 12604,
											"end": 12614,
											"name": "PUSH [tag]",
											"value": "78"
										},
										{
											"begin": 12604,
											"end": 12616,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 12604,
											"end": 12616,
											"name": "tag",
											"value": "122"
										},
										{
											"begin": 12604,
											"end": 12616,
											"name": "JUMPDEST"
										},
										{
											"begin": 12618,
											"end": 12627,
											"name": "DUP5"
										},
										{
											"begin": 12629,
											"end": 12635,
											"name": "DUP5"
										},
										{
											"begin": 12594,
											"end": 12603,
											"name": "PUSH [tag]",
											"value": "83"
										},
										{
											"begin": 12594,
											"end": 12636,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 12708,
											"end": 12836,
											"name": "tag",
											"value": "67"
										},
										{
											"begin": 12708,
											"end": 12836,
											"name": "JUMPDEST"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 12804,
											"end": 12822,
											"name": "SWAP2"
										},
										{
											"begin": 12804,
											"end": 12822,
											"name": "DUP3"
										},
										{
											"begin": 12804,
											"end": 12822,
											"name": "AND"
										},
										{
											"begin": 12782,
											"end": 12789,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 12804,
											"end": 12822,
											"name": "SWAP1"
										},
										{
											"begin": 12804,
											"end": 12822,
											"name": "DUP2"
										},
										{
											"begin": 12804,
											"end": 12822,
											"name": "MSTORE"
										},
										{
											"begin": 12804,
											"end": 12815,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": 12804,
											"end": 12822,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 12804,
											"end": 12822,
											"name": "SWAP1"
										},
										{
											"begin": 12804,
											"end": 12822,
											"name": "DUP2"
										},
										{
											"begin": 12804,
											"end": 12822,
											"name": "MSTORE"
										},
										{
											"begin": 12804,
											"end": 12822,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 12804,
											"end": 12822,
											"name": "DUP1"
										},
										{
											"begin": 12804,
											"end": 12822,
											"name": "DUP4"
										},
										{
											"begin": 12804,
											"end": 12822,
											"name": "KECCAK256"
										},
										{
											"begin": 12804,
											"end": 12831,
											"name": "SWAP4"
										},
										{
											"begin": 12804,
											"end": 12831,
											"name": "SWAP1"
										},
										{
											"begin": 12804,
											"end": 12831,
											"name": "SWAP5"
										},
										{
											"begin": 12804,
											"end": 12831,
											"name": "AND"
										},
										{
											"begin": 12804,
											"end": 12831,
											"name": "DUP3"
										},
										{
											"begin": 12804,
											"end": 12831,
											"name": "MSTORE"
										},
										{
											"begin": 12804,
											"end": 12831,
											"name": "SWAP2"
										},
										{
											"begin": 12804,
											"end": 12831,
											"name": "SWAP1"
										},
										{
											"begin": 12804,
											"end": 12831,
											"name": "SWAP2"
										},
										{
											"begin": 12804,
											"end": 12831,
											"name": "MSTORE"
										},
										{
											"begin": 12804,
											"end": 12831,
											"name": "KECCAK256"
										},
										{
											"begin": 12804,
											"end": 12831,
											"name": "SLOAD"
										},
										{
											"begin": 12804,
											"end": 12831,
											"name": "SWAP1"
										},
										{
											"begin": 12708,
											"end": 12836,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 10558,
											"end": 10659,
											"name": "tag",
											"value": "70"
										},
										{
											"begin": 10558,
											"end": 10659,
											"name": "JUMPDEST"
										},
										{
											"begin": 9905,
											"end": 9917,
											"name": "PUSH [tag]",
											"value": "125"
										},
										{
											"begin": 9905,
											"end": 9915,
											"name": "PUSH [tag]",
											"value": "78"
										},
										{
											"begin": 9905,
											"end": 9917,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 9905,
											"end": 9917,
											"name": "tag",
											"value": "125"
										},
										{
											"begin": 9905,
											"end": 9917,
											"name": "JUMPDEST"
										},
										{
											"begin": 9895,
											"end": 9901,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 9895,
											"end": 9901,
											"name": "SLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 9895,
											"end": 9901,
											"name": "SWAP1"
										},
										{
											"begin": 9895,
											"end": 9901,
											"name": "DUP2"
										},
										{
											"begin": 9895,
											"end": 9901,
											"name": "AND"
										},
										{
											"begin": 9895,
											"end": 9917,
											"name": "SWAP2"
										},
										{
											"begin": 9895,
											"end": 9917,
											"name": "AND"
										},
										{
											"begin": 9895,
											"end": 9917,
											"name": "EQ"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "PUSH [tag]",
											"value": "126"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "JUMPI"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "DUP1"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "MLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "DUP2"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "MSTORE"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "DUP3"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "ADD"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "DUP2"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "SWAP1"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "MSTORE"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "PUSH",
											"value": "24"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "DUP3"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "ADD"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "MSTORE"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "PUSH",
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "PUSH",
											"value": "44"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "DUP3"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "ADD"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "MSTORE"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "SWAP1"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "MLOAD"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "SWAP1"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "DUP2"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "SWAP1"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "SUB"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "PUSH",
											"value": "64"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "ADD"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "SWAP1"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "REVERT"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "tag",
											"value": "126"
										},
										{
											"begin": 9887,
											"end": 9954,
											"name": "JUMPDEST"
										},
										{
											"begin": 10626,
											"end": 10654,
											"name": "PUSH [tag]",
											"value": "128"
										},
										{
											"begin": 10645,
											"end": 10653,
											"name": "DUP2"
										},
										{
											"begin": 10626,
											"end": 10644,
											"name": "PUSH [tag]",
											"value": "129"
										},
										{
											"begin": 10626,
											"end": 10654,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 10626,
											"end": 10654,
											"name": "tag",
											"value": "128"
										},
										{
											"begin": 10626,
											"end": 10654,
											"name": "JUMPDEST"
										},
										{
											"begin": 10558,
											"end": 10659,
											"name": "POP"
										},
										{
											"begin": 10558,
											"end": 10659,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 3594,
											"end": 3684,
											"name": "tag",
											"value": "78"
										},
										{
											"begin": 3594,
											"end": 3684,
											"name": "JUMPDEST"
										},
										{
											"begin": 3669,
											"end": 3679,
											"name": "CALLER"
										},
										{
											"begin": 3594,
											"end": 3684,
											"name": "SWAP1"
										},
										{
											"begin": 3594,
											"end": 3684,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 17842,
											"end": 18158,
											"name": "tag",
											"value": "79"
										},
										{
											"begin": 17842,
											"end": 18158,
											"name": "JUMPDEST"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 17931,
											"end": 17950,
											"name": "DUP4"
										},
										{
											"begin": 17931,
											"end": 17950,
											"name": "AND"
										},
										{
											"begin": 17923,
											"end": 17992,
											"name": "PUSH [tag]",
											"value": "132"
										},
										{
											"begin": 17923,
											"end": 17992,
											"name": "JUMPI"
										},
										{
											"begin": 17923,
											"end": 17992,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 17923,
											"end": 17992,
											"name": "MLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": 17923,
											"end": 17992,
											"name": "DUP2"
										},
										{
											"begin": 17923,
											"end": 17992,
											"name": "MSTORE"
										},
										{
											"begin": 17923,
											"end": 17992,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 17923,
											"end": 17992,
											"name": "ADD"
										},
										{
											"begin": 17923,
											"end": 17992,
											"name": "DUP1"
										},
										{
											"begin": 17923,
											"end": 17992,
											"name": "DUP1"
										},
										{
											"begin": 17923,
											"end": 17992,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 17923,
											"end": 17992,
											"name": "ADD"
										},
										{
											"begin": 17923,
											"end": 17992,
											"name": "DUP3"
										},
										{
											"begin": 17923,
											"end": 17992,
											"name": "DUP2"
										},
										{
											"begin": 17923,
											"end": 17992,
											"name": "SUB"
										},
										{
											"begin": 17923,
											"end": 17992,
											"name": "DUP3"
										},
										{
											"begin": 17923,
											"end": 17992,
											"name": "MSTORE"
										},
										{
											"begin": 17923,
											"end": 17992,
											"name": "PUSH",
											"value": "25"
										},
										{
											"begin": 17923,
											"end": 17992,
											"name": "DUP2"
										},
										{
											"begin": 17923,
											"end": 17992,
											"name": "MSTORE"
										},
										{
											"begin": 17923,
											"end": 17992,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 17923,
											"end": 17992,
											"name": "ADD"
										},
										{
											"begin": 17923,
											"end": 17992,
											"name": "DUP1"
										},
										{
											"begin": 17923,
											"end": 17992,
											"name": "PUSH data",
											"value": "B90E34ECB26036A9D936FBEC916AEA585F758DE45994FFFA930F636D387064E1"
										},
										{
											"begin": 17923,
											"end": 17992,
											"name": "PUSH",
											"value": "25"
										},
										{
											"begin": 17923,
											"end": 17992,
											"name": "SWAP2"
										},
										{
											"begin": 17923,
											"end": 17992,
											"name": "CODECOPY"
										},
										{
											"begin": 17923,
											"end": 17992,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 17923,
											"end": 17992,
											"name": "ADD"
										},
										{
											"begin": 17923,
											"end": 17992,
											"name": "SWAP2"
										},
										{
											"begin": 17923,
											"end": 17992,
											"name": "POP"
										},
										{
											"begin": 17923,
											"end": 17992,
											"name": "POP"
										},
										{
											"begin": 17923,
											"end": 17992,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 17923,
											"end": 17992,
											"name": "MLOAD"
										},
										{
											"begin": 17923,
											"end": 17992,
											"name": "DUP1"
										},
										{
											"begin": 17923,
											"end": 17992,
											"name": "SWAP2"
										},
										{
											"begin": 17923,
											"end": 17992,
											"name": "SUB"
										},
										{
											"begin": 17923,
											"end": 17992,
											"name": "SWAP1"
										},
										{
											"begin": 17923,
											"end": 17992,
											"name": "REVERT"
										},
										{
											"begin": 17923,
											"end": 17992,
											"name": "tag",
											"value": "132"
										},
										{
											"begin": 17923,
											"end": 17992,
											"name": "JUMPDEST"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 18006,
											"end": 18027,
											"name": "DUP3"
										},
										{
											"begin": 18006,
											"end": 18027,
											"name": "AND"
										},
										{
											"begin": 17998,
											"end": 18067,
											"name": "PUSH [tag]",
											"value": "133"
										},
										{
											"begin": 17998,
											"end": 18067,
											"name": "JUMPI"
										},
										{
											"begin": 17998,
											"end": 18067,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 17998,
											"end": 18067,
											"name": "MLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": 17998,
											"end": 18067,
											"name": "DUP2"
										},
										{
											"begin": 17998,
											"end": 18067,
											"name": "MSTORE"
										},
										{
											"begin": 17998,
											"end": 18067,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 17998,
											"end": 18067,
											"name": "ADD"
										},
										{
											"begin": 17998,
											"end": 18067,
											"name": "DUP1"
										},
										{
											"begin": 17998,
											"end": 18067,
											"name": "DUP1"
										},
										{
											"begin": 17998,
											"end": 18067,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 17998,
											"end": 18067,
											"name": "ADD"
										},
										{
											"begin": 17998,
											"end": 18067,
											"name": "DUP3"
										},
										{
											"begin": 17998,
											"end": 18067,
											"name": "DUP2"
										},
										{
											"begin": 17998,
											"end": 18067,
											"name": "SUB"
										},
										{
											"begin": 17998,
											"end": 18067,
											"name": "DUP3"
										},
										{
											"begin": 17998,
											"end": 18067,
											"name": "MSTORE"
										},
										{
											"begin": 17998,
											"end": 18067,
											"name": "PUSH",
											"value": "23"
										},
										{
											"begin": 17998,
											"end": 18067,
											"name": "DUP2"
										},
										{
											"begin": 17998,
											"end": 18067,
											"name": "MSTORE"
										},
										{
											"begin": 17998,
											"end": 18067,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 17998,
											"end": 18067,
											"name": "ADD"
										},
										{
											"begin": 17998,
											"end": 18067,
											"name": "DUP1"
										},
										{
											"begin": 17998,
											"end": 18067,
											"name": "PUSH data",
											"value": "65A116172BABF268B5516E0C75685601630A3FBCAF7EA0973EFB15727690727D"
										},
										{
											"begin": 17998,
											"end": 18067,
											"name": "PUSH",
											"value": "23"
										},
										{
											"begin": 17998,
											"end": 18067,
											"name": "SWAP2"
										},
										{
											"begin": 17998,
											"end": 18067,
											"name": "CODECOPY"
										},
										{
											"begin": 17998,
											"end": 18067,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 17998,
											"end": 18067,
											"name": "ADD"
										},
										{
											"begin": 17998,
											"end": 18067,
											"name": "SWAP2"
										},
										{
											"begin": 17998,
											"end": 18067,
											"name": "POP"
										},
										{
											"begin": 17998,
											"end": 18067,
											"name": "POP"
										},
										{
											"begin": 17998,
											"end": 18067,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 17998,
											"end": 18067,
											"name": "MLOAD"
										},
										{
											"begin": 17998,
											"end": 18067,
											"name": "DUP1"
										},
										{
											"begin": 17998,
											"end": 18067,
											"name": "SWAP2"
										},
										{
											"begin": 17998,
											"end": 18067,
											"name": "SUB"
										},
										{
											"begin": 17998,
											"end": 18067,
											"name": "SWAP1"
										},
										{
											"begin": 17998,
											"end": 18067,
											"name": "REVERT"
										},
										{
											"begin": 17998,
											"end": 18067,
											"name": "tag",
											"value": "133"
										},
										{
											"begin": 17998,
											"end": 18067,
											"name": "JUMPDEST"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 18074,
											"end": 18092,
											"name": "DUP1"
										},
										{
											"begin": 18074,
											"end": 18092,
											"name": "DUP5"
										},
										{
											"begin": 18074,
											"end": 18092,
											"name": "AND"
										},
										{
											"begin": 18074,
											"end": 18092,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 18074,
											"end": 18092,
											"name": "DUP2"
										},
										{
											"begin": 18074,
											"end": 18092,
											"name": "DUP2"
										},
										{
											"begin": 18074,
											"end": 18092,
											"name": "MSTORE"
										},
										{
											"begin": 18074,
											"end": 18085,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": 18074,
											"end": 18092,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 18074,
											"end": 18092,
											"name": "SWAP1"
										},
										{
											"begin": 18074,
											"end": 18092,
											"name": "DUP2"
										},
										{
											"begin": 18074,
											"end": 18092,
											"name": "MSTORE"
										},
										{
											"begin": 18074,
											"end": 18092,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 18074,
											"end": 18092,
											"name": "DUP1"
										},
										{
											"begin": 18074,
											"end": 18092,
											"name": "DUP4"
										},
										{
											"begin": 18074,
											"end": 18092,
											"name": "KECCAK256"
										},
										{
											"begin": 18074,
											"end": 18101,
											"name": "SWAP5"
										},
										{
											"begin": 18074,
											"end": 18101,
											"name": "DUP8"
										},
										{
											"begin": 18074,
											"end": 18101,
											"name": "AND"
										},
										{
											"begin": 18074,
											"end": 18101,
											"name": "DUP1"
										},
										{
											"begin": 18074,
											"end": 18101,
											"name": "DUP5"
										},
										{
											"begin": 18074,
											"end": 18101,
											"name": "MSTORE"
										},
										{
											"begin": 18074,
											"end": 18101,
											"name": "SWAP5"
										},
										{
											"begin": 18074,
											"end": 18101,
											"name": "DUP3"
										},
										{
											"begin": 18074,
											"end": 18101,
											"name": "MSTORE"
										},
										{
											"begin": 18074,
											"end": 18101,
											"name": "SWAP2"
										},
										{
											"begin": 18074,
											"end": 18101,
											"name": "DUP3"
										},
										{
											"begin": 18074,
											"end": 18101,
											"name": "SWAP1"
										},
										{
											"begin": 18074,
											"end": 18101,
											"name": "KECCAK256"
										},
										{
											"begin": 18074,
											"end": 18110,
											"name": "DUP6"
										},
										{
											"begin": 18074,
											"end": 18110,
											"name": "SWAP1"
										},
										{
											"begin": 18074,
											"end": 18110,
											"name": "SSTORE"
										},
										{
											"begin": 18121,
											"end": 18153,
											"name": "DUP2"
										},
										{
											"begin": 18121,
											"end": 18153,
											"name": "MLOAD"
										},
										{
											"begin": 18121,
											"end": 18153,
											"name": "DUP6"
										},
										{
											"begin": 18121,
											"end": 18153,
											"name": "DUP2"
										},
										{
											"begin": 18121,
											"end": 18153,
											"name": "MSTORE"
										},
										{
											"begin": 18121,
											"end": 18153,
											"name": "SWAP2"
										},
										{
											"begin": 18121,
											"end": 18153,
											"name": "MLOAD"
										},
										{
											"begin": 18121,
											"end": 18153,
											"name": "PUSH",
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 18121,
											"end": 18153,
											"name": "SWAP3"
										},
										{
											"begin": 18121,
											"end": 18153,
											"name": "DUP2"
										},
										{
											"begin": 18121,
											"end": 18153,
											"name": "SWAP1"
										},
										{
											"begin": 18121,
											"end": 18153,
											"name": "SUB"
										},
										{
											"begin": 18121,
											"end": 18153,
											"name": "SWAP1"
										},
										{
											"begin": 18121,
											"end": 18153,
											"name": "SWAP2"
										},
										{
											"begin": 18121,
											"end": 18153,
											"name": "ADD"
										},
										{
											"begin": 18121,
											"end": 18153,
											"name": "SWAP1"
										},
										{
											"begin": 18121,
											"end": 18153,
											"name": "LOG3"
										},
										{
											"begin": 17842,
											"end": 18158,
											"name": "POP"
										},
										{
											"begin": 17842,
											"end": 18158,
											"name": "POP"
										},
										{
											"begin": 17842,
											"end": 18158,
											"name": "POP"
										},
										{
											"begin": 17842,
											"end": 18158,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 15844,
											"end": 16289,
											"name": "tag",
											"value": "83"
										},
										{
											"begin": 15844,
											"end": 16289,
											"name": "JUMPDEST"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 15937,
											"end": 15957,
											"name": "DUP4"
										},
										{
											"begin": 15937,
											"end": 15957,
											"name": "AND"
										},
										{
											"begin": 15929,
											"end": 16000,
											"name": "PUSH [tag]",
											"value": "135"
										},
										{
											"begin": 15929,
											"end": 16000,
											"name": "JUMPI"
										},
										{
											"begin": 15929,
											"end": 16000,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 15929,
											"end": 16000,
											"name": "MLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": 15929,
											"end": 16000,
											"name": "DUP2"
										},
										{
											"begin": 15929,
											"end": 16000,
											"name": "MSTORE"
										},
										{
											"begin": 15929,
											"end": 16000,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 15929,
											"end": 16000,
											"name": "ADD"
										},
										{
											"begin": 15929,
											"end": 16000,
											"name": "DUP1"
										},
										{
											"begin": 15929,
											"end": 16000,
											"name": "DUP1"
										},
										{
											"begin": 15929,
											"end": 16000,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 15929,
											"end": 16000,
											"name": "ADD"
										},
										{
											"begin": 15929,
											"end": 16000,
											"name": "DUP3"
										},
										{
											"begin": 15929,
											"end": 16000,
											"name": "DUP2"
										},
										{
											"begin": 15929,
											"end": 16000,
											"name": "SUB"
										},
										{
											"begin": 15929,
											"end": 16000,
											"name": "DUP3"
										},
										{
											"begin": 15929,
											"end": 16000,
											"name": "MSTORE"
										},
										{
											"begin": 15929,
											"end": 16000,
											"name": "PUSH",
											"value": "26"
										},
										{
											"begin": 15929,
											"end": 16000,
											"name": "DUP2"
										},
										{
											"begin": 15929,
											"end": 16000,
											"name": "MSTORE"
										},
										{
											"begin": 15929,
											"end": 16000,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 15929,
											"end": 16000,
											"name": "ADD"
										},
										{
											"begin": 15929,
											"end": 16000,
											"name": "DUP1"
										},
										{
											"begin": 15929,
											"end": 16000,
											"name": "PUSH data",
											"value": "B293E5A48D84F689CED6FD174AB1385D0D8115B6322BC7A775C0B613705DDFC"
										},
										{
											"begin": 15929,
											"end": 16000,
											"name": "PUSH",
											"value": "26"
										},
										{
											"begin": 15929,
											"end": 16000,
											"name": "SWAP2"
										},
										{
											"begin": 15929,
											"end": 16000,
											"name": "CODECOPY"
										},
										{
											"begin": 15929,
											"end": 16000,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 15929,
											"end": 16000,
											"name": "ADD"
										},
										{
											"begin": 15929,
											"end": 16000,
											"name": "SWAP2"
										},
										{
											"begin": 15929,
											"end": 16000,
											"name": "POP"
										},
										{
											"begin": 15929,
											"end": 16000,
											"name": "POP"
										},
										{
											"begin": 15929,
											"end": 16000,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 15929,
											"end": 16000,
											"name": "MLOAD"
										},
										{
											"begin": 15929,
											"end": 16000,
											"name": "DUP1"
										},
										{
											"begin": 15929,
											"end": 16000,
											"name": "SWAP2"
										},
										{
											"begin": 15929,
											"end": 16000,
											"name": "SUB"
										},
										{
											"begin": 15929,
											"end": 16000,
											"name": "SWAP1"
										},
										{
											"begin": 15929,
											"end": 16000,
											"name": "REVERT"
										},
										{
											"begin": 15929,
											"end": 16000,
											"name": "tag",
											"value": "135"
										},
										{
											"begin": 15929,
											"end": 16000,
											"name": "JUMPDEST"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 16014,
											"end": 16037,
											"name": "DUP3"
										},
										{
											"begin": 16014,
											"end": 16037,
											"name": "AND"
										},
										{
											"begin": 16006,
											"end": 16078,
											"name": "PUSH [tag]",
											"value": "136"
										},
										{
											"begin": 16006,
											"end": 16078,
											"name": "JUMPI"
										},
										{
											"begin": 16006,
											"end": 16078,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 16006,
											"end": 16078,
											"name": "MLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": 16006,
											"end": 16078,
											"name": "DUP2"
										},
										{
											"begin": 16006,
											"end": 16078,
											"name": "MSTORE"
										},
										{
											"begin": 16006,
											"end": 16078,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 16006,
											"end": 16078,
											"name": "ADD"
										},
										{
											"begin": 16006,
											"end": 16078,
											"name": "DUP1"
										},
										{
											"begin": 16006,
											"end": 16078,
											"name": "DUP1"
										},
										{
											"begin": 16006,
											"end": 16078,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 16006,
											"end": 16078,
											"name": "ADD"
										},
										{
											"begin": 16006,
											"end": 16078,
											"name": "DUP3"
										},
										{
											"begin": 16006,
											"end": 16078,
											"name": "DUP2"
										},
										{
											"begin": 16006,
											"end": 16078,
											"name": "SUB"
										},
										{
											"begin": 16006,
											"end": 16078,
											"name": "DUP3"
										},
										{
											"begin": 16006,
											"end": 16078,
											"name": "MSTORE"
										},
										{
											"begin": 16006,
											"end": 16078,
											"name": "PUSH",
											"value": "24"
										},
										{
											"begin": 16006,
											"end": 16078,
											"name": "DUP2"
										},
										{
											"begin": 16006,
											"end": 16078,
											"name": "MSTORE"
										},
										{
											"begin": 16006,
											"end": 16078,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 16006,
											"end": 16078,
											"name": "ADD"
										},
										{
											"begin": 16006,
											"end": 16078,
											"name": "DUP1"
										},
										{
											"begin": 16006,
											"end": 16078,
											"name": "PUSH data",
											"value": "E2A3458B140D9C3000E70C7BDB249F42DFF71AA4449E6EEEB38A2DE8CFBD8025"
										},
										{
											"begin": 16006,
											"end": 16078,
											"name": "PUSH",
											"value": "24"
										},
										{
											"begin": 16006,
											"end": 16078,
											"name": "SWAP2"
										},
										{
											"begin": 16006,
											"end": 16078,
											"name": "CODECOPY"
										},
										{
											"begin": 16006,
											"end": 16078,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 16006,
											"end": 16078,
											"name": "ADD"
										},
										{
											"begin": 16006,
											"end": 16078,
											"name": "SWAP2"
										},
										{
											"begin": 16006,
											"end": 16078,
											"name": "POP"
										},
										{
											"begin": 16006,
											"end": 16078,
											"name": "POP"
										},
										{
											"begin": 16006,
											"end": 16078,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 16006,
											"end": 16078,
											"name": "MLOAD"
										},
										{
											"begin": 16006,
											"end": 16078,
											"name": "DUP1"
										},
										{
											"begin": 16006,
											"end": 16078,
											"name": "SWAP2"
										},
										{
											"begin": 16006,
											"end": 16078,
											"name": "SUB"
										},
										{
											"begin": 16006,
											"end": 16078,
											"name": "SWAP1"
										},
										{
											"begin": 16006,
											"end": 16078,
											"name": "REVERT"
										},
										{
											"begin": 16006,
											"end": 16078,
											"name": "tag",
											"value": "136"
										},
										{
											"begin": 16006,
											"end": 16078,
											"name": "JUMPDEST"
										},
										{
											"begin": 16105,
											"end": 16177,
											"name": "PUSH [tag]",
											"value": "137"
										},
										{
											"begin": 16127,
											"end": 16133,
											"name": "DUP2"
										},
										{
											"begin": 16105,
											"end": 16177,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 16105,
											"end": 16177,
											"name": "MLOAD"
										},
										{
											"begin": 16105,
											"end": 16177,
											"name": "DUP1"
										},
										{
											"begin": 16105,
											"end": 16177,
											"name": "PUSH",
											"value": "60"
										},
										{
											"begin": 16105,
											"end": 16177,
											"name": "ADD"
										},
										{
											"begin": 16105,
											"end": 16177,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 16105,
											"end": 16177,
											"name": "MSTORE"
										},
										{
											"begin": 16105,
											"end": 16177,
											"name": "DUP1"
										},
										{
											"begin": 16105,
											"end": 16177,
											"name": "PUSH",
											"value": "27"
										},
										{
											"begin": 16105,
											"end": 16177,
											"name": "DUP2"
										},
										{
											"begin": 16105,
											"end": 16177,
											"name": "MSTORE"
										},
										{
											"begin": 16105,
											"end": 16177,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 16105,
											"end": 16177,
											"name": "ADD"
										},
										{
											"begin": 16105,
											"end": 16177,
											"name": "PUSH data",
											"value": "B5DFC106C4F8E591EC6065F10313DE96224599A8BF0B9B8C6DE8832409A4D04A"
										},
										{
											"begin": 16105,
											"end": 16177,
											"name": "PUSH",
											"value": "27"
										},
										{
											"begin": 16105,
											"end": 16177,
											"name": "SWAP2"
										},
										{
											"begin": 16105,
											"end": 16177,
											"name": "CODECOPY"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 16105,
											"end": 16122,
											"name": "DUP7"
										},
										{
											"begin": 16105,
											"end": 16122,
											"name": "AND"
										},
										{
											"begin": 16105,
											"end": 16122,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 16105,
											"end": 16122,
											"name": "SWAP1"
										},
										{
											"begin": 16105,
											"end": 16122,
											"name": "DUP2"
										},
										{
											"begin": 16105,
											"end": 16122,
											"name": "MSTORE"
										},
										{
											"begin": 16105,
											"end": 16114,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 16105,
											"end": 16122,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 16105,
											"end": 16122,
											"name": "MSTORE"
										},
										{
											"begin": 16105,
											"end": 16122,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 16105,
											"end": 16122,
											"name": "SWAP1"
										},
										{
											"begin": 16105,
											"end": 16122,
											"name": "KECCAK256"
										},
										{
											"begin": 16105,
											"end": 16122,
											"name": "SLOAD"
										},
										{
											"begin": 16105,
											"end": 16122,
											"name": "SWAP2"
										},
										{
											"begin": 16105,
											"end": 16177,
											"name": "SWAP1"
										},
										{
											"begin": 16105,
											"end": 16177,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 16105,
											"end": 16126,
											"name": "PUSH [tag]",
											"value": "88"
										},
										{
											"begin": 16105,
											"end": 16177,
											"name": "AND"
										},
										{
											"begin": 16105,
											"end": 16177,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 16105,
											"end": 16177,
											"name": "tag",
											"value": "137"
										},
										{
											"begin": 16105,
											"end": 16177,
											"name": "JUMPDEST"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 16085,
											"end": 16102,
											"name": "DUP1"
										},
										{
											"begin": 16085,
											"end": 16102,
											"name": "DUP6"
										},
										{
											"begin": 16085,
											"end": 16102,
											"name": "AND"
										},
										{
											"begin": 16085,
											"end": 16102,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 16085,
											"end": 16102,
											"name": "SWAP1"
										},
										{
											"begin": 16085,
											"end": 16102,
											"name": "DUP2"
										},
										{
											"begin": 16085,
											"end": 16102,
											"name": "MSTORE"
										},
										{
											"begin": 16085,
											"end": 16094,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 16085,
											"end": 16102,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 16085,
											"end": 16102,
											"name": "MSTORE"
										},
										{
											"begin": 16085,
											"end": 16102,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 16085,
											"end": 16102,
											"name": "DUP1"
										},
										{
											"begin": 16085,
											"end": 16102,
											"name": "DUP3"
										},
										{
											"begin": 16085,
											"end": 16102,
											"name": "KECCAK256"
										},
										{
											"begin": 16085,
											"end": 16177,
											"name": "SWAP4"
										},
										{
											"begin": 16085,
											"end": 16177,
											"name": "SWAP1"
										},
										{
											"begin": 16085,
											"end": 16177,
											"name": "SWAP4"
										},
										{
											"begin": 16085,
											"end": 16177,
											"name": "SSTORE"
										},
										{
											"begin": 16206,
											"end": 16226,
											"name": "SWAP1"
										},
										{
											"begin": 16206,
											"end": 16226,
											"name": "DUP5"
										},
										{
											"begin": 16206,
											"end": 16226,
											"name": "AND"
										},
										{
											"begin": 16206,
											"end": 16226,
											"name": "DUP2"
										},
										{
											"begin": 16206,
											"end": 16226,
											"name": "MSTORE"
										},
										{
											"begin": 16206,
											"end": 16226,
											"name": "KECCAK256"
										},
										{
											"begin": 16206,
											"end": 16226,
											"name": "SLOAD"
										},
										{
											"begin": 16206,
											"end": 16238,
											"name": "PUSH [tag]",
											"value": "138"
										},
										{
											"begin": 16206,
											"end": 16238,
											"name": "SWAP1"
										},
										{
											"begin": 16231,
											"end": 16237,
											"name": "DUP3"
										},
										{
											"begin": 16206,
											"end": 16238,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 16206,
											"end": 16230,
											"name": "PUSH [tag]",
											"value": "95"
										},
										{
											"begin": 16206,
											"end": 16238,
											"name": "AND"
										},
										{
											"begin": 16206,
											"end": 16238,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 16206,
											"end": 16238,
											"name": "tag",
											"value": "138"
										},
										{
											"begin": 16206,
											"end": 16238,
											"name": "JUMPDEST"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 16183,
											"end": 16203,
											"name": "DUP1"
										},
										{
											"begin": 16183,
											"end": 16203,
											"name": "DUP5"
										},
										{
											"begin": 16183,
											"end": 16203,
											"name": "AND"
										},
										{
											"begin": 16183,
											"end": 16203,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 16183,
											"end": 16203,
											"name": "DUP2"
										},
										{
											"begin": 16183,
											"end": 16203,
											"name": "DUP2"
										},
										{
											"begin": 16183,
											"end": 16203,
											"name": "MSTORE"
										},
										{
											"begin": 16183,
											"end": 16192,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 16183,
											"end": 16203,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 16183,
											"end": 16203,
											"name": "SWAP1"
										},
										{
											"begin": 16183,
											"end": 16203,
											"name": "DUP2"
										},
										{
											"begin": 16183,
											"end": 16203,
											"name": "MSTORE"
										},
										{
											"begin": 16183,
											"end": 16203,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 16183,
											"end": 16203,
											"name": "SWAP2"
										},
										{
											"begin": 16183,
											"end": 16203,
											"name": "DUP3"
										},
										{
											"begin": 16183,
											"end": 16203,
											"name": "SWAP1"
										},
										{
											"begin": 16183,
											"end": 16203,
											"name": "KECCAK256"
										},
										{
											"begin": 16183,
											"end": 16238,
											"name": "SWAP5"
										},
										{
											"begin": 16183,
											"end": 16238,
											"name": "SWAP1"
										},
										{
											"begin": 16183,
											"end": 16238,
											"name": "SWAP5"
										},
										{
											"begin": 16183,
											"end": 16238,
											"name": "SSTORE"
										},
										{
											"begin": 16249,
											"end": 16284,
											"name": "DUP1"
										},
										{
											"begin": 16249,
											"end": 16284,
											"name": "MLOAD"
										},
										{
											"begin": 16249,
											"end": 16284,
											"name": "DUP6"
										},
										{
											"begin": 16249,
											"end": 16284,
											"name": "DUP2"
										},
										{
											"begin": 16249,
											"end": 16284,
											"name": "MSTORE"
										},
										{
											"begin": 16249,
											"end": 16284,
											"name": "SWAP1"
										},
										{
											"begin": 16249,
											"end": 16284,
											"name": "MLOAD"
										},
										{
											"begin": 16183,
											"end": 16203,
											"name": "SWAP2"
										},
										{
											"begin": 16183,
											"end": 16203,
											"name": "SWAP4"
										},
										{
											"begin": 16249,
											"end": 16284,
											"name": "SWAP3"
										},
										{
											"begin": 16249,
											"end": 16284,
											"name": "DUP8"
										},
										{
											"begin": 16249,
											"end": 16284,
											"name": "AND"
										},
										{
											"begin": 16249,
											"end": 16284,
											"name": "SWAP3"
										},
										{
											"begin": 16249,
											"end": 16284,
											"name": "PUSH",
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 16249,
											"end": 16284,
											"name": "SWAP3"
										},
										{
											"begin": 16249,
											"end": 16284,
											"name": "SWAP2"
										},
										{
											"begin": 16249,
											"end": 16284,
											"name": "DUP3"
										},
										{
											"begin": 16249,
											"end": 16284,
											"name": "SWAP1"
										},
										{
											"begin": 16249,
											"end": 16284,
											"name": "SUB"
										},
										{
											"begin": 16249,
											"end": 16284,
											"name": "ADD"
										},
										{
											"begin": 16249,
											"end": 16284,
											"name": "SWAP1"
										},
										{
											"begin": 16249,
											"end": 16284,
											"name": "LOG3"
										},
										{
											"begin": 15844,
											"end": 16289,
											"name": "POP"
										},
										{
											"begin": 15844,
											"end": 16289,
											"name": "POP"
										},
										{
											"begin": 15844,
											"end": 16289,
											"name": "POP"
										},
										{
											"begin": 15844,
											"end": 16289,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 5491,
											"end": 5664,
											"name": "tag",
											"value": "88"
										},
										{
											"begin": 5491,
											"end": 5664,
											"name": "JUMPDEST"
										},
										{
											"begin": 5577,
											"end": 5584,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 5608,
											"end": 5620,
											"name": "DUP2"
										},
										{
											"begin": 5600,
											"end": 5606,
											"name": "DUP5"
										},
										{
											"begin": 5600,
											"end": 5606,
											"name": "DUP5"
										},
										{
											"begin": 5600,
											"end": 5606,
											"name": "GT"
										},
										{
											"begin": 5600,
											"end": 5606,
											"name": "ISZERO"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "PUSH [tag]",
											"value": "140"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "JUMPI"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "MLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "DUP2"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "MSTORE"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "ADD"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "DUP1"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "DUP1"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "ADD"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "DUP3"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "DUP2"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "SUB"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "DUP3"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "MSTORE"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "DUP4"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "DUP2"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "DUP2"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "MLOAD"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "DUP2"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "MSTORE"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "ADD"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "SWAP2"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "POP"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "DUP1"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "MLOAD"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "SWAP1"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "ADD"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "SWAP1"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "DUP1"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "DUP4"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "DUP4"
										},
										{
											"begin": 23,
											"end": 24,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "tag",
											"value": "141"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "JUMPDEST"
										},
										{
											"begin": 33,
											"end": 36,
											"name": "DUP4"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "DUP2"
										},
										{
											"begin": 27,
											"end": 37,
											"name": "LT"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "ISZERO"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "PUSH [tag]",
											"value": "143"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "JUMPI"
										},
										{
											"begin": 90,
											"end": 101,
											"name": "DUP2"
										},
										{
											"begin": 90,
											"end": 101,
											"name": "DUP2"
										},
										{
											"begin": 90,
											"end": 101,
											"name": "ADD"
										},
										{
											"begin": 84,
											"end": 102,
											"name": "MLOAD"
										},
										{
											"begin": 71,
											"end": 82,
											"name": "DUP4"
										},
										{
											"begin": 71,
											"end": 82,
											"name": "DUP3"
										},
										{
											"begin": 71,
											"end": 82,
											"name": "ADD"
										},
										{
											"begin": 64,
											"end": 103,
											"name": "MSTORE"
										},
										{
											"begin": 52,
											"end": 54,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 45,
											"end": 55,
											"name": "ADD"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "PUSH [tag]",
											"value": "141"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "JUMP"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "tag",
											"value": "143"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "JUMPDEST"
										},
										{
											"begin": 12,
											"end": 26,
											"name": "POP"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "POP"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "POP"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "POP"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "SWAP1"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "POP"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "SWAP1"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "DUP2"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "ADD"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "SWAP1"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "PUSH",
											"value": "1F"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "AND"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "DUP1"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "ISZERO"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "PUSH [tag]",
											"value": "144"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "JUMPI"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "DUP1"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "DUP3"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "SUB"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "DUP1"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "MLOAD"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "DUP4"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "SUB"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "EXP"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "SUB"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "NOT"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "AND"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "DUP2"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "MSTORE"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "ADD"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "SWAP2"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "POP"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "tag",
											"value": "144"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "JUMPDEST"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "POP"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "SWAP3"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "POP"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "POP"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "POP"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "MLOAD"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "DUP1"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "SWAP2"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "SUB"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "SWAP1"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "REVERT"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "tag",
											"value": "140"
										},
										{
											"begin": 5592,
											"end": 5621,
											"name": "JUMPDEST"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": 5639,
											"end": 5644,
											"name": "SWAP1"
										},
										{
											"begin": 5639,
											"end": 5644,
											"name": "SUB"
										},
										{
											"begin": 5639,
											"end": 5644,
											"name": "SWAP1"
										},
										{
											"begin": 5491,
											"end": 5664,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 4693,
											"end": 4855,
											"name": "tag",
											"value": "95"
										},
										{
											"begin": 4693,
											"end": 4855,
											"name": "JUMPDEST"
										},
										{
											"begin": 4751,
											"end": 4758,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 4778,
											"end": 4783,
											"name": "DUP3"
										},
										{
											"begin": 4778,
											"end": 4783,
											"name": "DUP3"
										},
										{
											"begin": 4778,
											"end": 4783,
											"name": "ADD"
										},
										{
											"begin": 4797,
											"end": 4803,
											"name": "DUP4"
										},
										{
											"begin": 4797,
											"end": 4803,
											"name": "DUP2"
										},
										{
											"begin": 4797,
											"end": 4803,
											"name": "LT"
										},
										{
											"begin": 4797,
											"end": 4803,
											"name": "ISZERO"
										},
										{
											"begin": 4789,
											"end": 4835,
											"name": "PUSH [tag]",
											"value": "146"
										},
										{
											"begin": 4789,
											"end": 4835,
											"name": "JUMPI"
										},
										{
											"begin": 4789,
											"end": 4835,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 4789,
											"end": 4835,
											"name": "DUP1"
										},
										{
											"begin": 4789,
											"end": 4835,
											"name": "MLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": 4789,
											"end": 4835,
											"name": "DUP2"
										},
										{
											"begin": 4789,
											"end": 4835,
											"name": "MSTORE"
										},
										{
											"begin": 4789,
											"end": 4835,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 4789,
											"end": 4835,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 4789,
											"end": 4835,
											"name": "DUP3"
										},
										{
											"begin": 4789,
											"end": 4835,
											"name": "ADD"
										},
										{
											"begin": 4789,
											"end": 4835,
											"name": "MSTORE"
										},
										{
											"begin": 4789,
											"end": 4835,
											"name": "PUSH",
											"value": "1B"
										},
										{
											"begin": 4789,
											"end": 4835,
											"name": "PUSH",
											"value": "24"
										},
										{
											"begin": 4789,
											"end": 4835,
											"name": "DUP3"
										},
										{
											"begin": 4789,
											"end": 4835,
											"name": "ADD"
										},
										{
											"begin": 4789,
											"end": 4835,
											"name": "MSTORE"
										},
										{
											"begin": 4789,
											"end": 4835,
											"name": "PUSH",
											"value": "536166654D6174683A206164646974696F6E206F766572666C6F770000000000"
										},
										{
											"begin": 4789,
											"end": 4835,
											"name": "PUSH",
											"value": "44"
										},
										{
											"begin": 4789,
											"end": 4835,
											"name": "DUP3"
										},
										{
											"begin": 4789,
											"end": 4835,
											"name": "ADD"
										},
										{
											"begin": 4789,
											"end": 4835,
											"name": "MSTORE"
										},
										{
											"begin": 4789,
											"end": 4835,
											"name": "SWAP1"
										},
										{
											"begin": 4789,
											"end": 4835,
											"name": "MLOAD"
										},
										{
											"begin": 4789,
											"end": 4835,
											"name": "SWAP1"
										},
										{
											"begin": 4789,
											"end": 4835,
											"name": "DUP2"
										},
										{
											"begin": 4789,
											"end": 4835,
											"name": "SWAP1"
										},
										{
											"begin": 4789,
											"end": 4835,
											"name": "SUB"
										},
										{
											"begin": 4789,
											"end": 4835,
											"name": "PUSH",
											"value": "64"
										},
										{
											"begin": 4789,
											"end": 4835,
											"name": "ADD"
										},
										{
											"begin": 4789,
											"end": 4835,
											"name": "SWAP1"
										},
										{
											"begin": 4789,
											"end": 4835,
											"name": "REVERT"
										},
										{
											"begin": 4789,
											"end": 4835,
											"name": "tag",
											"value": "146"
										},
										{
											"begin": 4789,
											"end": 4835,
											"name": "JUMPDEST"
										},
										{
											"begin": 4849,
											"end": 4850,
											"name": "SWAP4"
										},
										{
											"begin": 4693,
											"end": 4855,
											"name": "SWAP3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": 4693,
											"end": 4855,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 16539,
											"end": 16824,
											"name": "tag",
											"value": "114"
										},
										{
											"begin": 16539,
											"end": 16824,
											"name": "JUMPDEST"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 16610,
											"end": 16631,
											"name": "DUP3"
										},
										{
											"begin": 16610,
											"end": 16631,
											"name": "AND"
										},
										{
											"begin": 16602,
											"end": 16668,
											"name": "PUSH [tag]",
											"value": "148"
										},
										{
											"begin": 16602,
											"end": 16668,
											"name": "JUMPI"
										},
										{
											"begin": 16602,
											"end": 16668,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 16602,
											"end": 16668,
											"name": "DUP1"
										},
										{
											"begin": 16602,
											"end": 16668,
											"name": "MLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": 16602,
											"end": 16668,
											"name": "DUP2"
										},
										{
											"begin": 16602,
											"end": 16668,
											"name": "MSTORE"
										},
										{
											"begin": 16602,
											"end": 16668,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 16602,
											"end": 16668,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 16602,
											"end": 16668,
											"name": "DUP3"
										},
										{
											"begin": 16602,
											"end": 16668,
											"name": "ADD"
										},
										{
											"begin": 16602,
											"end": 16668,
											"name": "DUP2"
										},
										{
											"begin": 16602,
											"end": 16668,
											"name": "SWAP1"
										},
										{
											"begin": 16602,
											"end": 16668,
											"name": "MSTORE"
										},
										{
											"begin": 16602,
											"end": 16668,
											"name": "PUSH",
											"value": "24"
										},
										{
											"begin": 16602,
											"end": 16668,
											"name": "DUP3"
										},
										{
											"begin": 16602,
											"end": 16668,
											"name": "ADD"
										},
										{
											"begin": 16602,
											"end": 16668,
											"name": "MSTORE"
										},
										{
											"begin": 16602,
											"end": 16668,
											"name": "PUSH",
											"value": "4E55524132303A206D696E7420746F20746865207A65726F2061646472657373"
										},
										{
											"begin": 16602,
											"end": 16668,
											"name": "PUSH",
											"value": "44"
										},
										{
											"begin": 16602,
											"end": 16668,
											"name": "DUP3"
										},
										{
											"begin": 16602,
											"end": 16668,
											"name": "ADD"
										},
										{
											"begin": 16602,
											"end": 16668,
											"name": "MSTORE"
										},
										{
											"begin": 16602,
											"end": 16668,
											"name": "SWAP1"
										},
										{
											"begin": 16602,
											"end": 16668,
											"name": "MLOAD"
										},
										{
											"begin": 16602,
											"end": 16668,
											"name": "SWAP1"
										},
										{
											"begin": 16602,
											"end": 16668,
											"name": "DUP2"
										},
										{
											"begin": 16602,
											"end": 16668,
											"name": "SWAP1"
										},
										{
											"begin": 16602,
											"end": 16668,
											"name": "SUB"
										},
										{
											"begin": 16602,
											"end": 16668,
											"name": "PUSH",
											"value": "64"
										},
										{
											"begin": 16602,
											"end": 16668,
											"name": "ADD"
										},
										{
											"begin": 16602,
											"end": 16668,
											"name": "SWAP1"
										},
										{
											"begin": 16602,
											"end": 16668,
											"name": "REVERT"
										},
										{
											"begin": 16602,
											"end": 16668,
											"name": "tag",
											"value": "148"
										},
										{
											"begin": 16602,
											"end": 16668,
											"name": "JUMPDEST"
										},
										{
											"begin": 16690,
											"end": 16702,
											"name": "PUSH",
											"value": "3"
										},
										{
											"begin": 16690,
											"end": 16702,
											"name": "SLOAD"
										},
										{
											"begin": 16690,
											"end": 16714,
											"name": "PUSH [tag]",
											"value": "149"
										},
										{
											"begin": 16690,
											"end": 16714,
											"name": "SWAP1"
										},
										{
											"begin": 16707,
											"end": 16713,
											"name": "DUP3"
										},
										{
											"begin": 16690,
											"end": 16714,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 16690,
											"end": 16706,
											"name": "PUSH [tag]",
											"value": "95"
										},
										{
											"begin": 16690,
											"end": 16714,
											"name": "AND"
										},
										{
											"begin": 16690,
											"end": 16714,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 16690,
											"end": 16714,
											"name": "tag",
											"value": "149"
										},
										{
											"begin": 16690,
											"end": 16714,
											"name": "JUMPDEST"
										},
										{
											"begin": 16675,
											"end": 16687,
											"name": "PUSH",
											"value": "3"
										},
										{
											"begin": 16675,
											"end": 16714,
											"name": "SSTORE"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 16741,
											"end": 16759,
											"name": "DUP3"
										},
										{
											"begin": 16741,
											"end": 16759,
											"name": "AND"
										},
										{
											"begin": 16741,
											"end": 16759,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 16741,
											"end": 16759,
											"name": "SWAP1"
										},
										{
											"begin": 16741,
											"end": 16759,
											"name": "DUP2"
										},
										{
											"begin": 16741,
											"end": 16759,
											"name": "MSTORE"
										},
										{
											"begin": 16741,
											"end": 16750,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 16741,
											"end": 16759,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 16741,
											"end": 16759,
											"name": "MSTORE"
										},
										{
											"begin": 16741,
											"end": 16759,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 16741,
											"end": 16759,
											"name": "SWAP1"
										},
										{
											"begin": 16741,
											"end": 16759,
											"name": "KECCAK256"
										},
										{
											"begin": 16741,
											"end": 16759,
											"name": "SLOAD"
										},
										{
											"begin": 16741,
											"end": 16771,
											"name": "PUSH [tag]",
											"value": "150"
										},
										{
											"begin": 16741,
											"end": 16771,
											"name": "SWAP1"
										},
										{
											"begin": 16764,
											"end": 16770,
											"name": "DUP3"
										},
										{
											"begin": 16741,
											"end": 16771,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 16741,
											"end": 16763,
											"name": "PUSH [tag]",
											"value": "95"
										},
										{
											"begin": 16741,
											"end": 16771,
											"name": "AND"
										},
										{
											"begin": 16741,
											"end": 16771,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 16741,
											"end": 16771,
											"name": "tag",
											"value": "150"
										},
										{
											"begin": 16741,
											"end": 16771,
											"name": "JUMPDEST"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 16720,
											"end": 16738,
											"name": "DUP4"
										},
										{
											"begin": 16720,
											"end": 16738,
											"name": "AND"
										},
										{
											"begin": 16720,
											"end": 16738,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 16720,
											"end": 16738,
											"name": "DUP2"
										},
										{
											"begin": 16720,
											"end": 16738,
											"name": "DUP2"
										},
										{
											"begin": 16720,
											"end": 16738,
											"name": "MSTORE"
										},
										{
											"begin": 16720,
											"end": 16729,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 16720,
											"end": 16738,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 16720,
											"end": 16738,
											"name": "SWAP1"
										},
										{
											"begin": 16720,
											"end": 16738,
											"name": "DUP2"
										},
										{
											"begin": 16720,
											"end": 16738,
											"name": "MSTORE"
										},
										{
											"begin": 16720,
											"end": 16738,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 16720,
											"end": 16738,
											"name": "DUP1"
										},
										{
											"begin": 16720,
											"end": 16738,
											"name": "DUP4"
										},
										{
											"begin": 16720,
											"end": 16738,
											"name": "KECCAK256"
										},
										{
											"begin": 16720,
											"end": 16771,
											"name": "SWAP5"
										},
										{
											"begin": 16720,
											"end": 16771,
											"name": "SWAP1"
										},
										{
											"begin": 16720,
											"end": 16771,
											"name": "SWAP5"
										},
										{
											"begin": 16720,
											"end": 16771,
											"name": "SSTORE"
										},
										{
											"begin": 16782,
											"end": 16819,
											"name": "DUP4"
										},
										{
											"begin": 16782,
											"end": 16819,
											"name": "MLOAD"
										},
										{
											"begin": 16782,
											"end": 16819,
											"name": "DUP6"
										},
										{
											"begin": 16782,
											"end": 16819,
											"name": "DUP2"
										},
										{
											"begin": 16782,
											"end": 16819,
											"name": "MSTORE"
										},
										{
											"begin": 16782,
											"end": 16819,
											"name": "SWAP4"
										},
										{
											"begin": 16782,
											"end": 16819,
											"name": "MLOAD"
										},
										{
											"begin": 16720,
											"end": 16738,
											"name": "SWAP3"
										},
										{
											"begin": 16720,
											"end": 16738,
											"name": "SWAP4"
										},
										{
											"begin": 16720,
											"end": 16738,
											"name": "SWAP2"
										},
										{
											"begin": 16720,
											"end": 16738,
											"name": "SWAP3"
										},
										{
											"begin": 16782,
											"end": 16819,
											"name": "PUSH",
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 16782,
											"end": 16819,
											"name": "SWAP3"
										},
										{
											"begin": 16782,
											"end": 16819,
											"name": "DUP2"
										},
										{
											"begin": 16782,
											"end": 16819,
											"name": "SWAP1"
										},
										{
											"begin": 16782,
											"end": 16819,
											"name": "SUB"
										},
										{
											"begin": 16782,
											"end": 16819,
											"name": "SWAP1"
										},
										{
											"begin": 16782,
											"end": 16819,
											"name": "SWAP2"
										},
										{
											"begin": 16782,
											"end": 16819,
											"name": "ADD"
										},
										{
											"begin": 16782,
											"end": 16819,
											"name": "SWAP1"
										},
										{
											"begin": 16782,
											"end": 16819,
											"name": "LOG3"
										},
										{
											"begin": 16539,
											"end": 16824,
											"name": "POP"
										},
										{
											"begin": 16539,
											"end": 16824,
											"name": "POP"
										},
										{
											"begin": 16539,
											"end": 16824,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 10752,
											"end": 10963,
											"name": "tag",
											"value": "129"
										},
										{
											"begin": 10752,
											"end": 10963,
											"name": "JUMPDEST"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 10821,
											"end": 10843,
											"name": "DUP2"
										},
										{
											"begin": 10821,
											"end": 10843,
											"name": "AND"
										},
										{
											"begin": 10813,
											"end": 10886,
											"name": "PUSH [tag]",
											"value": "152"
										},
										{
											"begin": 10813,
											"end": 10886,
											"name": "JUMPI"
										},
										{
											"begin": 10813,
											"end": 10886,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 10813,
											"end": 10886,
											"name": "MLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": 10813,
											"end": 10886,
											"name": "DUP2"
										},
										{
											"begin": 10813,
											"end": 10886,
											"name": "MSTORE"
										},
										{
											"begin": 10813,
											"end": 10886,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 10813,
											"end": 10886,
											"name": "ADD"
										},
										{
											"begin": 10813,
											"end": 10886,
											"name": "DUP1"
										},
										{
											"begin": 10813,
											"end": 10886,
											"name": "DUP1"
										},
										{
											"begin": 10813,
											"end": 10886,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 10813,
											"end": 10886,
											"name": "ADD"
										},
										{
											"begin": 10813,
											"end": 10886,
											"name": "DUP3"
										},
										{
											"begin": 10813,
											"end": 10886,
											"name": "DUP2"
										},
										{
											"begin": 10813,
											"end": 10886,
											"name": "SUB"
										},
										{
											"begin": 10813,
											"end": 10886,
											"name": "DUP3"
										},
										{
											"begin": 10813,
											"end": 10886,
											"name": "MSTORE"
										},
										{
											"begin": 10813,
											"end": 10886,
											"name": "PUSH",
											"value": "26"
										},
										{
											"begin": 10813,
											"end": 10886,
											"name": "DUP2"
										},
										{
											"begin": 10813,
											"end": 10886,
											"name": "MSTORE"
										},
										{
											"begin": 10813,
											"end": 10886,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 10813,
											"end": 10886,
											"name": "ADD"
										},
										{
											"begin": 10813,
											"end": 10886,
											"name": "DUP1"
										},
										{
											"begin": 10813,
											"end": 10886,
											"name": "PUSH data",
											"value": "245F15FF17F551913A7A18385165551503906A406F905AC1C2437281A7CD0CFE"
										},
										{
											"begin": 10813,
											"end": 10886,
											"name": "PUSH",
											"value": "26"
										},
										{
											"begin": 10813,
											"end": 10886,
											"name": "SWAP2"
										},
										{
											"begin": 10813,
											"end": 10886,
											"name": "CODECOPY"
										},
										{
											"begin": 10813,
											"end": 10886,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 10813,
											"end": 10886,
											"name": "ADD"
										},
										{
											"begin": 10813,
											"end": 10886,
											"name": "SWAP2"
										},
										{
											"begin": 10813,
											"end": 10886,
											"name": "POP"
										},
										{
											"begin": 10813,
											"end": 10886,
											"name": "POP"
										},
										{
											"begin": 10813,
											"end": 10886,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 10813,
											"end": 10886,
											"name": "MLOAD"
										},
										{
											"begin": 10813,
											"end": 10886,
											"name": "DUP1"
										},
										{
											"begin": 10813,
											"end": 10886,
											"name": "SWAP2"
										},
										{
											"begin": 10813,
											"end": 10886,
											"name": "SUB"
										},
										{
											"begin": 10813,
											"end": 10886,
											"name": "SWAP1"
										},
										{
											"begin": 10813,
											"end": 10886,
											"name": "REVERT"
										},
										{
											"begin": 10813,
											"end": 10886,
											"name": "tag",
											"value": "152"
										},
										{
											"begin": 10813,
											"end": 10886,
											"name": "JUMPDEST"
										},
										{
											"begin": 10918,
											"end": 10924,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 10918,
											"end": 10924,
											"name": "DUP1"
										},
										{
											"begin": 10918,
											"end": 10924,
											"name": "SLOAD"
										},
										{
											"begin": 10897,
											"end": 10935,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 10897,
											"end": 10935,
											"name": "MLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 10897,
											"end": 10935,
											"name": "DUP1"
										},
										{
											"begin": 10897,
											"end": 10935,
											"name": "DUP6"
										},
										{
											"begin": 10897,
											"end": 10935,
											"name": "AND"
										},
										{
											"begin": 10897,
											"end": 10935,
											"name": "SWAP4"
										},
										{
											"begin": 10918,
											"end": 10924,
											"name": "SWAP3"
										},
										{
											"begin": 10918,
											"end": 10924,
											"name": "AND"
										},
										{
											"begin": 10918,
											"end": 10924,
											"name": "SWAP2"
										},
										{
											"begin": 10897,
											"end": 10935,
											"name": "PUSH",
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 10897,
											"end": 10935,
											"name": "SWAP2"
										},
										{
											"begin": 10897,
											"end": 10935,
											"name": "LOG3"
										},
										{
											"begin": 10941,
											"end": 10947,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 10941,
											"end": 10958,
											"name": "DUP1"
										},
										{
											"begin": 10941,
											"end": 10958,
											"name": "SLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT"
										},
										{
											"begin": 10941,
											"end": 10958,
											"name": "AND"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 10941,
											"end": 10958,
											"name": "SWAP3"
										},
										{
											"begin": 10941,
											"end": 10958,
											"name": "SWAP1"
										},
										{
											"begin": 10941,
											"end": 10958,
											"name": "SWAP3"
										},
										{
											"begin": 10941,
											"end": 10958,
											"name": "AND"
										},
										{
											"begin": 10941,
											"end": 10958,
											"name": "SWAP2"
										},
										{
											"begin": 10941,
											"end": 10958,
											"name": "SWAP1"
										},
										{
											"begin": 10941,
											"end": 10958,
											"name": "SWAP2"
										},
										{
											"begin": 10941,
											"end": 10958,
											"name": "OR"
										},
										{
											"begin": 10941,
											"end": 10958,
											"name": "SWAP1"
										},
										{
											"begin": 10941,
											"end": 10958,
											"name": "SSTORE"
										},
										{
											"begin": 10752,
											"end": 10963,
											"name": "JUMP",
											"value": "[out]"
										}
									],
									".data": {
										"245F15FF17F551913A7A18385165551503906A406F905AC1C2437281A7CD0CFE": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
										"3BE1D828DC33615552F7BF1DF53AB6CBEEABB688C96FC19CE919E80C0F787761": "4e55524132303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365",
										"4D7793548344BF0CD24F5E39D08BF5344A03658A15CCE90706473F31CFF78563": "4e55524132303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
										"65A116172BABF268B5516E0C75685601630A3FBCAF7EA0973EFB15727690727D": "4e55524132303a20617070726f766520746f20746865207a65726f2061646472657373",
										"B293E5A48D84F689CED6FD174AB1385D0D8115B6322BC7A775C0B613705DDFC": "4e55524132303a207472616e736665722066726f6d20746865207a65726f2061646472657373",
										"B5DFC106C4F8E591EC6065F10313DE96224599A8BF0B9B8C6DE8832409A4D04A": "4e55524132303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365",
										"B90E34ECB26036A9D936FBEC916AEA585F758DE45994FFFA930F636D387064E1": "4e55524132303a20617070726f76652066726f6d20746865207a65726f2061646472657373",
										"E2A3458B140D9C3000E70C7BDB249F42DFF71AA4449E6EEEB38A2DE8CFBD8025": "4e55524132303a207472616e7366657220746f20746865207a65726f2061646472657373"
									}
								}
							}
						},
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"getOwner()": "893d20e8",
							"increaseAllowance(address,uint256)": "39509351",
							"mint(uint256)": "a0712d68",
							"name()": "06fdde03",
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"allowance(address,address)\":{\"details\":\"See {NURA20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {NURA20-approve}.   * Requirements:   * - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {NURA20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the token decimals.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller.   * This is an alternative to {approve} that can be used as a mitigation for problems described in {NURA20-approve}.   * Emits an {Approval} event indicating the updated allowance.   * Requirements:   * - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"getOwner()\":{\"details\":\"Returns the bep token owner.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller.   * This is an alternative to {approve} that can be used as a mitigation for problems described in {NURA20-approve}.   * Emits an {Approval} event indicating the updated allowance.   * Requirements:   * - `spender` cannot be the zero address.\"},\"mint(uint256)\":{\"details\":\"Creates `amount` tokens and assigns them to `msg.sender`, increasing the total supply.   * Requirements   * - `msg.sender` must be the token owner\"},\"name()\":{\"details\":\"Returns the token name.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.   * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the token symbol.\"},\"totalSupply()\":{\"details\":\"See {NURA20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {NURA20-transfer}.   * Requirements:   * - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {NURA20-transferFrom}.   * Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {NURA20};   * Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for `sender`'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"TokenA.sol\":\"TokenA\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"TokenA.sol\":{\"keccak256\":\"0x6a62b807d56227170dc97fbecf66276a1e31e1ad63f65b5795e0beaa6d2faa92\",\"urls\":[\"bzz-raw://9e13f876f57144099f5fe6d5c8d2cd3c11567e4f0583fb439b1ea7d628bc80db\",\"dweb:/ipfs/QmabxAXXwy4qiXfzVqfLQjmzSKASTxGxLbdocBvfxp8SVU\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 302,
								"contract": "TokenA.sol:TokenA",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							},
							{
								"astId": 417,
								"contract": "TokenA.sol:TokenA",
								"label": "_balances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 423,
								"contract": "TokenA.sol:TokenA",
								"label": "_allowances",
								"offset": 0,
								"slot": "2",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 425,
								"contract": "TokenA.sol:TokenA",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "3",
								"type": "t_uint256"
							},
							{
								"astId": 427,
								"contract": "TokenA.sol:TokenA",
								"label": "_decimals",
								"offset": 0,
								"slot": "4",
								"type": "t_uint8"
							},
							{
								"astId": 429,
								"contract": "TokenA.sol:TokenA",
								"label": "_symbol",
								"offset": 0,
								"slot": "5",
								"type": "t_string_storage"
							},
							{
								"astId": 431,
								"contract": "TokenA.sol:TokenA",
								"label": "_name",
								"offset": 0,
								"slot": "6",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"methods": {}
					}
				}
			}
		},
		"sources": {
			"TokenA.sol": {
				"ast": {
					"absolutePath": "TokenA.sol",
					"exportedSymbols": {
						"Context": [
							113
						],
						"Ownable": [
							404
						],
						"SafeMath": [
							298
						],
						"TokA": [
							88
						],
						"TokenA": [
							899
						]
					},
					"id": 900,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"0.5",
								".16"
							],
							"nodeType": "PragmaDirective",
							"src": "0:23:0"
						},
						{
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": null,
							"fullyImplemented": false,
							"id": 88,
							"linearizedBaseContracts": [
								88
							],
							"name": "TokA",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": null,
									"documentation": "@dev Returns the amount of tokens in existence.",
									"id": 6,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "130:2:0"
									},
									"returnParameters": {
										"id": 5,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 6,
												"src": "156:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "156:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "155:9:0"
									},
									"scope": 88,
									"src": "110:55:0",
									"stateMutability": "view",
									"superFunction": null,
									"visibility": "external"
								},
								{
									"body": null,
									"documentation": "@dev Returns the token decimals.",
									"id": 11,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 7,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "236:2:0"
									},
									"returnParameters": {
										"id": 10,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 9,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "262:5:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 8,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "262:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "261:7:0"
									},
									"scope": 88,
									"src": "219:50:0",
									"stateMutability": "view",
									"superFunction": null,
									"visibility": "external"
								},
								{
									"body": null,
									"documentation": "@dev Returns the token symbol.",
									"id": 16,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "336:2:0"
									},
									"returnParameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 14,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 16,
												"src": "362:13:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 13,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "362:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "361:15:0"
									},
									"scope": 88,
									"src": "321:56:0",
									"stateMutability": "view",
									"superFunction": null,
									"visibility": "external"
								},
								{
									"body": null,
									"documentation": "@dev Returns the token name.",
									"id": 21,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 17,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "438:2:0"
									},
									"returnParameters": {
										"id": 20,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 19,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 21,
												"src": "464:13:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 18,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "464:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "463:15:0"
									},
									"scope": 88,
									"src": "425:54:0",
									"stateMutability": "view",
									"superFunction": null,
									"visibility": "external"
								},
								{
									"body": null,
									"documentation": "@dev Returns the bep token owner.",
									"id": 26,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getOwner",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 22,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "551:2:0"
									},
									"returnParameters": {
										"id": 25,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 24,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 26,
												"src": "577:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 23,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "577:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "576:9:0"
									},
									"scope": 88,
									"src": "534:52:0",
									"stateMutability": "view",
									"superFunction": null,
									"visibility": "external"
								},
								{
									"body": null,
									"documentation": "@dev Returns the amount of tokens owned by `account`.",
									"id": 33,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 29,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 28,
												"name": "account",
												"nodeType": "VariableDeclaration",
												"scope": 33,
												"src": "680:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 27,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "680:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "679:17:0"
									},
									"returnParameters": {
										"id": 32,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 31,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 33,
												"src": "720:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 30,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "720:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "719:9:0"
									},
									"scope": 88,
									"src": "661:68:0",
									"stateMutability": "view",
									"superFunction": null,
									"visibility": "external"
								},
								{
									"body": null,
									"documentation": "@dev Moves `amount` tokens from the caller's account to `recipient`.\n   * Returns a boolean value indicating whether the operation succeeded.\n   * Emits a {Transfer} event.",
									"id": 42,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 38,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 35,
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 42,
												"src": "951:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 34,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "951:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 37,
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 42,
												"src": "970:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 36,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "970:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "950:35:0"
									},
									"returnParameters": {
										"id": 41,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 40,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 42,
												"src": "1004:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 39,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1004:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1003:6:0"
									},
									"scope": 88,
									"src": "933:77:0",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "external"
								},
								{
									"body": null,
									"documentation": "@dev Returns the remaining number of tokens that `spender` will be\nallowed to spend on behalf of `owner` through {transferFrom}. This is\nzero by default.\n   * This value changes when {approve} or {transferFrom} are called.",
									"id": 51,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 47,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 44,
												"name": "_owner",
												"nodeType": "VariableDeclaration",
												"scope": 51,
												"src": "1288:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 43,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1288:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 46,
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 51,
												"src": "1304:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 45,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1304:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1287:33:0"
									},
									"returnParameters": {
										"id": 50,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 49,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 51,
												"src": "1344:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 48,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1344:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1343:9:0"
									},
									"scope": 88,
									"src": "1269:84:0",
									"stateMutability": "view",
									"superFunction": null,
									"visibility": "external"
								},
								{
									"body": null,
									"documentation": "@dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n   * Returns a boolean value indicating whether the operation succeeded.\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\nthat someone may use both the old and the new allowance by unfortunate\ntransaction ordering. One possible solution to mitigate this race\ncondition is to first reduce the spender's allowance to 0 and set the\ndesired value afterwards:\nhttps://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * Emits an {Approval} event.",
									"id": 60,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 56,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 53,
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 60,
												"src": "1993:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 52,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1993:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 55,
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 60,
												"src": "2010:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 54,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2010:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1992:33:0"
									},
									"returnParameters": {
										"id": 59,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 58,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 60,
												"src": "2044:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 57,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2044:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2043:6:0"
									},
									"scope": 88,
									"src": "1976:74:0",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "external"
								},
								{
									"body": null,
									"documentation": "@dev Moves `amount` tokens from `sender` to `recipient` using the\nallowance mechanism. `amount` is then deducted from the caller's\nallowance.\n   * Returns a boolean value indicating whether the operation succeeded.\n   * Emits a {Transfer} event.",
									"id": 71,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 67,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 62,
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 71,
												"src": "2359:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 61,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2359:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 64,
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 71,
												"src": "2375:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 63,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2375:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 66,
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 71,
												"src": "2394:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 65,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2394:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2358:51:0"
									},
									"returnParameters": {
										"id": 70,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 69,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 71,
												"src": "2428:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 68,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2428:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2427:6:0"
									},
									"scope": 88,
									"src": "2337:97:0",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": "@dev Emitted when `value` tokens are moved from one account (`from`) to\nanother (`to`).\n   * Note that `value` may be zero.",
									"id": 79,
									"name": "Transfer",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 78,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 73,
												"indexed": true,
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 79,
												"src": "2604:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 72,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2604:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 75,
												"indexed": true,
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 79,
												"src": "2626:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 74,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2626:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 77,
												"indexed": false,
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 79,
												"src": "2646:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 76,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2646:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2603:57:0"
									},
									"src": "2589:72:0"
								},
								{
									"anonymous": false,
									"documentation": "@dev Emitted when the allowance of a `spender` for an `owner` is set by\na call to {approve}. `value` is the new allowance.",
									"id": 87,
									"name": "Approval",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 86,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 81,
												"indexed": true,
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 87,
												"src": "2825:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 80,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2825:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 83,
												"indexed": true,
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 87,
												"src": "2848:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 82,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2848:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 85,
												"indexed": false,
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 87,
												"src": "2873:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 84,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2873:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2824:63:0"
									},
									"src": "2810:78:0"
								}
							],
							"scope": 900,
							"src": "25:2865:0"
						},
						{
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": null,
							"fullyImplemented": true,
							"id": 113,
							"linearizedBaseContracts": [
								113
							],
							"name": "Context",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 91,
										"nodeType": "Block",
										"src": "3587:3:0",
										"statements": []
									},
									"documentation": null,
									"id": 92,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 89,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3575:2:0"
									},
									"returnParameters": {
										"id": 90,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3587:0:0"
									},
									"scope": 113,
									"src": "3563:27:0",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 100,
										"nodeType": "Block",
										"src": "3656:28:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"expression": {
														"argumentTypes": null,
														"id": 97,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 914,
														"src": "3669:3:0",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 98,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"referencedDeclaration": null,
													"src": "3669:10:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"functionReturnParameters": 96,
												"id": 99,
												"nodeType": "Return",
												"src": "3662:17:0"
											}
										]
									},
									"documentation": null,
									"id": 101,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 93,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3613:2:0"
									},
									"returnParameters": {
										"id": 96,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 95,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "3639:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 94,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3639:15:0",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3638:17:0"
									},
									"scope": 113,
									"src": "3594:90:0",
									"stateMutability": "view",
									"superFunction": null,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 111,
										"nodeType": "Block",
										"src": "3745:155:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 106,
													"name": "this",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 930,
													"src": "3751:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_Context_$113",
														"typeString": "contract Context"
													}
												},
												"id": 107,
												"nodeType": "ExpressionStatement",
												"src": "3751:4:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"expression": {
														"argumentTypes": null,
														"id": 108,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 914,
														"src": "3887:3:0",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 109,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"referencedDeclaration": null,
													"src": "3887:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 105,
												"id": 110,
												"nodeType": "Return",
												"src": "3880:15:0"
											}
										]
									},
									"documentation": null,
									"id": 112,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 102,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3705:2:0"
									},
									"returnParameters": {
										"id": 105,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 104,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 112,
												"src": "3731:12:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 103,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3731:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3730:14:0"
									},
									"scope": 113,
									"src": "3688:212:0",
									"stateMutability": "view",
									"superFunction": null,
									"visibility": "internal"
								}
							],
							"scope": 900,
							"src": "3392:510:0"
						},
						{
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": "@dev Wrappers over Solidity's arithmetic operations with added overflow\nchecks.\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\nin bugs, because programmers usually assume that an overflow raises an\nerror, which is the standard behavior in high level programming languages.\n`SafeMath` restores this intuition by reverting the transaction when an\noperation overflows.\n * Using this library instead of the unchecked operations eliminates an entire\nclass of bugs, so it's recommended to use it always.",
							"fullyImplemented": true,
							"id": 298,
							"linearizedBaseContracts": [
								298
							],
							"name": "SafeMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 137,
										"nodeType": "Block",
										"src": "4760:95:0",
										"statements": [
											{
												"assignments": [
													123
												],
												"declarations": [
													{
														"constant": false,
														"id": 123,
														"name": "c",
														"nodeType": "VariableDeclaration",
														"scope": 137,
														"src": "4766:9:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 122,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4766:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 127,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 126,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 124,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 115,
														"src": "4778:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"argumentTypes": null,
														"id": 125,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 117,
														"src": "4782:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4778:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4766:17:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 131,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 129,
																"name": "c",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 123,
																"src": "4797:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"argumentTypes": null,
																"id": 130,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 115,
																"src": "4802:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4797:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206164646974696f6e206f766572666c6f77",
															"id": 132,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4805:29:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a",
																"typeString": "literal_string \"SafeMath: addition overflow\""
															},
															"value": "SafeMath: addition overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a",
																"typeString": "literal_string \"SafeMath: addition overflow\""
															}
														],
														"id": 128,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															917,
															918
														],
														"referencedDeclaration": 918,
														"src": "4789:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 133,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4789:46:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 134,
												"nodeType": "ExpressionStatement",
												"src": "4789:46:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 135,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 123,
													"src": "4849:1:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 121,
												"id": 136,
												"nodeType": "Return",
												"src": "4842:8:0"
											}
										]
									},
									"documentation": "@dev Returns the addition of two unsigned integers, reverting on\noverflow.\n   * Counterpart to Solidity's `+` operator.\n   * Requirements:\n- Addition cannot overflow.",
									"id": 138,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 118,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 115,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 138,
												"src": "4706:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 114,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4706:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 117,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 138,
												"src": "4717:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 116,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4717:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4705:22:0"
									},
									"returnParameters": {
										"id": 121,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 120,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 138,
												"src": "4751:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 119,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4751:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4750:9:0"
									},
									"scope": 298,
									"src": "4693:162:0",
									"stateMutability": "pure",
									"superFunction": null,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 153,
										"nodeType": "Block",
										"src": "5166:61:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 148,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 140,
															"src": "5183:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"id": 149,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 142,
															"src": "5186:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a207375627472616374696f6e206f766572666c6f77",
															"id": 150,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5189:32:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862",
																"typeString": "literal_string \"SafeMath: subtraction overflow\""
															},
															"value": "SafeMath: subtraction overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862",
																"typeString": "literal_string \"SafeMath: subtraction overflow\""
															}
														],
														"id": 147,
														"name": "sub",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															154,
															181
														],
														"referencedDeclaration": 181,
														"src": "5179:3:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
														}
													},
													"id": 151,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5179:43:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 146,
												"id": 152,
												"nodeType": "Return",
												"src": "5172:50:0"
											}
										]
									},
									"documentation": "@dev Returns the subtraction of two unsigned integers, reverting on\noverflow (when the result is negative).\n   * Counterpart to Solidity's `-` operator.\n   * Requirements:\n- Subtraction cannot overflow.",
									"id": 154,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 143,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 140,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 154,
												"src": "5112:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 139,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5112:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 142,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 154,
												"src": "5123:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 141,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5123:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5111:22:0"
									},
									"returnParameters": {
										"id": 146,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 145,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 154,
												"src": "5157:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 144,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5157:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5156:9:0"
									},
									"scope": 298,
									"src": "5099:128:0",
									"stateMutability": "pure",
									"superFunction": null,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 180,
										"nodeType": "Block",
										"src": "5586:78:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 168,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 166,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 158,
																"src": "5600:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"argumentTypes": null,
																"id": 167,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 156,
																"src": "5605:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5600:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"id": 169,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 160,
															"src": "5608:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 165,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															917,
															918
														],
														"referencedDeclaration": 918,
														"src": "5592:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 170,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5592:29:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 171,
												"nodeType": "ExpressionStatement",
												"src": "5592:29:0"
											},
											{
												"assignments": [
													173
												],
												"declarations": [
													{
														"constant": false,
														"id": 173,
														"name": "c",
														"nodeType": "VariableDeclaration",
														"scope": 180,
														"src": "5627:9:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 172,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "5627:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 177,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 176,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 174,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 156,
														"src": "5639:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"argumentTypes": null,
														"id": 175,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 158,
														"src": "5643:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5639:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5627:17:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 178,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 173,
													"src": "5658:1:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 164,
												"id": 179,
												"nodeType": "Return",
												"src": "5651:8:0"
											}
										]
									},
									"documentation": "@dev Returns the subtraction of two unsigned integers, reverting with custom message on\noverflow (when the result is negative).\n   * Counterpart to Solidity's `-` operator.\n   * Requirements:\n- Subtraction cannot overflow.",
									"id": 181,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 161,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 156,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "5504:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 155,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5504:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 158,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "5515:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 157,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5515:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 160,
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "5526:26:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 159,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5526:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5503:50:0"
									},
									"returnParameters": {
										"id": 164,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 163,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "5577:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 162,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5577:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5576:9:0"
									},
									"scope": 298,
									"src": "5491:173:0",
									"stateMutability": "pure",
									"superFunction": null,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 214,
										"nodeType": "Block",
										"src": "5951:352:0",
										"statements": [
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 192,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 190,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 183,
														"src": "6167:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 191,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6172:1:0",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "6167:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 196,
												"nodeType": "IfStatement",
												"src": "6163:35:0",
												"trueBody": {
													"id": 195,
													"nodeType": "Block",
													"src": "6175:23:0",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 193,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6190:1:0",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 189,
															"id": 194,
															"nodeType": "Return",
															"src": "6183:8:0"
														}
													]
												}
											},
											{
												"assignments": [
													198
												],
												"declarations": [
													{
														"constant": false,
														"id": 198,
														"name": "c",
														"nodeType": "VariableDeclaration",
														"scope": 214,
														"src": "6204:9:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 197,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "6204:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 202,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 201,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 199,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 183,
														"src": "6216:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"argumentTypes": null,
														"id": 200,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 185,
														"src": "6220:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "6216:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6204:17:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 208,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 206,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"id": 204,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 198,
																	"src": "6235:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"argumentTypes": null,
																	"id": 205,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 183,
																	"src": "6239:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6235:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"argumentTypes": null,
																"id": 207,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 185,
																"src": "6244:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6235:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77",
															"id": 209,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6247:35:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3",
																"typeString": "literal_string \"SafeMath: multiplication overflow\""
															},
															"value": "SafeMath: multiplication overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3",
																"typeString": "literal_string \"SafeMath: multiplication overflow\""
															}
														],
														"id": 203,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															917,
															918
														],
														"referencedDeclaration": 918,
														"src": "6227:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 210,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6227:56:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 211,
												"nodeType": "ExpressionStatement",
												"src": "6227:56:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 212,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 198,
													"src": "6297:1:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 189,
												"id": 213,
												"nodeType": "Return",
												"src": "6290:8:0"
											}
										]
									},
									"documentation": "@dev Returns the multiplication of two unsigned integers, reverting on\noverflow.\n   * Counterpart to Solidity's `*` operator.\n   * Requirements:\n- Multiplication cannot overflow.",
									"id": 215,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mul",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 186,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 183,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 215,
												"src": "5897:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 182,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5897:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 185,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 215,
												"src": "5908:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 184,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5908:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5896:22:0"
									},
									"returnParameters": {
										"id": 189,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 188,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 215,
												"src": "5942:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 187,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5942:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5941:9:0"
									},
									"scope": 298,
									"src": "5884:419:0",
									"stateMutability": "pure",
									"superFunction": null,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 230,
										"nodeType": "Block",
										"src": "6801:57:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 225,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 217,
															"src": "6818:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"id": 226,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 219,
															"src": "6821:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206469766973696f6e206279207a65726f",
															"id": 227,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6824:28:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f",
																"typeString": "literal_string \"SafeMath: division by zero\""
															},
															"value": "SafeMath: division by zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f",
																"typeString": "literal_string \"SafeMath: division by zero\""
															}
														],
														"id": 224,
														"name": "div",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															231,
															258
														],
														"referencedDeclaration": 258,
														"src": "6814:3:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
														}
													},
													"id": 228,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6814:39:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 223,
												"id": 229,
												"nodeType": "Return",
												"src": "6807:46:0"
											}
										]
									},
									"documentation": "@dev Returns the integer division of two unsigned integers. Reverts on\ndivision by zero. The result is rounded towards zero.\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\n`revert` opcode (which leaves remaining gas untouched) while Solidity\nuses an invalid opcode to revert (consuming all remaining gas).\n   * Requirements:\n- The divisor cannot be zero.",
									"id": 231,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 220,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 217,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 231,
												"src": "6747:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 216,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6747:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 219,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 231,
												"src": "6758:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 218,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6758:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "6746:22:0"
									},
									"returnParameters": {
										"id": 223,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 222,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 231,
												"src": "6792:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 221,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6792:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "6791:9:0"
									},
									"scope": 298,
									"src": "6734:124:0",
									"stateMutability": "pure",
									"superFunction": null,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 257,
										"nodeType": "Block",
										"src": "7404:221:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 245,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 243,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 235,
																"src": "7480:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 244,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7484:1:0",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "7480:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"id": 246,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 237,
															"src": "7487:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 242,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															917,
															918
														],
														"referencedDeclaration": 918,
														"src": "7472:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 247,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7472:28:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 248,
												"nodeType": "ExpressionStatement",
												"src": "7472:28:0"
											},
											{
												"assignments": [
													250
												],
												"declarations": [
													{
														"constant": false,
														"id": 250,
														"name": "c",
														"nodeType": "VariableDeclaration",
														"scope": 257,
														"src": "7506:9:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 249,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7506:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 254,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 253,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 251,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 233,
														"src": "7518:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"argumentTypes": null,
														"id": 252,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 235,
														"src": "7522:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7518:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7506:17:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 255,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 250,
													"src": "7619:1:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 241,
												"id": 256,
												"nodeType": "Return",
												"src": "7612:8:0"
											}
										]
									},
									"documentation": "@dev Returns the integer division of two unsigned integers. Reverts with custom message on\ndivision by zero. The result is rounded towards zero.\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\n`revert` opcode (which leaves remaining gas untouched) while Solidity\nuses an invalid opcode to revert (consuming all remaining gas).\n   * Requirements:\n- The divisor cannot be zero.",
									"id": 258,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 238,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 233,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 258,
												"src": "7322:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 232,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7322:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 235,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 258,
												"src": "7333:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 234,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7333:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 237,
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 258,
												"src": "7344:26:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 236,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7344:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "7321:50:0"
									},
									"returnParameters": {
										"id": 241,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 240,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 258,
												"src": "7395:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 239,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7395:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "7394:9:0"
									},
									"scope": 298,
									"src": "7309:316:0",
									"stateMutability": "pure",
									"superFunction": null,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 273,
										"nodeType": "Block",
										"src": "8112:55:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 268,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 260,
															"src": "8129:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"id": 269,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 262,
															"src": "8132:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206d6f64756c6f206279207a65726f",
															"id": 270,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8135:26:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832",
																"typeString": "literal_string \"SafeMath: modulo by zero\""
															},
															"value": "SafeMath: modulo by zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832",
																"typeString": "literal_string \"SafeMath: modulo by zero\""
															}
														],
														"id": 267,
														"name": "mod",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															274,
															297
														],
														"referencedDeclaration": 297,
														"src": "8125:3:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
														}
													},
													"id": 271,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8125:37:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 266,
												"id": 272,
												"nodeType": "Return",
												"src": "8118:44:0"
											}
										]
									},
									"documentation": "@dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\nReverts when dividing by zero.\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\nopcode (which leaves remaining gas untouched) while Solidity uses an\ninvalid opcode to revert (consuming all remaining gas).\n   * Requirements:\n- The divisor cannot be zero.",
									"id": 274,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 263,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 260,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 274,
												"src": "8058:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 259,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8058:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 262,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 274,
												"src": "8069:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 261,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8069:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "8057:22:0"
									},
									"returnParameters": {
										"id": 266,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 265,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 274,
												"src": "8103:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 264,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8103:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "8102:9:0"
									},
									"scope": 298,
									"src": "8045:122:0",
									"stateMutability": "pure",
									"superFunction": null,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 296,
										"nodeType": "Block",
										"src": "8702:58:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 288,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 286,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 278,
																"src": "8716:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 287,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8721:1:0",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "8716:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"id": 289,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 280,
															"src": "8724:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 285,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															917,
															918
														],
														"referencedDeclaration": 918,
														"src": "8708:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 290,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8708:29:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 291,
												"nodeType": "ExpressionStatement",
												"src": "8708:29:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 294,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 292,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 276,
														"src": "8750:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "%",
													"rightExpression": {
														"argumentTypes": null,
														"id": 293,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 278,
														"src": "8754:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8750:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 284,
												"id": 295,
												"nodeType": "Return",
												"src": "8743:12:0"
											}
										]
									},
									"documentation": "@dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\nReverts with custom message when dividing by zero.\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\nopcode (which leaves remaining gas untouched) while Solidity uses an\ninvalid opcode to revert (consuming all remaining gas).\n   * Requirements:\n- The divisor cannot be zero.",
									"id": 297,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 281,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 276,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 297,
												"src": "8620:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 275,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8620:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 278,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 297,
												"src": "8631:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 277,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8631:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 280,
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 297,
												"src": "8642:26:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 279,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "8642:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "8619:50:0"
									},
									"returnParameters": {
										"id": 284,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 283,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 297,
												"src": "8693:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 282,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8693:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "8692:9:0"
									},
									"scope": 298,
									"src": "8607:153:0",
									"stateMutability": "pure",
									"superFunction": null,
									"visibility": "internal"
								}
							],
							"scope": 900,
							"src": "4468:4294:0"
						},
						{
							"baseContracts": [
								{
									"arguments": null,
									"baseName": {
										"contractScope": null,
										"id": 299,
										"name": "Context",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 113,
										"src": "9279:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_Context_$113",
											"typeString": "contract Context"
										}
									},
									"id": 300,
									"nodeType": "InheritanceSpecifier",
									"src": "9279:7:0"
								}
							],
							"contractDependencies": [
								113
							],
							"contractKind": "contract",
							"documentation": "@dev Contract module which provides a basic access control mechanism, where\nthere is an account (an owner) that can be granted exclusive access to\nspecific functions.\n * By default, the owner account will be the one that deploys the contract. This\ncan later be changed with {transferOwnership}.\n * This module is used through inheritance. It will make available the modifier\n`onlyOwner`, which can be applied to your functions to restrict their use to\nthe owner.",
							"fullyImplemented": true,
							"id": 404,
							"linearizedBaseContracts": [
								404,
								113
							],
							"name": "Ownable",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 302,
									"name": "_owner",
									"nodeType": "VariableDeclaration",
									"scope": 404,
									"src": "9291:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 301,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "9291:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"value": null,
									"visibility": "private"
								},
								{
									"anonymous": false,
									"documentation": null,
									"id": 308,
									"name": "OwnershipTransferred",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 307,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 304,
												"indexed": true,
												"name": "previousOwner",
												"nodeType": "VariableDeclaration",
												"scope": 308,
												"src": "9345:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 303,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9345:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 306,
												"indexed": true,
												"name": "newOwner",
												"nodeType": "VariableDeclaration",
												"scope": 308,
												"src": "9376:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 305,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9376:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "9344:57:0"
									},
									"src": "9318:84:0"
								},
								{
									"body": {
										"id": 327,
										"nodeType": "Block",
										"src": "9520:121:0",
										"statements": [
											{
												"assignments": [
													312
												],
												"declarations": [
													{
														"constant": false,
														"id": 312,
														"name": "msgSender",
														"nodeType": "VariableDeclaration",
														"scope": 327,
														"src": "9526:17:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 311,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "9526:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 315,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 313,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 101,
														"src": "9546:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
															"typeString": "function () view returns (address payable)"
														}
													},
													"id": 314,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9546:12:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9526:32:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 318,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 316,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 302,
														"src": "9564:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"id": 317,
														"name": "msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 312,
														"src": "9573:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "9564:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 319,
												"nodeType": "ExpressionStatement",
												"src": "9564:18:0"
											},
											{
												"eventCall": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"hexValue": "30",
																	"id": 322,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9622:1:0",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 321,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9614:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": "address"
															},
															"id": 323,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9614:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"argumentTypes": null,
															"id": 324,
															"name": "msgSender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 312,
															"src": "9626:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 320,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 308,
														"src": "9593:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 325,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9593:43:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 326,
												"nodeType": "EmitStatement",
												"src": "9588:48:0"
											}
										]
									},
									"documentation": "@dev Initializes the contract setting the deployer as the initial owner.",
									"id": 328,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 309,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9508:2:0"
									},
									"returnParameters": {
										"id": 310,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9520:0:0"
									},
									"scope": 404,
									"src": "9496:145:0",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 335,
										"nodeType": "Block",
										"src": "9756:24:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 333,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 302,
													"src": "9769:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 332,
												"id": 334,
												"nodeType": "Return",
												"src": "9762:13:0"
											}
										]
									},
									"documentation": "@dev Returns the address of the current owner.",
									"id": 336,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 329,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9723:2:0"
									},
									"returnParameters": {
										"id": 332,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 331,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 336,
												"src": "9747:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 330,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9747:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "9746:9:0"
									},
									"scope": 404,
									"src": "9709:71:0",
									"stateMutability": "view",
									"superFunction": null,
									"visibility": "public"
								},
								{
									"body": {
										"id": 347,
										"nodeType": "Block",
										"src": "9881:85:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 342,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 339,
																"name": "_owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 302,
																"src": "9895:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"argumentTypes": null,
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 340,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 101,
																	"src": "9905:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
																		"typeString": "function () view returns (address payable)"
																	}
																},
																"id": 341,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9905:12:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "9895:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 343,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9919:34:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 338,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															917,
															918
														],
														"referencedDeclaration": 918,
														"src": "9887:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 344,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9887:67:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 345,
												"nodeType": "ExpressionStatement",
												"src": "9887:67:0"
											},
											{
												"id": 346,
												"nodeType": "PlaceholderStatement",
												"src": "9960:1:0"
											}
										]
									},
									"documentation": "@dev Throws if called by any account other than the owner.",
									"id": 348,
									"name": "onlyOwner",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 337,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9878:2:0"
									},
									"src": "9860:106:0",
									"visibility": "internal"
								},
								{
									"body": {
										"id": 366,
										"nodeType": "Block",
										"src": "10338:81:0",
										"statements": [
											{
												"eventCall": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 354,
															"name": "_owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 302,
															"src": "10370:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"hexValue": "30",
																	"id": 356,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10386:1:0",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 355,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "10378:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": "address"
															},
															"id": 357,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10378:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														],
														"id": 353,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 308,
														"src": "10349:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 358,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10349:40:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 359,
												"nodeType": "EmitStatement",
												"src": "10344:45:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 364,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 360,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 302,
														"src": "10395:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"hexValue": "30",
																"id": 362,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10412:1:0",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 361,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "10404:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": "address"
														},
														"id": 363,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "10404:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"src": "10395:19:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 365,
												"nodeType": "ExpressionStatement",
												"src": "10395:19:0"
											}
										]
									},
									"documentation": "@dev Leaves the contract without owner. It will not be possible to call\n`onlyOwner` functions anymore. Can only be called by the current owner.\n   * NOTE: Renouncing ownership will leave the contract without an owner,\nthereby removing any functionality that is only available to the owner.",
									"id": 367,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": null,
											"id": 351,
											"modifierName": {
												"argumentTypes": null,
												"id": 350,
												"name": "onlyOwner",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 348,
												"src": "10328:9:0",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "10328:9:0"
										}
									],
									"name": "renounceOwnership",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 349,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10318:2:0"
									},
									"returnParameters": {
										"id": 352,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10338:0:0"
									},
									"scope": 404,
									"src": "10292:127:0",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "public"
								},
								{
									"body": {
										"id": 378,
										"nodeType": "Block",
										"src": "10620:39:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 375,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 369,
															"src": "10645:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 374,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 403,
														"src": "10626:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 376,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10626:28:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 377,
												"nodeType": "ExpressionStatement",
												"src": "10626:28:0"
											}
										]
									},
									"documentation": "@dev Transfers ownership of the contract to a new account (`newOwner`).\nCan only be called by the current owner.",
									"id": 379,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": null,
											"id": 372,
											"modifierName": {
												"argumentTypes": null,
												"id": 371,
												"name": "onlyOwner",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 348,
												"src": "10610:9:0",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "10610:9:0"
										}
									],
									"name": "transferOwnership",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 370,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 369,
												"name": "newOwner",
												"nodeType": "VariableDeclaration",
												"scope": 379,
												"src": "10585:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 368,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10585:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "10584:18:0"
									},
									"returnParameters": {
										"id": 373,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10620:0:0"
									},
									"scope": 404,
									"src": "10558:101:0",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "public"
								},
								{
									"body": {
										"id": 402,
										"nodeType": "Block",
										"src": "10807:156:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 389,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 385,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 381,
																"src": "10821:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"hexValue": "30",
																		"id": 387,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10841:1:0",
																		"subdenomination": null,
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 386,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10833:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": "address"
																},
																"id": 388,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10833:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "10821:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
															"id": 390,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10845:40:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															},
															"value": "Ownable: new owner is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															}
														],
														"id": 384,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															917,
															918
														],
														"referencedDeclaration": 918,
														"src": "10813:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 391,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10813:73:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 392,
												"nodeType": "ExpressionStatement",
												"src": "10813:73:0"
											},
											{
												"eventCall": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 394,
															"name": "_owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 302,
															"src": "10918:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 395,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 381,
															"src": "10926:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 393,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 308,
														"src": "10897:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 396,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10897:38:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 397,
												"nodeType": "EmitStatement",
												"src": "10892:43:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 400,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 398,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 302,
														"src": "10941:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"id": 399,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 381,
														"src": "10950:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "10941:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 401,
												"nodeType": "ExpressionStatement",
												"src": "10941:17:0"
											}
										]
									},
									"documentation": "@dev Transfers ownership of the contract to a new account (`newOwner`).",
									"id": 403,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 382,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 381,
												"name": "newOwner",
												"nodeType": "VariableDeclaration",
												"scope": 403,
												"src": "10780:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 380,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10780:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "10779:18:0"
									},
									"returnParameters": {
										"id": 383,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10807:0:0"
									},
									"scope": 404,
									"src": "10752:211:0",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "internal"
								}
							],
							"scope": 900,
							"src": "9259:1706:0"
						},
						{
							"baseContracts": [
								{
									"arguments": null,
									"baseName": {
										"contractScope": null,
										"id": 405,
										"name": "Context",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 113,
										"src": "10986:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_Context_$113",
											"typeString": "contract Context"
										}
									},
									"id": 406,
									"nodeType": "InheritanceSpecifier",
									"src": "10986:7:0"
								},
								{
									"arguments": null,
									"baseName": {
										"contractScope": null,
										"id": 407,
										"name": "TokA",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 88,
										"src": "10996:4:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_TokA_$88",
											"typeString": "contract TokA"
										}
									},
									"id": 408,
									"nodeType": "InheritanceSpecifier",
									"src": "10996:4:0"
								},
								{
									"arguments": null,
									"baseName": {
										"contractScope": null,
										"id": 409,
										"name": "Ownable",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 404,
										"src": "11002:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_Ownable_$404",
											"typeString": "contract Ownable"
										}
									},
									"id": 410,
									"nodeType": "InheritanceSpecifier",
									"src": "11002:7:0"
								}
							],
							"contractDependencies": [
								88,
								113,
								404
							],
							"contractKind": "contract",
							"documentation": null,
							"fullyImplemented": true,
							"id": 899,
							"linearizedBaseContracts": [
								899,
								404,
								88,
								113
							],
							"name": "TokenA",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 413,
									"libraryName": {
										"contractScope": null,
										"id": 411,
										"name": "SafeMath",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 298,
										"src": "11020:8:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_SafeMath_$298",
											"typeString": "library SafeMath"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "11014:27:0",
									"typeName": {
										"id": 412,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "11033:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"constant": false,
									"id": 417,
									"name": "_balances",
									"nodeType": "VariableDeclaration",
									"scope": 899,
									"src": "11045:46:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 416,
										"keyType": {
											"id": 414,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "11054:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "11045:28:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 415,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "11065:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"value": null,
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 423,
									"name": "_allowances",
									"nodeType": "VariableDeclaration",
									"scope": 899,
									"src": "11096:69:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(address => uint256))"
									},
									"typeName": {
										"id": 422,
										"keyType": {
											"id": 418,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "11105:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "11096:49:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(address => uint256))"
										},
										"valueType": {
											"id": 421,
											"keyType": {
												"id": 419,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "11125:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "11116:28:0",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"valueType": {
												"id": 420,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "11136:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"value": null,
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 425,
									"name": "_totalSupply",
									"nodeType": "VariableDeclaration",
									"scope": 899,
									"src": "11170:28:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 424,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "11170:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": null,
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 427,
									"name": "_decimals",
									"nodeType": "VariableDeclaration",
									"scope": 899,
									"src": "11202:23:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 426,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "11202:5:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": null,
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 429,
									"name": "_symbol",
									"nodeType": "VariableDeclaration",
									"scope": 899,
									"src": "11229:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 428,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "11229:6:0",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"value": null,
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 431,
									"name": "_name",
									"nodeType": "VariableDeclaration",
									"scope": 899,
									"src": "11255:20:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 430,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "11255:6:0",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"value": null,
									"visibility": "private"
								},
								{
									"body": {
										"id": 466,
										"nodeType": "Block",
										"src": "11302:212:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 436,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 434,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 431,
														"src": "11308:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"hexValue": "546f6b656e41",
														"id": 435,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "11316:8:0",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_18c40d09d3be00e8c0eafe4f0ffbd938b1824b54b7ac8efe521dcc1be43de891",
															"typeString": "literal_string \"TokenA\""
														},
														"value": "TokenA"
													},
													"src": "11308:16:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 437,
												"nodeType": "ExpressionStatement",
												"src": "11308:16:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 440,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 438,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 429,
														"src": "11330:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"hexValue": "41",
														"id": 439,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "11340:3:0",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_03783fac2efed8fbc9ad443e592ee30e61d65f471140c10ca155e937b435b760",
															"typeString": "literal_string \"A\""
														},
														"value": "A"
													},
													"src": "11330:13:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 441,
												"nodeType": "ExpressionStatement",
												"src": "11330:13:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 444,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 442,
														"name": "_decimals",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 427,
														"src": "11349:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"hexValue": "3138",
														"id": 443,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "11361:2:0",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_18_by_1",
															"typeString": "int_const 18"
														},
														"value": "18"
													},
													"src": "11349:14:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"id": 445,
												"nodeType": "ExpressionStatement",
												"src": "11349:14:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 448,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 446,
														"name": "_totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 425,
														"src": "11369:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"hexValue": "31303030303030303030303030303030303030303030303030",
														"id": 447,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "11384:25:0",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1000000000000000000000000_by_1",
															"typeString": "int_const 1000000000000000000000000"
														},
														"value": "1000000000000000000000000"
													},
													"src": "11369:40:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 449,
												"nodeType": "ExpressionStatement",
												"src": "11369:40:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 455,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"id": 450,
															"name": "_balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 417,
															"src": "11415:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 453,
														"indexExpression": {
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 451,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 914,
																"src": "11425:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 452,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "11425:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "11415:21:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"id": 454,
														"name": "_totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 425,
														"src": "11439:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "11415:36:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 456,
												"nodeType": "ExpressionStatement",
												"src": "11415:36:0"
											},
											{
												"eventCall": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"hexValue": "30",
																	"id": 459,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11480:1:0",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 458,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "11472:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": "address"
															},
															"id": 460,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11472:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 461,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 914,
																"src": "11484:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 462,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "11484:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"argumentTypes": null,
															"id": 463,
															"name": "_totalSupply",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 425,
															"src": "11496:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 457,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 79,
														"src": "11463:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 464,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11463:46:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 465,
												"nodeType": "EmitStatement",
												"src": "11458:51:0"
											}
										]
									},
									"documentation": null,
									"id": 467,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 432,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11292:2:0"
									},
									"returnParameters": {
										"id": 433,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11302:0:0"
									},
									"scope": 899,
									"src": "11281:233:0",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "public"
								},
								{
									"body": {
										"id": 475,
										"nodeType": "Block",
										"src": "11621:25:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 472,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 336,
														"src": "11634:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 473,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11634:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 471,
												"id": 474,
												"nodeType": "Return",
												"src": "11627:14:0"
											}
										]
									},
									"documentation": "@dev Returns the bep token owner.",
									"id": 476,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getOwner",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 468,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11586:2:0"
									},
									"returnParameters": {
										"id": 471,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 470,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 476,
												"src": "11612:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 469,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11612:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "11611:9:0"
									},
									"scope": 899,
									"src": "11569:77:0",
									"stateMutability": "view",
									"superFunction": 26,
									"visibility": "external"
								},
								{
									"body": {
										"id": 483,
										"nodeType": "Block",
										"src": "11750:27:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 481,
													"name": "_decimals",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 427,
													"src": "11763:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"functionReturnParameters": 480,
												"id": 482,
												"nodeType": "Return",
												"src": "11756:16:0"
											}
										]
									},
									"documentation": "@dev Returns the token decimals.",
									"id": 484,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 477,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11717:2:0"
									},
									"returnParameters": {
										"id": 480,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 479,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 484,
												"src": "11743:5:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 478,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "11743:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "11742:7:0"
									},
									"scope": 899,
									"src": "11700:77:0",
									"stateMutability": "view",
									"superFunction": 11,
									"visibility": "external"
								},
								{
									"body": {
										"id": 491,
										"nodeType": "Block",
										"src": "11885:25:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 489,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 429,
													"src": "11898:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 488,
												"id": 490,
												"nodeType": "Return",
												"src": "11891:14:0"
											}
										]
									},
									"documentation": "@dev Returns the token symbol.",
									"id": 492,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 485,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11844:2:0"
									},
									"returnParameters": {
										"id": 488,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 487,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 492,
												"src": "11870:13:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 486,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "11870:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "11869:15:0"
									},
									"scope": 899,
									"src": "11829:81:0",
									"stateMutability": "view",
									"superFunction": 16,
									"visibility": "external"
								},
								{
									"body": {
										"id": 499,
										"nodeType": "Block",
										"src": "12012:23:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 497,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 431,
													"src": "12025:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 496,
												"id": 498,
												"nodeType": "Return",
												"src": "12018:12:0"
											}
										]
									},
									"documentation": "@dev Returns the token name.",
									"id": 500,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 493,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11971:2:0"
									},
									"returnParameters": {
										"id": 496,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 495,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 500,
												"src": "11997:13:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 494,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "11997:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "11996:15:0"
									},
									"scope": 899,
									"src": "11958:77:0",
									"stateMutability": "view",
									"superFunction": 21,
									"visibility": "external"
								},
								{
									"body": {
										"id": 507,
										"nodeType": "Block",
										"src": "12142:30:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 505,
													"name": "_totalSupply",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 425,
													"src": "12155:12:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 504,
												"id": 506,
												"nodeType": "Return",
												"src": "12148:19:0"
											}
										]
									},
									"documentation": "@dev See {NURA20-totalSupply}.",
									"id": 508,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 501,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12107:2:0"
									},
									"returnParameters": {
										"id": 504,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 503,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 508,
												"src": "12133:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 502,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12133:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "12132:9:0"
									},
									"scope": 899,
									"src": "12087:85:0",
									"stateMutability": "view",
									"superFunction": 6,
									"visibility": "external"
								},
								{
									"body": {
										"id": 519,
										"nodeType": "Block",
										"src": "12290:36:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"baseExpression": {
														"argumentTypes": null,
														"id": 515,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 417,
														"src": "12303:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 517,
													"indexExpression": {
														"argumentTypes": null,
														"id": 516,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 510,
														"src": "12313:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "12303:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 514,
												"id": 518,
												"nodeType": "Return",
												"src": "12296:25:0"
											}
										]
									},
									"documentation": "@dev See {NURA20-balanceOf}.",
									"id": 520,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 511,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 510,
												"name": "account",
												"nodeType": "VariableDeclaration",
												"scope": 520,
												"src": "12241:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 509,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12241:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "12240:17:0"
									},
									"returnParameters": {
										"id": 514,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 513,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 520,
												"src": "12281:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 512,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12281:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "12280:9:0"
									},
									"scope": 899,
									"src": "12222:104:0",
									"stateMutability": "view",
									"superFunction": 33,
									"visibility": "external"
								},
								{
									"body": {
										"id": 538,
										"nodeType": "Block",
										"src": "12588:70:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 530,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 101,
																"src": "12604:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
																	"typeString": "function () view returns (address payable)"
																}
															},
															"id": 531,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "12604:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"argumentTypes": null,
															"id": 532,
															"name": "recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 522,
															"src": "12618:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 533,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 524,
															"src": "12629:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 529,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 740,
														"src": "12594:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 534,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12594:42:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 535,
												"nodeType": "ExpressionStatement",
												"src": "12594:42:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"hexValue": "74727565",
													"id": 536,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "12649:4:0",
													"subdenomination": null,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 528,
												"id": 537,
												"nodeType": "Return",
												"src": "12642:11:0"
											}
										]
									},
									"documentation": "@dev See {NURA20-transfer}.\n   * Requirements:\n   * - `recipient` cannot be the zero address.\n- the caller must have a balance of at least `amount`.",
									"id": 539,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 525,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 522,
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 539,
												"src": "12529:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 521,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12529:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 524,
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 539,
												"src": "12548:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 523,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12548:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "12528:35:0"
									},
									"returnParameters": {
										"id": 528,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 527,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 539,
												"src": "12582:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 526,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "12582:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "12581:6:0"
									},
									"scope": 899,
									"src": "12511:147:0",
									"stateMutability": "nonpayable",
									"superFunction": 42,
									"visibility": "external"
								},
								{
									"body": {
										"id": 554,
										"nodeType": "Block",
										"src": "12791:45:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"baseExpression": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"id": 548,
															"name": "_allowances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 423,
															"src": "12804:11:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 550,
														"indexExpression": {
															"argumentTypes": null,
															"id": 549,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 541,
															"src": "12816:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "12804:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 552,
													"indexExpression": {
														"argumentTypes": null,
														"id": 551,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 543,
														"src": "12823:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "12804:27:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 547,
												"id": 553,
												"nodeType": "Return",
												"src": "12797:34:0"
											}
										]
									},
									"documentation": "@dev See {NURA20-allowance}.",
									"id": 555,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 544,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 541,
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 555,
												"src": "12727:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 540,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12727:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 543,
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 555,
												"src": "12742:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 542,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12742:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "12726:32:0"
									},
									"returnParameters": {
										"id": 547,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 546,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 555,
												"src": "12782:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 545,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12782:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "12781:9:0"
									},
									"scope": 899,
									"src": "12708:128:0",
									"stateMutability": "view",
									"superFunction": 51,
									"visibility": "external"
								},
								{
									"body": {
										"id": 573,
										"nodeType": "Block",
										"src": "13032:67:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 565,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 101,
																"src": "13047:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
																	"typeString": "function () view returns (address payable)"
																}
															},
															"id": 566,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "13047:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"argumentTypes": null,
															"id": 567,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 557,
															"src": "13061:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 568,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 559,
															"src": "13070:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 564,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 869,
														"src": "13038:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 569,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "13038:39:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 570,
												"nodeType": "ExpressionStatement",
												"src": "13038:39:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"hexValue": "74727565",
													"id": 571,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "13090:4:0",
													"subdenomination": null,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 563,
												"id": 572,
												"nodeType": "Return",
												"src": "13083:11:0"
											}
										]
									},
									"documentation": "@dev See {NURA20-approve}.\n   * Requirements:\n   * - `spender` cannot be the zero address.",
									"id": 574,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 560,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 557,
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 574,
												"src": "12975:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 556,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12975:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 559,
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 574,
												"src": "12992:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 558,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12992:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "12974:33:0"
									},
									"returnParameters": {
										"id": 563,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 562,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 574,
												"src": "13026:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 561,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "13026:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "13025:6:0"
									},
									"scope": 899,
									"src": "12958:141:0",
									"stateMutability": "nonpayable",
									"superFunction": 60,
									"visibility": "external"
								},
								{
									"body": {
										"id": 609,
										"nodeType": "Block",
										"src": "13629:192:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 586,
															"name": "sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 576,
															"src": "13645:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 587,
															"name": "recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 578,
															"src": "13653:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 588,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 580,
															"src": "13664:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 585,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 740,
														"src": "13635:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 589,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "13635:36:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 590,
												"nodeType": "ExpressionStatement",
												"src": "13635:36:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 592,
															"name": "sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 576,
															"src": "13686:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 593,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 101,
																"src": "13694:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
																	"typeString": "function () view returns (address payable)"
																}
															},
															"id": 594,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "13694:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"id": 602,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 580,
																	"src": "13746:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"argumentTypes": null,
																	"hexValue": "4e55524132303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365",
																	"id": 603,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13754:43:0",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_3be1d828dc33615552f7bf1df53ab6cbeeabb688c96fc19ce919e80c0f787761",
																		"typeString": "literal_string \"NURA20: transfer amount exceeds allowance\""
																	},
																	"value": "NURA20: transfer amount exceeds allowance"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_stringliteral_3be1d828dc33615552f7bf1df53ab6cbeeabb688c96fc19ce919e80c0f787761",
																		"typeString": "literal_string \"NURA20: transfer amount exceeds allowance\""
																	}
																],
																"expression": {
																	"argumentTypes": null,
																	"baseExpression": {
																		"argumentTypes": null,
																		"baseExpression": {
																			"argumentTypes": null,
																			"id": 595,
																			"name": "_allowances",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 423,
																			"src": "13708:11:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																				"typeString": "mapping(address => mapping(address => uint256))"
																			}
																		},
																		"id": 597,
																		"indexExpression": {
																			"argumentTypes": null,
																			"id": 596,
																			"name": "sender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 576,
																			"src": "13720:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "13708:19:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																			"typeString": "mapping(address => uint256)"
																		}
																	},
																	"id": 600,
																	"indexExpression": {
																		"argumentTypes": null,
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 598,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 101,
																			"src": "13728:10:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
																				"typeString": "function () view returns (address payable)"
																			}
																		},
																		"id": 599,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "13728:12:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "13708:33:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 601,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sub",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 181,
																"src": "13708:37:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$bound_to$_t_uint256_$",
																	"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
																}
															},
															"id": 604,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "13708:90:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 591,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 869,
														"src": "13677:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 605,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "13677:122:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 606,
												"nodeType": "ExpressionStatement",
												"src": "13677:122:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"hexValue": "74727565",
													"id": 607,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "13812:4:0",
													"subdenomination": null,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 584,
												"id": 608,
												"nodeType": "Return",
												"src": "13805:11:0"
											}
										]
									},
									"documentation": "@dev See {NURA20-transferFrom}.\n   * Emits an {Approval} event indicating the updated allowance. This is not\nrequired by the EIP. See the note at the beginning of {NURA20};\n   * Requirements:\n- `sender` and `recipient` cannot be the zero address.\n- `sender` must have a balance of at least `amount`.\n- the caller must have allowance for `sender`'s tokens of at least\n`amount`.",
									"id": 610,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 581,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 576,
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 610,
												"src": "13554:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 575,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13554:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 578,
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 610,
												"src": "13570:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 577,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13570:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 580,
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 610,
												"src": "13589:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 579,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13589:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "13553:51:0"
									},
									"returnParameters": {
										"id": 584,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 583,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 610,
												"src": "13623:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 582,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "13623:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "13622:6:0"
									},
									"scope": 899,
									"src": "13532:289:0",
									"stateMutability": "nonpayable",
									"superFunction": 71,
									"visibility": "external"
								},
								{
									"body": {
										"id": 636,
										"nodeType": "Block",
										"src": "14276:111:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 620,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 101,
																"src": "14291:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
																	"typeString": "function () view returns (address payable)"
																}
															},
															"id": 621,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "14291:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"argumentTypes": null,
															"id": 622,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 612,
															"src": "14305:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"id": 630,
																	"name": "addedValue",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 614,
																	"src": "14353:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"argumentTypes": null,
																	"baseExpression": {
																		"argumentTypes": null,
																		"baseExpression": {
																			"argumentTypes": null,
																			"id": 623,
																			"name": "_allowances",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 423,
																			"src": "14314:11:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																				"typeString": "mapping(address => mapping(address => uint256))"
																			}
																		},
																		"id": 626,
																		"indexExpression": {
																			"argumentTypes": null,
																			"arguments": [],
																			"expression": {
																				"argumentTypes": [],
																				"id": 624,
																				"name": "_msgSender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 101,
																				"src": "14326:10:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
																					"typeString": "function () view returns (address payable)"
																				}
																			},
																			"id": 625,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "14326:12:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address_payable",
																				"typeString": "address payable"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "14314:25:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																			"typeString": "mapping(address => uint256)"
																		}
																	},
																	"id": 628,
																	"indexExpression": {
																		"argumentTypes": null,
																		"id": 627,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 612,
																		"src": "14340:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "14314:34:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 629,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "add",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 138,
																"src": "14314:38:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 631,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "14314:50:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 619,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 869,
														"src": "14282:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 632,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "14282:83:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 633,
												"nodeType": "ExpressionStatement",
												"src": "14282:83:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"hexValue": "74727565",
													"id": 634,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "14378:4:0",
													"subdenomination": null,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 618,
												"id": 635,
												"nodeType": "Return",
												"src": "14371:11:0"
											}
										]
									},
									"documentation": "@dev Atomically increases the allowance granted to `spender` by the caller.\n   * This is an alternative to {approve} that can be used as a mitigation for\nproblems described in {NURA20-approve}.\n   * Emits an {Approval} event indicating the updated allowance.\n   * Requirements:\n   * - `spender` cannot be the zero address.",
									"id": 637,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "increaseAllowance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 615,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 612,
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 637,
												"src": "14217:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 611,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14217:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 614,
												"name": "addedValue",
												"nodeType": "VariableDeclaration",
												"scope": 637,
												"src": "14234:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 613,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14234:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "14216:37:0"
									},
									"returnParameters": {
										"id": 618,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 617,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 637,
												"src": "14270:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 616,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "14270:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "14269:6:0"
									},
									"scope": 899,
									"src": "14190:197:0",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "public"
								},
								{
									"body": {
										"id": 664,
										"nodeType": "Block",
										"src": "14935:158:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 647,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 101,
																"src": "14950:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
																	"typeString": "function () view returns (address payable)"
																}
															},
															"id": 648,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "14950:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"argumentTypes": null,
															"id": 649,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 639,
															"src": "14964:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"id": 657,
																	"name": "subtractedValue",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 641,
																	"src": "15012:15:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"argumentTypes": null,
																	"hexValue": "4e55524132303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
																	"id": 658,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "15029:40:0",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_4d7793548344bf0cd24f5e39d08bf5344a03658a15cce90706473f31cff78563",
																		"typeString": "literal_string \"NURA20: decreased allowance below zero\""
																	},
																	"value": "NURA20: decreased allowance below zero"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_stringliteral_4d7793548344bf0cd24f5e39d08bf5344a03658a15cce90706473f31cff78563",
																		"typeString": "literal_string \"NURA20: decreased allowance below zero\""
																	}
																],
																"expression": {
																	"argumentTypes": null,
																	"baseExpression": {
																		"argumentTypes": null,
																		"baseExpression": {
																			"argumentTypes": null,
																			"id": 650,
																			"name": "_allowances",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 423,
																			"src": "14973:11:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																				"typeString": "mapping(address => mapping(address => uint256))"
																			}
																		},
																		"id": 653,
																		"indexExpression": {
																			"argumentTypes": null,
																			"arguments": [],
																			"expression": {
																				"argumentTypes": [],
																				"id": 651,
																				"name": "_msgSender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 101,
																				"src": "14985:10:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
																					"typeString": "function () view returns (address payable)"
																				}
																			},
																			"id": 652,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "14985:12:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address_payable",
																				"typeString": "address payable"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "14973:25:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																			"typeString": "mapping(address => uint256)"
																		}
																	},
																	"id": 655,
																	"indexExpression": {
																		"argumentTypes": null,
																		"id": 654,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 639,
																		"src": "14999:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "14973:34:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 656,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sub",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 181,
																"src": "14973:38:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$bound_to$_t_uint256_$",
																	"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
																}
															},
															"id": 659,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "14973:97:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 646,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 869,
														"src": "14941:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 660,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "14941:130:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 661,
												"nodeType": "ExpressionStatement",
												"src": "14941:130:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"hexValue": "74727565",
													"id": 662,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "15084:4:0",
													"subdenomination": null,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 645,
												"id": 663,
												"nodeType": "Return",
												"src": "15077:11:0"
											}
										]
									},
									"documentation": "@dev Atomically decreases the allowance granted to `spender` by the caller.\n   * This is an alternative to {approve} that can be used as a mitigation for\nproblems described in {NURA20-approve}.\n   * Emits an {Approval} event indicating the updated allowance.\n   * Requirements:\n   * - `spender` cannot be the zero address.\n- `spender` must have allowance for the caller of at least\n`subtractedValue`.",
									"id": 665,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decreaseAllowance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 642,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 639,
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 665,
												"src": "14871:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 638,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14871:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 641,
												"name": "subtractedValue",
												"nodeType": "VariableDeclaration",
												"scope": 665,
												"src": "14888:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 640,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14888:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "14870:42:0"
									},
									"returnParameters": {
										"id": 645,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 644,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 665,
												"src": "14929:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 643,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "14929:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "14928:6:0"
									},
									"scope": 899,
									"src": "14844:249:0",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "public"
								},
								{
									"body": {
										"id": 682,
										"nodeType": "Block",
										"src": "15345:55:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 675,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 101,
																"src": "15357:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
																	"typeString": "function () view returns (address payable)"
																}
															},
															"id": 676,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "15357:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"argumentTypes": null,
															"id": 677,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 667,
															"src": "15371:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 674,
														"name": "_mint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 783,
														"src": "15351:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 678,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "15351:27:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 679,
												"nodeType": "ExpressionStatement",
												"src": "15351:27:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"hexValue": "74727565",
													"id": 680,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "15391:4:0",
													"subdenomination": null,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 673,
												"id": 681,
												"nodeType": "Return",
												"src": "15384:11:0"
											}
										]
									},
									"documentation": "@dev Creates `amount` tokens and assigns them to `msg.sender`, increasing\nthe total supply.\n   * Requirements\n   * - `msg.sender` must be the token owner",
									"id": 683,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": null,
											"id": 670,
											"modifierName": {
												"argumentTypes": null,
												"id": 669,
												"name": "onlyOwner",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 348,
												"src": "15320:9:0",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "15320:9:0"
										}
									],
									"name": "mint",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 668,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 667,
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 683,
												"src": "15297:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 666,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "15297:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "15296:16:0"
									},
									"returnParameters": {
										"id": 673,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 672,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 683,
												"src": "15339:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 671,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "15339:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "15338:6:0"
									},
									"scope": 899,
									"src": "15283:117:0",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "public"
								},
								{
									"body": {
										"id": 739,
										"nodeType": "Block",
										"src": "15923:366:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 697,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 693,
																"name": "sender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 685,
																"src": "15937:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"hexValue": "30",
																		"id": 695,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "15955:1:0",
																		"subdenomination": null,
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 694,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "15947:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": "address"
																},
																"id": 696,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "15947:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "15937:20:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "4e55524132303a207472616e736665722066726f6d20746865207a65726f2061646472657373",
															"id": 698,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "15959:40:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0b293e5a48d84f689ced6fd174ab1385d0d8115b6322bc7a775c0b613705ddfc",
																"typeString": "literal_string \"NURA20: transfer from the zero address\""
															},
															"value": "NURA20: transfer from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0b293e5a48d84f689ced6fd174ab1385d0d8115b6322bc7a775c0b613705ddfc",
																"typeString": "literal_string \"NURA20: transfer from the zero address\""
															}
														],
														"id": 692,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															917,
															918
														],
														"referencedDeclaration": 918,
														"src": "15929:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 699,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "15929:71:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 700,
												"nodeType": "ExpressionStatement",
												"src": "15929:71:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 706,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 702,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 687,
																"src": "16014:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"hexValue": "30",
																		"id": 704,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "16035:1:0",
																		"subdenomination": null,
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 703,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "16027:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": "address"
																},
																"id": 705,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "16027:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "16014:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "4e55524132303a207472616e7366657220746f20746865207a65726f2061646472657373",
															"id": 707,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "16039:38:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_e2a3458b140d9c3000e70c7bdb249f42dff71aa4449e6eeeb38a2de8cfbd8025",
																"typeString": "literal_string \"NURA20: transfer to the zero address\""
															},
															"value": "NURA20: transfer to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_e2a3458b140d9c3000e70c7bdb249f42dff71aa4449e6eeeb38a2de8cfbd8025",
																"typeString": "literal_string \"NURA20: transfer to the zero address\""
															}
														],
														"id": 701,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															917,
															918
														],
														"referencedDeclaration": 918,
														"src": "16006:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 708,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "16006:72:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 709,
												"nodeType": "ExpressionStatement",
												"src": "16006:72:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 720,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"id": 710,
															"name": "_balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 417,
															"src": "16085:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 712,
														"indexExpression": {
															"argumentTypes": null,
															"id": 711,
															"name": "sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 685,
															"src": "16095:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "16085:17:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"id": 717,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 689,
																"src": "16127:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"argumentTypes": null,
																"hexValue": "4e55524132303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365",
																"id": 718,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "16135:41:0",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_b5dfc106c4f8e591ec6065f10313de96224599a8bf0b9b8c6de8832409a4d04a",
																	"typeString": "literal_string \"NURA20: transfer amount exceeds balance\""
																},
																"value": "NURA20: transfer amount exceeds balance"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_stringliteral_b5dfc106c4f8e591ec6065f10313de96224599a8bf0b9b8c6de8832409a4d04a",
																	"typeString": "literal_string \"NURA20: transfer amount exceeds balance\""
																}
															],
															"expression": {
																"argumentTypes": null,
																"baseExpression": {
																	"argumentTypes": null,
																	"id": 713,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 417,
																	"src": "16105:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 715,
																"indexExpression": {
																	"argumentTypes": null,
																	"id": 714,
																	"name": "sender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 685,
																	"src": "16115:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "16105:17:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 716,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sub",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 181,
															"src": "16105:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
															}
														},
														"id": 719,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "16105:72:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "16085:92:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 721,
												"nodeType": "ExpressionStatement",
												"src": "16085:92:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 731,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"id": 722,
															"name": "_balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 417,
															"src": "16183:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 724,
														"indexExpression": {
															"argumentTypes": null,
															"id": 723,
															"name": "recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 687,
															"src": "16193:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "16183:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"id": 729,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 689,
																"src": "16231:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"argumentTypes": null,
																"baseExpression": {
																	"argumentTypes": null,
																	"id": 725,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 417,
																	"src": "16206:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 727,
																"indexExpression": {
																	"argumentTypes": null,
																	"id": 726,
																	"name": "recipient",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 687,
																	"src": "16216:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "16206:20:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 728,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "add",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 138,
															"src": "16206:24:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 730,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "16206:32:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "16183:55:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 732,
												"nodeType": "ExpressionStatement",
												"src": "16183:55:0"
											},
											{
												"eventCall": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 734,
															"name": "sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 685,
															"src": "16258:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 735,
															"name": "recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 687,
															"src": "16266:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 736,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 689,
															"src": "16277:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 733,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 79,
														"src": "16249:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 737,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "16249:35:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 738,
												"nodeType": "EmitStatement",
												"src": "16244:40:0"
											}
										]
									},
									"documentation": "@dev Moves tokens `amount` from `sender` to `recipient`.\n   * This is internal function is equivalent to {transfer}, and can be used to\ne.g. implement automatic token fees, slashing mechanisms, etc.\n   * Emits a {Transfer} event.\n   * Requirements:\n   * - `sender` cannot be the zero address.\n- `recipient` cannot be the zero address.\n- `sender` must have a balance of at least `amount`.",
									"id": 740,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 690,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 685,
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 740,
												"src": "15863:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 684,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15863:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 687,
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 740,
												"src": "15879:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 686,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15879:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 689,
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 740,
												"src": "15898:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 688,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "15898:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "15862:51:0"
									},
									"returnParameters": {
										"id": 691,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "15923:0:0"
									},
									"scope": 899,
									"src": "15844:445:0",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 782,
										"nodeType": "Block",
										"src": "16596:228:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 752,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 748,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 742,
																"src": "16610:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"hexValue": "30",
																		"id": 750,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "16629:1:0",
																		"subdenomination": null,
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 749,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "16621:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": "address"
																},
																"id": 751,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "16621:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "16610:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "4e55524132303a206d696e7420746f20746865207a65726f2061646472657373",
															"id": 753,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "16633:34:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c4f10ebd9c0ed8d7d1586679c147003c136ebf1bb229db0debcc540ad729c895",
																"typeString": "literal_string \"NURA20: mint to the zero address\""
															},
															"value": "NURA20: mint to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c4f10ebd9c0ed8d7d1586679c147003c136ebf1bb229db0debcc540ad729c895",
																"typeString": "literal_string \"NURA20: mint to the zero address\""
															}
														],
														"id": 747,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															917,
															918
														],
														"referencedDeclaration": 918,
														"src": "16602:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 754,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "16602:66:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 755,
												"nodeType": "ExpressionStatement",
												"src": "16602:66:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 761,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 756,
														"name": "_totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 425,
														"src": "16675:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"id": 759,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 744,
																"src": "16707:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"argumentTypes": null,
																"id": 757,
																"name": "_totalSupply",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 425,
																"src": "16690:12:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 758,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "add",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 138,
															"src": "16690:16:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 760,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "16690:24:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "16675:39:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 762,
												"nodeType": "ExpressionStatement",
												"src": "16675:39:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 772,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"id": 763,
															"name": "_balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 417,
															"src": "16720:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 765,
														"indexExpression": {
															"argumentTypes": null,
															"id": 764,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 742,
															"src": "16730:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "16720:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"id": 770,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 744,
																"src": "16764:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"argumentTypes": null,
																"baseExpression": {
																	"argumentTypes": null,
																	"id": 766,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 417,
																	"src": "16741:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 768,
																"indexExpression": {
																	"argumentTypes": null,
																	"id": 767,
																	"name": "account",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 742,
																	"src": "16751:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "16741:18:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 769,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "add",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 138,
															"src": "16741:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 771,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "16741:30:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "16720:51:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 773,
												"nodeType": "ExpressionStatement",
												"src": "16720:51:0"
											},
											{
												"eventCall": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"hexValue": "30",
																	"id": 776,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "16799:1:0",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 775,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "16791:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": "address"
															},
															"id": 777,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "16791:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"argumentTypes": null,
															"id": 778,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 742,
															"src": "16803:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 779,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 744,
															"src": "16812:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 774,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 79,
														"src": "16782:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 780,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "16782:37:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 781,
												"nodeType": "EmitStatement",
												"src": "16777:42:0"
											}
										]
									},
									"documentation": "@dev Creates `amount` tokens and assigns them to `account`, increasing\nthe total supply.\n   * Emits a {Transfer} event with `from` set to the zero address.\n   * Requirements\n   * - `to` cannot be the zero address.",
									"id": 783,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 745,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 742,
												"name": "account",
												"nodeType": "VariableDeclaration",
												"scope": 783,
												"src": "16554:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 741,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16554:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 744,
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 783,
												"src": "16571:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 743,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "16571:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "16553:33:0"
									},
									"returnParameters": {
										"id": 746,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "16596:0:0"
									},
									"scope": 899,
									"src": "16539:285:0",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 826,
										"nodeType": "Block",
										"src": "17176:269:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 795,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 791,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 785,
																"src": "17190:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"hexValue": "30",
																		"id": 793,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "17209:1:0",
																		"subdenomination": null,
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 792,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "17201:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": "address"
																},
																"id": 794,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "17201:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "17190:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "4e55524132303a206275726e2066726f6d20746865207a65726f2061646472657373",
															"id": 796,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "17213:36:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ecc1cdc76ecbf5c3db28528a24ec4cb90f0342607a222281230d47b177c3429c",
																"typeString": "literal_string \"NURA20: burn from the zero address\""
															},
															"value": "NURA20: burn from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ecc1cdc76ecbf5c3db28528a24ec4cb90f0342607a222281230d47b177c3429c",
																"typeString": "literal_string \"NURA20: burn from the zero address\""
															}
														],
														"id": 790,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															917,
															918
														],
														"referencedDeclaration": 918,
														"src": "17182:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 797,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "17182:68:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 798,
												"nodeType": "ExpressionStatement",
												"src": "17182:68:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 809,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"id": 799,
															"name": "_balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 417,
															"src": "17257:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 801,
														"indexExpression": {
															"argumentTypes": null,
															"id": 800,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 785,
															"src": "17267:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "17257:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"id": 806,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 787,
																"src": "17301:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"argumentTypes": null,
																"hexValue": "4e55524132303a206275726e20616d6f756e7420657863656564732062616c616e6365",
																"id": 807,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "17309:37:0",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_14a7613446f929bae61a67bebb93a8ed6e9f4663a3a3417ddce860dbe03d7cc1",
																	"typeString": "literal_string \"NURA20: burn amount exceeds balance\""
																},
																"value": "NURA20: burn amount exceeds balance"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_stringliteral_14a7613446f929bae61a67bebb93a8ed6e9f4663a3a3417ddce860dbe03d7cc1",
																	"typeString": "literal_string \"NURA20: burn amount exceeds balance\""
																}
															],
															"expression": {
																"argumentTypes": null,
																"baseExpression": {
																	"argumentTypes": null,
																	"id": 802,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 417,
																	"src": "17278:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 804,
																"indexExpression": {
																	"argumentTypes": null,
																	"id": 803,
																	"name": "account",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 785,
																	"src": "17288:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "17278:18:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 805,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sub",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 181,
															"src": "17278:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
															}
														},
														"id": 808,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "17278:69:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "17257:90:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 810,
												"nodeType": "ExpressionStatement",
												"src": "17257:90:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 816,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 811,
														"name": "_totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 425,
														"src": "17353:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"id": 814,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 787,
																"src": "17385:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"argumentTypes": null,
																"id": 812,
																"name": "_totalSupply",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 425,
																"src": "17368:12:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 813,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sub",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 154,
															"src": "17368:16:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 815,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "17368:24:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "17353:39:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 817,
												"nodeType": "ExpressionStatement",
												"src": "17353:39:0"
											},
											{
												"eventCall": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 819,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 785,
															"src": "17412:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"hexValue": "30",
																	"id": 821,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "17429:1:0",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 820,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "17421:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": "address"
															},
															"id": 822,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "17421:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"argumentTypes": null,
															"id": 823,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 787,
															"src": "17433:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 818,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 79,
														"src": "17403:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 824,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "17403:37:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 825,
												"nodeType": "EmitStatement",
												"src": "17398:42:0"
											}
										]
									},
									"documentation": "@dev Destroys `amount` tokens from `account`, reducing the\ntotal supply.\n   * Emits a {Transfer} event with `to` set to the zero address.\n   * Requirements\n   * - `account` cannot be the zero address.\n- `account` must have at least `amount` tokens.",
									"id": 827,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 788,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 785,
												"name": "account",
												"nodeType": "VariableDeclaration",
												"scope": 827,
												"src": "17134:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 784,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "17134:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 787,
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 827,
												"src": "17151:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 786,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "17151:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "17133:33:0"
									},
									"returnParameters": {
										"id": 789,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "17176:0:0"
									},
									"scope": 899,
									"src": "17119:326:0",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 868,
										"nodeType": "Block",
										"src": "17917:241:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 841,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 837,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 829,
																"src": "17931:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"hexValue": "30",
																		"id": 839,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "17948:1:0",
																		"subdenomination": null,
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 838,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "17940:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": "address"
																},
																"id": 840,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "17940:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "17931:19:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "4e55524132303a20617070726f76652066726f6d20746865207a65726f2061646472657373",
															"id": 842,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "17952:39:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b90e34ecb26036a9d936fbec916aea585f758de45994fffa930f636d387064e1",
																"typeString": "literal_string \"NURA20: approve from the zero address\""
															},
															"value": "NURA20: approve from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b90e34ecb26036a9d936fbec916aea585f758de45994fffa930f636d387064e1",
																"typeString": "literal_string \"NURA20: approve from the zero address\""
															}
														],
														"id": 836,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															917,
															918
														],
														"referencedDeclaration": 918,
														"src": "17923:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 843,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "17923:69:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 844,
												"nodeType": "ExpressionStatement",
												"src": "17923:69:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 850,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 846,
																"name": "spender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 831,
																"src": "18006:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"hexValue": "30",
																		"id": 848,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "18025:1:0",
																		"subdenomination": null,
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 847,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "18017:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": "address"
																},
																"id": 849,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "18017:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "18006:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "4e55524132303a20617070726f766520746f20746865207a65726f2061646472657373",
															"id": 851,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "18029:37:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_65a116172babf268b5516e0c75685601630a3fbcaf7ea0973efb15727690727d",
																"typeString": "literal_string \"NURA20: approve to the zero address\""
															},
															"value": "NURA20: approve to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_65a116172babf268b5516e0c75685601630a3fbcaf7ea0973efb15727690727d",
																"typeString": "literal_string \"NURA20: approve to the zero address\""
															}
														],
														"id": 845,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															917,
															918
														],
														"referencedDeclaration": 918,
														"src": "17998:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 852,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "17998:69:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 853,
												"nodeType": "ExpressionStatement",
												"src": "17998:69:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 860,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"baseExpression": {
																"argumentTypes": null,
																"id": 854,
																"name": "_allowances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 423,
																"src": "18074:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(address => uint256))"
																}
															},
															"id": 857,
															"indexExpression": {
																"argumentTypes": null,
																"id": 855,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 829,
																"src": "18086:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "18074:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 858,
														"indexExpression": {
															"argumentTypes": null,
															"id": 856,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 831,
															"src": "18093:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "18074:27:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"id": 859,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 833,
														"src": "18104:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "18074:36:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 861,
												"nodeType": "ExpressionStatement",
												"src": "18074:36:0"
											},
											{
												"eventCall": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 863,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 829,
															"src": "18130:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 864,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 831,
															"src": "18137:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 865,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 833,
															"src": "18146:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 862,
														"name": "Approval",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 87,
														"src": "18121:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 866,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "18121:32:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 867,
												"nodeType": "EmitStatement",
												"src": "18116:37:0"
											}
										]
									},
									"documentation": "@dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n   * This is internal function is equivalent to `approve`, and can be used to\ne.g. set automatic allowances for certain subsystems, etc.\n   * Emits an {Approval} event.\n   * Requirements:\n   * - `owner` cannot be the zero address.\n- `spender` cannot be the zero address.",
									"id": 869,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 834,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 829,
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 869,
												"src": "17860:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 828,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "17860:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 831,
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 869,
												"src": "17875:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 830,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "17875:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 833,
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 869,
												"src": "17892:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 832,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "17892:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "17859:48:0"
									},
									"returnParameters": {
										"id": 835,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "17917:0:0"
									},
									"scope": 899,
									"src": "17842:316:0",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 897,
										"nodeType": "Block",
										"src": "18383:159:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 877,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 871,
															"src": "18395:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 878,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 873,
															"src": "18404:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 876,
														"name": "_burn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 827,
														"src": "18389:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 879,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "18389:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 880,
												"nodeType": "ExpressionStatement",
												"src": "18389:22:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 882,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 871,
															"src": "18426:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 883,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 101,
																"src": "18435:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
																	"typeString": "function () view returns (address payable)"
																}
															},
															"id": 884,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "18435:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"id": 892,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 873,
																	"src": "18488:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"argumentTypes": null,
																	"hexValue": "4e55524132303a206275726e20616d6f756e74206578636565647320616c6c6f77616e6365",
																	"id": 893,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "18496:39:0",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_b236bfc90ed3a5ac5e1a43c9a622d7df5a84d111640f5a13617a951f41804ef0",
																		"typeString": "literal_string \"NURA20: burn amount exceeds allowance\""
																	},
																	"value": "NURA20: burn amount exceeds allowance"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_stringliteral_b236bfc90ed3a5ac5e1a43c9a622d7df5a84d111640f5a13617a951f41804ef0",
																		"typeString": "literal_string \"NURA20: burn amount exceeds allowance\""
																	}
																],
																"expression": {
																	"argumentTypes": null,
																	"baseExpression": {
																		"argumentTypes": null,
																		"baseExpression": {
																			"argumentTypes": null,
																			"id": 885,
																			"name": "_allowances",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 423,
																			"src": "18449:11:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																				"typeString": "mapping(address => mapping(address => uint256))"
																			}
																		},
																		"id": 887,
																		"indexExpression": {
																			"argumentTypes": null,
																			"id": 886,
																			"name": "account",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 871,
																			"src": "18461:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "18449:20:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																			"typeString": "mapping(address => uint256)"
																		}
																	},
																	"id": 890,
																	"indexExpression": {
																		"argumentTypes": null,
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 888,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 101,
																			"src": "18470:10:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
																				"typeString": "function () view returns (address payable)"
																			}
																		},
																		"id": 889,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "18470:12:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "18449:34:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 891,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sub",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 181,
																"src": "18449:38:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$bound_to$_t_uint256_$",
																	"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
																}
															},
															"id": 894,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "18449:87:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 881,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 869,
														"src": "18417:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 895,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "18417:120:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 896,
												"nodeType": "ExpressionStatement",
												"src": "18417:120:0"
											}
										]
									},
									"documentation": "@dev Destroys `amount` tokens from `account`.`amount` is then deducted\nfrom the caller's allowance.\n   * See {_burn} and {_approve}.",
									"id": 898,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burnFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 874,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 871,
												"name": "account",
												"nodeType": "VariableDeclaration",
												"scope": 898,
												"src": "18341:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 870,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "18341:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 873,
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 898,
												"src": "18358:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 872,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "18358:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "18340:33:0"
									},
									"returnParameters": {
										"id": 875,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "18383:0:0"
									},
									"scope": 899,
									"src": "18322:220:0",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "internal"
								}
							],
							"scope": 900,
							"src": "10967:7577:0"
						}
					],
					"src": "0:18544:0"
				},
				"id": 0
			}
		}
	}
}